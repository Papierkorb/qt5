#define protected public
#include "converters.hpp"
#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>

typedef QVector<QTextLength> Container_QVector_QTextLength;
typedef QVector<QRect> Container_QVector_QRect;
typedef QVector<QRectF> Container_QVector_QRectF;
typedef QVector<QPoint> Container_QVector_QPoint;
typedef QVector<QLine> Container_QVector_QLine;
typedef QVector<QPointF> Container_QVector_QPointF;
typedef QVector<QLineF> Container_QVector_QLineF;
typedef QVector<QTextFormat> Container_QVector_QTextFormat;
typedef QVector<unsigned int> Container_QVector_unsigned_int;
typedef QVector<QRgb> Container_QVector_QRgb;
typedef QList<QGesture *> Container_QList_QGesture_X;
typedef QList<QRectF> Container_QList_QRectF;
typedef QList<QGraphicsView *> Container_QList_QGraphicsView_X;
typedef QList<QGraphicsTransform *> Container_QList_QGraphicsTransform_X;
typedef QList<QGraphicsItem *> Container_QList_QGraphicsItem_X;
typedef QList<QFileInfo> Container_QList_QFileInfo;
typedef QList<double> Container_QList_double;
typedef QList<QUrl> Container_QList_QUrl;
typedef QList<QSize> Container_QList_QSize;
typedef QList<QVariant> Container_QList_QVariant;
typedef QList<QScreen *> Container_QList_QScreen_X;
typedef QList<QWindow *> Container_QList_QWindow_X;
typedef QList<QAbstractButton *> Container_QList_QAbstractButton_X;
typedef QList<int> Container_QList_int;
typedef QList<QDockWidget *> Container_QList_QDockWidget_X;
typedef QList<QGraphicsWidget *> Container_QList_QGraphicsWidget_X;
typedef QList<QKeySequence> Container_QList_QKeySequence;
typedef QList<QWidget *> Container_QList_QWidget_X;
typedef QList<QAction *> Container_QList_QAction_X;
typedef QList<QAbstractEventDispatcher::TimerInfo> Container_QList_QAbstractEventDispatcher__TimerInfo;
typedef QList<QObject *> Container_QList_QObject_X;
typedef QList<qreal> Container_QList_qreal;
struct BgJumptable_Object {
  CrystalProc<const QMetaObject *> bg_QObject_metaObject_;
  CrystalProc<void *, const char *> bg_QObject_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_Object : public QObject {
  using QObject::QObject;
  BgJumptable_Object bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_metaObject_.isValid()) {
      return _self_->bgJump.bg_QObject_metaObject_();
    } else {
      return QObject::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QObject_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QObject::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QObject::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QObject::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QObject::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QObject::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QObject::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QObject::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QObject::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Object *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QObject::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QObject_metaObject_(QObject * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QObject_qt_metacast_const_char_X(QObject * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX(QObject * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QObject_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QObject::tr(s));
}

extern "C" CrystalString bg_QObject_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QObject::tr(s, c));
}

extern "C" CrystalString bg_QObject_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QObject::tr(s, c, n));
}

extern "C" CrystalString bg_QObject_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QObject::trUtf8(s));
}

extern "C" CrystalString bg_QObject_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QObject::trUtf8(s, c));
}

extern "C" CrystalString bg_QObject_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QObject::trUtf8(s, c, n));
}

extern "C" QObject * bg_QObject__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_Object(parent);
}

extern "C" bool bg_QObject_event_QEvent_X(QObject * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QObject_eventFilter_QObject_X_QEvent_X(QObject * _self_, QObject * unnamed_arg_0, QEvent * unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" CrystalString bg_QObject_objectName_(QObject * _self_) {
  return qstring_to_crystal(_self_->objectName());
}

extern "C" void bg_QObject_setObjectName_const_QString_R(QObject * _self_, const CrystalString name) {
  _self_->setObjectName(QString::fromUtf8(name.ptr, name.size));
}

extern "C" bool bg_QObject_isWidgetType_(QObject * _self_) {
  return _self_->isWidgetType();
}

extern "C" bool bg_QObject_isWindowType_(QObject * _self_) {
  return _self_->isWindowType();
}

extern "C" bool bg_QObject_signalsBlocked_(QObject * _self_) {
  return _self_->signalsBlocked();
}

extern "C" bool bg_QObject_blockSignals_bool(QObject * _self_, bool b) {
  return _self_->blockSignals(b);
}

extern "C" QThread * bg_QObject_thread_(QObject * _self_) {
  return _self_->thread();
}

extern "C" void bg_QObject_moveToThread_QThread_X(QObject * _self_, QThread * thread) {
  _self_->moveToThread(thread);
}

extern "C" int bg_QObject_startTimer_int_Qt__TimerType(QObject * _self_, int interval, Qt::TimerType timerType) {
  return _self_->startTimer(interval, timerType);
}

extern "C" void bg_QObject_killTimer_int(QObject * _self_, int id) {
  _self_->killTimer(id);
}

extern "C" const QObjectList * bg_QObject_children_(QObject * _self_) {
  return &(_self_->children());
}

extern "C" void bg_QObject_setParent_QObject_X(QObject * _self_, QObject * unnamed_arg_0) {
  _self_->setParent(unnamed_arg_0);
}

extern "C" void bg_QObject_installEventFilter_QObject_X(QObject * _self_, QObject * unnamed_arg_0) {
  _self_->installEventFilter(unnamed_arg_0);
}

extern "C" void bg_QObject_removeEventFilter_QObject_X(QObject * _self_, QObject * unnamed_arg_0) {
  _self_->removeEventFilter(unnamed_arg_0);
}

extern "C" QMetaObject::Connection * bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X_Qt__ConnectionType(const QObject * sender, const char * signal, const QObject * receiver, const char * member, Qt::ConnectionType unnamed_arg_4) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(sender, signal, receiver, member, unnamed_arg_4));
}

extern "C" QMetaObject::Connection * bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R_Qt__ConnectionType(const QObject * sender, const QMetaMethod & signal, const QObject * receiver, const QMetaMethod & method, Qt::ConnectionType type) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(sender, signal, receiver, method, type));
}

extern "C" QMetaObject::Connection * bg_QObject_connect_const_QObject_X_const_char_X_const_char_X_Qt__ConnectionType(QObject * _self_, const QObject * sender, const char * signal, const char * member, Qt::ConnectionType type) {
  return new (UseGC) QMetaObject::Connection (_self_->connect(sender, signal, member, type));
}

extern "C" bool bg_QObject_disconnect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(const QObject * sender, const char * signal, const QObject * receiver, const char * member) {
  return QObject::disconnect(sender, signal, receiver, member);
}

extern "C" bool bg_QObject_disconnect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(const QObject * sender, const QMetaMethod & signal, const QObject * receiver, const QMetaMethod & member) {
  return QObject::disconnect(sender, signal, receiver, member);
}

extern "C" bool bg_QObject_disconnect_(QObject * _self_) {
  return _self_->disconnect();
}

extern "C" bool bg_QObject_disconnect_const_char_X(QObject * _self_, const char * signal) {
  return _self_->disconnect(signal);
}

extern "C" bool bg_QObject_disconnect_const_char_X_const_QObject_X(QObject * _self_, const char * signal, const QObject * receiver) {
  return _self_->disconnect(signal, receiver);
}

extern "C" bool bg_QObject_disconnect_const_char_X_const_QObject_X_const_char_X(QObject * _self_, const char * signal, const QObject * receiver, const char * member) {
  return _self_->disconnect(signal, receiver, member);
}

extern "C" bool bg_QObject_disconnect_const_QObject_X(QObject * _self_, const QObject * receiver) {
  return _self_->disconnect(receiver);
}

extern "C" bool bg_QObject_disconnect_const_QObject_X_const_char_X(QObject * _self_, const QObject * receiver, const char * member) {
  return _self_->disconnect(receiver, member);
}

extern "C" bool bg_QObject_disconnect_STATIC_const_QMetaObject__Connection_R(const QMetaObject::Connection & unnamed_arg_0) {
  return QObject::disconnect(unnamed_arg_0);
}

extern "C" void bg_QObject_dumpObjectTree_(QObject * _self_) {
  _self_->dumpObjectTree();
}

extern "C" void bg_QObject_dumpObjectInfo_(QObject * _self_) {
  _self_->dumpObjectInfo();
}

extern "C" bool bg_QObject_setProperty_const_char_X_const_QVariant_R(QObject * _self_, const char * name, const CrystalVariant value) {
  return _self_->setProperty(name, crystal_to_qvariant(value));
}

extern "C" CrystalVariant bg_QObject_property_const_char_X(QObject * _self_, const char * name) {
  return qvariant_to_crystal(_self_->property(name));
}

extern "C" uint bg_QObject_registerUserData_STATIC_() {
  return QObject::registerUserData();
}

extern "C" void bg_QObject_setUserData_uint_QObjectUserData_X(QObject * _self_, uint id, QObjectUserData * data) {
  _self_->setUserData(id, data);
}

extern "C" QObjectUserData * bg_QObject_userData_uint(QObject * _self_, uint id) {
  return _self_->userData(id);
}

extern "C" void bg_QObject_destroyed_QObject_X(QObject * _self_, QObject * unnamed_arg_0) {
  _self_->destroyed(unnamed_arg_0);
}

extern "C" QObject * bg_QObject_parent_(QObject * _self_) {
  return _self_->parent();
}

extern "C" bool bg_QObject_inherits_const_char_X(QObject * _self_, const char * classname) {
  return _self_->inherits(classname);
}

extern "C" void bg_QObject_deleteLater_(QObject * _self_) {
  _self_->deleteLater();
}

extern "C" QObject * bg_QObject_sender_(QObject * _self_) {
  return _self_->sender();
}

extern "C" int bg_QObject_senderSignalIndex_(QObject * _self_) {
  return _self_->senderSignalIndex();
}

extern "C" int bg_QObject_receivers_const_char_X(QObject * _self_, const char * signal) {
  return _self_->receivers(signal);
}

extern "C" bool bg_QObject_isSignalConnected_const_QMetaMethod_R(QObject * _self_, const QMetaMethod & signal) {
  return _self_->isSignalConnected(signal);
}

extern "C" void bg_QObject_timerEvent_QTimerEvent_X(QObject * _self_, QTimerEvent * unnamed_arg_0) {
  _self_->timerEvent(unnamed_arg_0);
}

extern "C" void bg_QObject_childEvent_QChildEvent_X(QObject * _self_, QChildEvent * unnamed_arg_0) {
  _self_->childEvent(unnamed_arg_0);
}

extern "C" void bg_QObject_customEvent_QEvent_X(QObject * _self_, QEvent * unnamed_arg_0) {
  _self_->customEvent(unnamed_arg_0);
}

extern "C" void bg_QObject_connectNotify_const_QMetaMethod_R(QObject * _self_, const QMetaMethod & signal) {
  _self_->connectNotify(signal);
}

extern "C" void bg_QObject_disconnectNotify_const_QMetaMethod_R(QObject * _self_, const QMetaMethod & signal) {
  _self_->disconnectNotify(signal);
}

extern "C" QMetaObject::Connection * bg_QObject_CONNECT_destroyed_CrystalProc_void_QObject_X(QObject * _self_, CrystalProc<void, QObject *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QObject::*)(QObject *))&QObject::destroyed, [_proc_](QObject * unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QObject_CONNECT_objectNameChanged_CrystalProc_void_const_QString_R(QObject * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QObject::*)(const QString &))&QObject::objectNameChanged, [_proc_](const QString & objectName){ _proc_(qstring_to_crystal(objectName)); }));
}

extern "C" void bg_BgInherit_Object_JUMPTABLE_BgJumptable_Object_R(BgInherit_Object * _self_, const BgJumptable_Object & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Timer {
  CrystalProc<const QMetaObject *> bg_QTimer_metaObject_;
  CrystalProc<void *, const char *> bg_QTimer_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QTimer_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QTimerEvent *> bg_QTimer_timerEvent_QTimerEvent_X;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_Timer : public QTimer {
  using QTimer::QTimer;
  BgJumptable_Timer bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QTimer_metaObject_.isValid()) {
      return _self_->bgJump.bg_QTimer_metaObject_();
    } else {
      return QTimer::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QTimer_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QTimer_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QTimer::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QTimer_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QTimer_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QTimer::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QTimer_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QTimer_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QTimer::timerEvent(unnamed_arg_0);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QTimer::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QTimer::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QTimer::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QTimer::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QTimer::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Timer *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QTimer::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QTimer_metaObject_(QTimer * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QTimer_qt_metacast_const_char_X(QTimer * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QTimer_qt_metacall_QMetaObject__Call_int_void_XX(QTimer * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QTimer_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTimer::tr(s));
}

extern "C" CrystalString bg_QTimer_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTimer::tr(s, c));
}

extern "C" CrystalString bg_QTimer_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTimer::tr(s, c, n));
}

extern "C" CrystalString bg_QTimer_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTimer::trUtf8(s));
}

extern "C" CrystalString bg_QTimer_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTimer::trUtf8(s, c));
}

extern "C" CrystalString bg_QTimer_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTimer::trUtf8(s, c, n));
}

extern "C" QTimer * bg_QTimer__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_Timer(parent);
}

extern "C" bool bg_QTimer_isActive_(QTimer * _self_) {
  return _self_->isActive();
}

extern "C" int bg_QTimer_timerId_(QTimer * _self_) {
  return _self_->timerId();
}

extern "C" void bg_QTimer_setInterval_int(QTimer * _self_, int msec) {
  _self_->setInterval(msec);
}

extern "C" int bg_QTimer_interval_(QTimer * _self_) {
  return _self_->interval();
}

extern "C" int bg_QTimer_remainingTime_(QTimer * _self_) {
  return _self_->remainingTime();
}

extern "C" void bg_QTimer_setTimerType_Qt__TimerType(QTimer * _self_, Qt::TimerType atype) {
  _self_->setTimerType(atype);
}

extern "C" Qt::TimerType bg_QTimer_timerType_(QTimer * _self_) {
  return _self_->timerType();
}

extern "C" void bg_QTimer_setSingleShot_bool(QTimer * _self_, bool singleShot) {
  _self_->setSingleShot(singleShot);
}

extern "C" bool bg_QTimer_isSingleShot_(QTimer * _self_) {
  return _self_->isSingleShot();
}

extern "C" void bg_QTimer_singleShot_STATIC_int_const_QObject_X_const_char_X(int msec, const QObject * receiver, const char * member) {
  QTimer::singleShot(msec, receiver, member);
}

extern "C" void bg_QTimer_singleShot_STATIC_int_Qt__TimerType_const_QObject_X_const_char_X(int msec, Qt::TimerType timerType, const QObject * receiver, const char * member) {
  QTimer::singleShot(msec, timerType, receiver, member);
}

extern "C" void bg_QTimer_start_int(QTimer * _self_, int msec) {
  _self_->start(msec);
}

extern "C" void bg_QTimer_start_(QTimer * _self_) {
  _self_->start();
}

extern "C" void bg_QTimer_stop_(QTimer * _self_) {
  _self_->stop();
}

extern "C" void bg_QTimer_timerEvent_QTimerEvent_X(QTimer * _self_, QTimerEvent * unnamed_arg_0) {
  _self_->timerEvent(unnamed_arg_0);
}

extern "C" QMetaObject::Connection * bg_QTimer_CONNECT_timeout_CrystalProc_void(QTimer * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTimer::*)())&QTimer::timeout, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_Timer_JUMPTABLE_BgJumptable_Timer_R(BgInherit_Timer * _self_, const BgJumptable_Timer & table) {
  _self_->bgJump = (table);
}

extern "C" QMetaObject::Connection * bg_QMetaObject__Connection__CONSTRUCT_() {
  return new (UseGC) QMetaObject::Connection();
}

struct BgJumptable_AbstractEventDispatcher {
  CrystalProc<const QMetaObject *> bg_QAbstractEventDispatcher_metaObject_;
  CrystalProc<void *, const char *> bg_QAbstractEventDispatcher_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEventLoop::ProcessEventsFlags> bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags;
  CrystalProc<bool> bg_QAbstractEventDispatcher_hasPendingEvents_;
  CrystalProc<void, QSocketNotifier *> bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X;
  CrystalProc<void, QSocketNotifier *> bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X;
  CrystalProc<void, int, int, Qt::TimerType, QObject *> bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X;
  CrystalProc<bool, int> bg_QAbstractEventDispatcher_unregisterTimer_int;
  CrystalProc<bool, QObject *> bg_QAbstractEventDispatcher_unregisterTimers_QObject_X;
  CrystalProc<Container_QList_QAbstractEventDispatcher__TimerInfo *, QObject *> bg_QAbstractEventDispatcher_registeredTimers_QObject_X;
  CrystalProc<int, int> bg_QAbstractEventDispatcher_remainingTime_int;
  CrystalProc<void> bg_QAbstractEventDispatcher_wakeUp_;
  CrystalProc<void> bg_QAbstractEventDispatcher_interrupt_;
  CrystalProc<void> bg_QAbstractEventDispatcher_flush_;
  CrystalProc<void> bg_QAbstractEventDispatcher_startingUp_;
  CrystalProc<void> bg_QAbstractEventDispatcher_closingDown_;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_AbstractEventDispatcher : public QAbstractEventDispatcher {
  using QAbstractEventDispatcher::QAbstractEventDispatcher;
  BgJumptable_AbstractEventDispatcher bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QAbstractEventDispatcher_metaObject_.isValid()) {
      return _self_->bgJump.bg_QAbstractEventDispatcher_metaObject_();
    } else {
      return QAbstractEventDispatcher::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QAbstractEventDispatcher_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QAbstractEventDispatcher_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAbstractEventDispatcher::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QAbstractEventDispatcher::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool processEvents(QEventLoop::ProcessEventsFlags flags) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags.isValid())) {
      return _self_->bgJump.bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(flags);
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::processEvents");
    }
  }
  
  bool hasPendingEvents() override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_hasPendingEvents_.isValid())) {
      return _self_->bgJump.bg_QAbstractEventDispatcher_hasPendingEvents_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::hasPendingEvents");
    }
  }
  
  void registerSocketNotifier(QSocketNotifier * notifier) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X.isValid())) {
      _self_->bgJump.bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(notifier);
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::registerSocketNotifier");
    }
  }
  
  void unregisterSocketNotifier(QSocketNotifier * notifier) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X.isValid())) {
      _self_->bgJump.bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(notifier);
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::unregisterSocketNotifier");
    }
  }
  
  void registerTimer(int timerId, int interval, Qt::TimerType timerType, QObject * object) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X.isValid())) {
      _self_->bgJump.bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(timerId, interval, timerType, object);
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::registerTimer");
    }
  }
  
  bool unregisterTimer(int timerId) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_unregisterTimer_int.isValid())) {
      return _self_->bgJump.bg_QAbstractEventDispatcher_unregisterTimer_int(timerId);
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::unregisterTimer");
    }
  }
  
  bool unregisterTimers(QObject * object) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_unregisterTimers_QObject_X.isValid())) {
      return _self_->bgJump.bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(object);
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::unregisterTimers");
    }
  }
  
  QList<QAbstractEventDispatcher::TimerInfo> registeredTimers(QObject * object) const override {
    const BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_registeredTimers_QObject_X.isValid())) {
      return *(_self_->bgJump.bg_QAbstractEventDispatcher_registeredTimers_QObject_X(object));
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::registeredTimers");
    }
  }
  
  int remainingTime(int timerId) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_remainingTime_int.isValid())) {
      return _self_->bgJump.bg_QAbstractEventDispatcher_remainingTime_int(timerId);
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::remainingTime");
    }
  }
  
  void wakeUp() override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_wakeUp_.isValid())) {
      _self_->bgJump.bg_QAbstractEventDispatcher_wakeUp_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::wakeUp");
    }
  }
  
  void interrupt() override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_interrupt_.isValid())) {
      _self_->bgJump.bg_QAbstractEventDispatcher_interrupt_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::interrupt");
    }
  }
  
  void flush() override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractEventDispatcher_flush_.isValid())) {
      _self_->bgJump.bg_QAbstractEventDispatcher_flush_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractEventDispatcher::flush");
    }
  }
  
  void startingUp() override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QAbstractEventDispatcher_startingUp_.isValid()) {
      _self_->bgJump.bg_QAbstractEventDispatcher_startingUp_();
    } else {
      QAbstractEventDispatcher::startingUp();
    }
  }
  
  void closingDown() override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QAbstractEventDispatcher_closingDown_.isValid()) {
      _self_->bgJump.bg_QAbstractEventDispatcher_closingDown_();
    } else {
      QAbstractEventDispatcher::closingDown();
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QAbstractEventDispatcher::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QAbstractEventDispatcher::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QAbstractEventDispatcher::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QAbstractEventDispatcher::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAbstractEventDispatcher::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QAbstractEventDispatcher::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_AbstractEventDispatcher *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QAbstractEventDispatcher::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QAbstractEventDispatcher_metaObject_(QAbstractEventDispatcher * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QAbstractEventDispatcher_qt_metacast_const_char_X(QAbstractEventDispatcher * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX(QAbstractEventDispatcher * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QAbstractEventDispatcher_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractEventDispatcher::tr(s));
}

extern "C" CrystalString bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractEventDispatcher::tr(s, c));
}

extern "C" CrystalString bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractEventDispatcher::tr(s, c, n));
}

extern "C" CrystalString bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractEventDispatcher::trUtf8(s));
}

extern "C" CrystalString bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractEventDispatcher::trUtf8(s, c));
}

extern "C" CrystalString bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractEventDispatcher::trUtf8(s, c, n));
}

extern "C" QAbstractEventDispatcher * bg_QAbstractEventDispatcher__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_AbstractEventDispatcher(parent);
}

extern "C" QAbstractEventDispatcher * bg_QAbstractEventDispatcher_instance_STATIC_QThread_X(QThread * thread) {
  return QAbstractEventDispatcher::instance(thread);
}

extern "C" bool bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(QAbstractEventDispatcher * _self_, QEventLoop::ProcessEventsFlags flags) {
  return _self_->processEvents(flags);
}

extern "C" bool bg_QAbstractEventDispatcher_hasPendingEvents_(QAbstractEventDispatcher * _self_) {
  return _self_->hasPendingEvents();
}

extern "C" void bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(QAbstractEventDispatcher * _self_, QSocketNotifier * notifier) {
  _self_->registerSocketNotifier(notifier);
}

extern "C" void bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(QAbstractEventDispatcher * _self_, QSocketNotifier * notifier) {
  _self_->unregisterSocketNotifier(notifier);
}

extern "C" int bg_QAbstractEventDispatcher_registerTimer_int_Qt__TimerType_QObject_X(QAbstractEventDispatcher * _self_, int interval, Qt::TimerType timerType, QObject * object) {
  return _self_->registerTimer(interval, timerType, object);
}

extern "C" void bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(QAbstractEventDispatcher * _self_, int timerId, int interval, Qt::TimerType timerType, QObject * object) {
  _self_->registerTimer(timerId, interval, timerType, object);
}

extern "C" bool bg_QAbstractEventDispatcher_unregisterTimer_int(QAbstractEventDispatcher * _self_, int timerId) {
  return _self_->unregisterTimer(timerId);
}

extern "C" bool bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(QAbstractEventDispatcher * _self_, QObject * object) {
  return _self_->unregisterTimers(object);
}

extern "C" Container_QList_QAbstractEventDispatcher__TimerInfo * bg_QAbstractEventDispatcher_registeredTimers_QObject_X(QAbstractEventDispatcher * _self_, QObject * object) {
  return new (UseGC) Container_QList_QAbstractEventDispatcher__TimerInfo (_self_->registeredTimers(object));
}

extern "C" int bg_QAbstractEventDispatcher_remainingTime_int(QAbstractEventDispatcher * _self_, int timerId) {
  return _self_->remainingTime(timerId);
}

extern "C" void bg_QAbstractEventDispatcher_wakeUp_(QAbstractEventDispatcher * _self_) {
  _self_->wakeUp();
}

extern "C" void bg_QAbstractEventDispatcher_interrupt_(QAbstractEventDispatcher * _self_) {
  _self_->interrupt();
}

extern "C" void bg_QAbstractEventDispatcher_flush_(QAbstractEventDispatcher * _self_) {
  _self_->flush();
}

extern "C" void bg_QAbstractEventDispatcher_startingUp_(QAbstractEventDispatcher * _self_) {
  _self_->startingUp();
}

extern "C" void bg_QAbstractEventDispatcher_closingDown_(QAbstractEventDispatcher * _self_) {
  _self_->closingDown();
}

extern "C" void bg_QAbstractEventDispatcher_installNativeEventFilter_QAbstractNativeEventFilter_X(QAbstractEventDispatcher * _self_, QAbstractNativeEventFilter * filterObj) {
  _self_->installNativeEventFilter(filterObj);
}

extern "C" void bg_QAbstractEventDispatcher_removeNativeEventFilter_QAbstractNativeEventFilter_X(QAbstractEventDispatcher * _self_, QAbstractNativeEventFilter * filterObj) {
  _self_->removeNativeEventFilter(filterObj);
}

extern "C" bool bg_QAbstractEventDispatcher_filterNativeEvent_const_QByteArray_R_void_X_long_X(QAbstractEventDispatcher * _self_, const QByteArray & eventType, void * message, long * result) {
  return _self_->filterNativeEvent(eventType, message, result);
}

extern "C" void bg_QAbstractEventDispatcher_aboutToBlock_(QAbstractEventDispatcher * _self_) {
  _self_->aboutToBlock();
}

extern "C" void bg_QAbstractEventDispatcher_awake_(QAbstractEventDispatcher * _self_) {
  _self_->awake();
}

extern "C" QAbstractEventDispatcher * bg_QAbstractEventDispatcher__CONSTRUCT_QAbstractEventDispatcherPrivate_R_QObject_X(QAbstractEventDispatcherPrivate & unnamed_arg_0, QObject * parent) {
  return new (UseGC) BgInherit_AbstractEventDispatcher(unnamed_arg_0, parent);
}

extern "C" QMetaObject::Connection * bg_QAbstractEventDispatcher_CONNECT_aboutToBlock_CrystalProc_void(QAbstractEventDispatcher * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractEventDispatcher::*)())&QAbstractEventDispatcher::aboutToBlock, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractEventDispatcher_CONNECT_awake_CrystalProc_void(QAbstractEventDispatcher * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractEventDispatcher::*)())&QAbstractEventDispatcher::awake, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_AbstractEventDispatcher_JUMPTABLE_BgJumptable_AbstractEventDispatcher_R(BgInherit_AbstractEventDispatcher * _self_, const BgJumptable_AbstractEventDispatcher & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_SocketNotifier {
  CrystalProc<const QMetaObject *> bg_QSocketNotifier_metaObject_;
  CrystalProc<void *, const char *> bg_QSocketNotifier_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QSocketNotifier_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_SocketNotifier : public QSocketNotifier {
  using QSocketNotifier::QSocketNotifier;
  BgJumptable_SocketNotifier bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QSocketNotifier_metaObject_.isValid()) {
      return _self_->bgJump.bg_QSocketNotifier_metaObject_();
    } else {
      return QSocketNotifier::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QSocketNotifier_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QSocketNotifier_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QSocketNotifier::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QSocketNotifier::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QSocketNotifier_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QSocketNotifier_event_QEvent_X(unnamed_arg_0);
    } else {
      return QSocketNotifier::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QSocketNotifier::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QSocketNotifier::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QSocketNotifier::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QSocketNotifier::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QSocketNotifier::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_SocketNotifier *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QSocketNotifier::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QSocketNotifier_metaObject_(QSocketNotifier * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QSocketNotifier_qt_metacast_const_char_X(QSocketNotifier * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX(QSocketNotifier * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QSocketNotifier_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QSocketNotifier::tr(s));
}

extern "C" CrystalString bg_QSocketNotifier_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QSocketNotifier::tr(s, c));
}

extern "C" CrystalString bg_QSocketNotifier_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QSocketNotifier::tr(s, c, n));
}

extern "C" CrystalString bg_QSocketNotifier_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QSocketNotifier::trUtf8(s));
}

extern "C" CrystalString bg_QSocketNotifier_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QSocketNotifier::trUtf8(s, c));
}

extern "C" CrystalString bg_QSocketNotifier_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QSocketNotifier::trUtf8(s, c, n));
}

extern "C" QSocketNotifier * bg_QSocketNotifier__CONSTRUCT_qintptr_QSocketNotifier__Type_QObject_X(qintptr socket, QSocketNotifier::Type unnamed_arg_1, QObject * parent) {
  return new (UseGC) BgInherit_SocketNotifier(socket, unnamed_arg_1, parent);
}

extern "C" qintptr bg_QSocketNotifier_socket_(QSocketNotifier * _self_) {
  return _self_->socket();
}

extern "C" QSocketNotifier::Type bg_QSocketNotifier_type_(QSocketNotifier * _self_) {
  return _self_->type();
}

extern "C" bool bg_QSocketNotifier_isEnabled_(QSocketNotifier * _self_) {
  return _self_->isEnabled();
}

extern "C" void bg_QSocketNotifier_setEnabled_bool(QSocketNotifier * _self_, bool unnamed_arg_0) {
  _self_->setEnabled(unnamed_arg_0);
}

extern "C" bool bg_QSocketNotifier_event_QEvent_X(QSocketNotifier * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" QMetaObject::Connection * bg_QSocketNotifier_CONNECT_activated_CrystalProc_void_int(QSocketNotifier * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QSocketNotifier::*)(int))&QSocketNotifier::activated, [_proc_](int socket){ _proc_(socket); }));
}

extern "C" void bg_BgInherit_SocketNotifier_JUMPTABLE_BgJumptable_SocketNotifier_R(BgInherit_SocketNotifier * _self_, const BgJumptable_SocketNotifier & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_PaintDevice {
  CrystalProc<int> bg_QPaintDevice_devType_;
  CrystalProc<QPaintEngine *> bg_QPaintDevice_paintEngine_;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QPaintDevice_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QPaintDevice_sharedPainter_;
};
struct BgInherit_PaintDevice : public QPaintDevice {
  using QPaintDevice::QPaintDevice;
  BgJumptable_PaintDevice bgJump;
  int devType() const override {
    const BgInherit_PaintDevice *_self_ = this;
    if (_self_->bgJump.bg_QPaintDevice_devType_.isValid()) {
      return _self_->bgJump.bg_QPaintDevice_devType_();
    } else {
      return QPaintDevice::devType();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_PaintDevice *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QPaintDevice_paintEngine_.isValid())) {
      return _self_->bgJump.bg_QPaintDevice_paintEngine_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QPaintDevice::paintEngine");
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric metric) const override {
    const BgInherit_PaintDevice *_self_ = this;
    if (_self_->bgJump.bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric(metric);
    } else {
      return QPaintDevice::metric(metric);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_PaintDevice *_self_ = this;
    if (_self_->bgJump.bg_QPaintDevice_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QPaintDevice_initPainter_QPainter_X(painter);
    } else {
      QPaintDevice::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_PaintDevice *_self_ = this;
    if (_self_->bgJump.bg_QPaintDevice_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QPaintDevice_sharedPainter_();
    } else {
      return QPaintDevice::sharedPainter();
    }
  }
  
};
extern "C" int bg_QPaintDevice_devType_(QPaintDevice * _self_) {
  return _self_->devType();
}

extern "C" bool bg_QPaintDevice_paintingActive_(QPaintDevice * _self_) {
  return _self_->paintingActive();
}

extern "C" QPaintEngine * bg_QPaintDevice_paintEngine_(QPaintDevice * _self_) {
  return _self_->paintEngine();
}

extern "C" int bg_QPaintDevice_width_(QPaintDevice * _self_) {
  return _self_->width();
}

extern "C" int bg_QPaintDevice_height_(QPaintDevice * _self_) {
  return _self_->height();
}

extern "C" int bg_QPaintDevice_widthMM_(QPaintDevice * _self_) {
  return _self_->widthMM();
}

extern "C" int bg_QPaintDevice_heightMM_(QPaintDevice * _self_) {
  return _self_->heightMM();
}

extern "C" int bg_QPaintDevice_logicalDpiX_(QPaintDevice * _self_) {
  return _self_->logicalDpiX();
}

extern "C" int bg_QPaintDevice_logicalDpiY_(QPaintDevice * _self_) {
  return _self_->logicalDpiY();
}

extern "C" int bg_QPaintDevice_physicalDpiX_(QPaintDevice * _self_) {
  return _self_->physicalDpiX();
}

extern "C" int bg_QPaintDevice_physicalDpiY_(QPaintDevice * _self_) {
  return _self_->physicalDpiY();
}

extern "C" int bg_QPaintDevice_devicePixelRatio_(QPaintDevice * _self_) {
  return _self_->devicePixelRatio();
}

extern "C" qreal bg_QPaintDevice_devicePixelRatioF_(QPaintDevice * _self_) {
  return _self_->devicePixelRatioF();
}

extern "C" int bg_QPaintDevice_colorCount_(QPaintDevice * _self_) {
  return _self_->colorCount();
}

extern "C" int bg_QPaintDevice_depth_(QPaintDevice * _self_) {
  return _self_->depth();
}

extern "C" qreal bg_QPaintDevice_devicePixelRatioFScale_STATIC_() {
  return QPaintDevice::devicePixelRatioFScale();
}

extern "C" QPaintDevice * bg_QPaintDevice__CONSTRUCT_() {
  return new (UseGC) BgInherit_PaintDevice();
}

extern "C" int bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric(QPaintDevice * _self_, QPaintDevice::PaintDeviceMetric metric) {
  return _self_->metric(metric);
}

extern "C" void bg_QPaintDevice_initPainter_QPainter_X(QPaintDevice * _self_, QPainter * painter) {
  _self_->initPainter(painter);
}

extern "C" QPainter * bg_QPaintDevice_sharedPainter_(QPaintDevice * _self_) {
  return _self_->sharedPainter();
}

extern "C" void bg_BgInherit_PaintDevice_JUMPTABLE_BgJumptable_PaintDevice_R(BgInherit_PaintDevice * _self_, const BgJumptable_PaintDevice & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Widget {
  CrystalProc<const QMetaObject *> bg_QWidget_metaObject_;
  CrystalProc<void *, const char *> bg_QWidget_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<bool, QEvent *> bg_QWidget_event_QEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QWidget_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<void, QEvent *> bg_QWidget_changeEvent_QEvent_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_Widget : public QWidget {
  using QWidget::QWidget;
  BgJumptable_Widget bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metaObject_.isValid()) {
      return _self_->bgJump.bg_QWidget_metaObject_();
    } else {
      return QWidget::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QWidget_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QWidget::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QWidget::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  int devType() const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QWidget::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QWidget::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QWidget::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QWidget_event_QEvent_X(unnamed_arg_0);
    } else {
      return QWidget::event(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QWidget::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QWidget::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QWidget::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QWidget::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QWidget::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QWidget::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QWidget::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QWidget::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QWidget::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QWidget::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QWidget::leaveEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QWidget::paintEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QWidget::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QWidget::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QWidget::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QWidget::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QWidget::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QWidget::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QWidget::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QWidget::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QWidget::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QWidget::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QWidget::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QWidget::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QWidget::changeEvent(unnamed_arg_0);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QWidget::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QWidget::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QWidget::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QWidget::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QWidget::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QWidget::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QWidget::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Widget *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QWidget::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QWidget_metaObject_(QWidget * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QWidget_qt_metacast_const_char_X(QWidget * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX(QWidget * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QWidget_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QWidget::tr(s));
}

extern "C" CrystalString bg_QWidget_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QWidget::tr(s, c));
}

extern "C" CrystalString bg_QWidget_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QWidget::tr(s, c, n));
}

extern "C" CrystalString bg_QWidget_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QWidget::trUtf8(s));
}

extern "C" CrystalString bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QWidget::trUtf8(s, c));
}

extern "C" CrystalString bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QWidget::trUtf8(s, c, n));
}

extern "C" QWidget * bg_QWidget__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_Widget(parent);
}

extern "C" QWidget * bg_QWidget__CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_Widget(parent, f);
}

extern "C" int bg_QWidget_devType_(QWidget * _self_) {
  return _self_->devType();
}

extern "C" WId bg_QWidget_winId_(QWidget * _self_) {
  return _self_->winId();
}

extern "C" void bg_QWidget_createWinId_(QWidget * _self_) {
  _self_->createWinId();
}

extern "C" WId bg_QWidget_internalWinId_(QWidget * _self_) {
  return _self_->internalWinId();
}

extern "C" WId bg_QWidget_effectiveWinId_(QWidget * _self_) {
  return _self_->effectiveWinId();
}

extern "C" QStyle * bg_QWidget_style_(QWidget * _self_) {
  return _self_->style();
}

extern "C" void bg_QWidget_setStyle_QStyle_X(QWidget * _self_, QStyle * unnamed_arg_0) {
  _self_->setStyle(unnamed_arg_0);
}

extern "C" bool bg_QWidget_isTopLevel_(QWidget * _self_) {
  return _self_->isTopLevel();
}

extern "C" bool bg_QWidget_isWindow_(QWidget * _self_) {
  return _self_->isWindow();
}

extern "C" bool bg_QWidget_isModal_(QWidget * _self_) {
  return _self_->isModal();
}

extern "C" Qt::WindowModality bg_QWidget_windowModality_(QWidget * _self_) {
  return _self_->windowModality();
}

extern "C" void bg_QWidget_setWindowModality_Qt__WindowModality(QWidget * _self_, Qt::WindowModality windowModality) {
  _self_->setWindowModality(windowModality);
}

extern "C" bool bg_QWidget_isEnabled_(QWidget * _self_) {
  return _self_->isEnabled();
}

extern "C" bool bg_QWidget_isEnabledTo_const_QWidget_X(QWidget * _self_, const QWidget * unnamed_arg_0) {
  return _self_->isEnabledTo(unnamed_arg_0);
}

extern "C" bool bg_QWidget_isEnabledToTLW_(QWidget * _self_) {
  return _self_->isEnabledToTLW();
}

extern "C" void bg_QWidget_setEnabled_bool(QWidget * _self_, bool unnamed_arg_0) {
  _self_->setEnabled(unnamed_arg_0);
}

extern "C" void bg_QWidget_setDisabled_bool(QWidget * _self_, bool unnamed_arg_0) {
  _self_->setDisabled(unnamed_arg_0);
}

extern "C" void bg_QWidget_setWindowModified_bool(QWidget * _self_, bool unnamed_arg_0) {
  _self_->setWindowModified(unnamed_arg_0);
}

extern "C" QRect * bg_QWidget_frameGeometry_(QWidget * _self_) {
  return new (UseGC) QRect (_self_->frameGeometry());
}

extern "C" const QRect * bg_QWidget_geometry_(QWidget * _self_) {
  return &(_self_->geometry());
}

extern "C" QRect * bg_QWidget_normalGeometry_(QWidget * _self_) {
  return new (UseGC) QRect (_self_->normalGeometry());
}

extern "C" int bg_QWidget_x_(QWidget * _self_) {
  return _self_->x();
}

extern "C" int bg_QWidget_y_(QWidget * _self_) {
  return _self_->y();
}

extern "C" QPoint bg_QWidget_pos_(QWidget * _self_) {
  return _self_->pos();
}

extern "C" QSize * bg_QWidget_frameSize_(QWidget * _self_) {
  return new (UseGC) QSize (_self_->frameSize());
}

extern "C" QSize * bg_QWidget_size_(QWidget * _self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" int bg_QWidget_width_(QWidget * _self_) {
  return _self_->width();
}

extern "C" int bg_QWidget_height_(QWidget * _self_) {
  return _self_->height();
}

extern "C" QRect * bg_QWidget_rect_(QWidget * _self_) {
  return new (UseGC) QRect (_self_->rect());
}

extern "C" QRect * bg_QWidget_childrenRect_(QWidget * _self_) {
  return new (UseGC) QRect (_self_->childrenRect());
}

extern "C" QRegion * bg_QWidget_childrenRegion_(QWidget * _self_) {
  return new (UseGC) QRegion (_self_->childrenRegion());
}

extern "C" QSize * bg_QWidget_minimumSize_(QWidget * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QWidget_maximumSize_(QWidget * _self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" int bg_QWidget_minimumWidth_(QWidget * _self_) {
  return _self_->minimumWidth();
}

extern "C" int bg_QWidget_minimumHeight_(QWidget * _self_) {
  return _self_->minimumHeight();
}

extern "C" int bg_QWidget_maximumWidth_(QWidget * _self_) {
  return _self_->maximumWidth();
}

extern "C" int bg_QWidget_maximumHeight_(QWidget * _self_) {
  return _self_->maximumHeight();
}

extern "C" void bg_QWidget_setMinimumSize_const_QSize_R(QWidget * _self_, const QSize & unnamed_arg_0) {
  _self_->setMinimumSize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setMinimumSize_int_int(QWidget * _self_, int minw, int minh) {
  _self_->setMinimumSize(minw, minh);
}

extern "C" void bg_QWidget_setMaximumSize_const_QSize_R(QWidget * _self_, const QSize & unnamed_arg_0) {
  _self_->setMaximumSize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setMaximumSize_int_int(QWidget * _self_, int maxw, int maxh) {
  _self_->setMaximumSize(maxw, maxh);
}

extern "C" void bg_QWidget_setMinimumWidth_int(QWidget * _self_, int minw) {
  _self_->setMinimumWidth(minw);
}

extern "C" void bg_QWidget_setMinimumHeight_int(QWidget * _self_, int minh) {
  _self_->setMinimumHeight(minh);
}

extern "C" void bg_QWidget_setMaximumWidth_int(QWidget * _self_, int maxw) {
  _self_->setMaximumWidth(maxw);
}

extern "C" void bg_QWidget_setMaximumHeight_int(QWidget * _self_, int maxh) {
  _self_->setMaximumHeight(maxh);
}

extern "C" QSize * bg_QWidget_sizeIncrement_(QWidget * _self_) {
  return new (UseGC) QSize (_self_->sizeIncrement());
}

extern "C" void bg_QWidget_setSizeIncrement_const_QSize_R(QWidget * _self_, const QSize & unnamed_arg_0) {
  _self_->setSizeIncrement(unnamed_arg_0);
}

extern "C" void bg_QWidget_setSizeIncrement_int_int(QWidget * _self_, int w, int h) {
  _self_->setSizeIncrement(w, h);
}

extern "C" QSize * bg_QWidget_baseSize_(QWidget * _self_) {
  return new (UseGC) QSize (_self_->baseSize());
}

extern "C" void bg_QWidget_setBaseSize_const_QSize_R(QWidget * _self_, const QSize & unnamed_arg_0) {
  _self_->setBaseSize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setBaseSize_int_int(QWidget * _self_, int basew, int baseh) {
  _self_->setBaseSize(basew, baseh);
}

extern "C" void bg_QWidget_setFixedSize_const_QSize_R(QWidget * _self_, const QSize & unnamed_arg_0) {
  _self_->setFixedSize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setFixedSize_int_int(QWidget * _self_, int w, int h) {
  _self_->setFixedSize(w, h);
}

extern "C" void bg_QWidget_setFixedWidth_int(QWidget * _self_, int w) {
  _self_->setFixedWidth(w);
}

extern "C" void bg_QWidget_setFixedHeight_int(QWidget * _self_, int h) {
  _self_->setFixedHeight(h);
}

extern "C" QPoint bg_QWidget_mapToGlobal_const_QPoint_R(QWidget * _self_, const QPoint unnamed_arg_0) {
  return _self_->mapToGlobal(unnamed_arg_0);
}

extern "C" QPoint bg_QWidget_mapFromGlobal_const_QPoint_R(QWidget * _self_, const QPoint unnamed_arg_0) {
  return _self_->mapFromGlobal(unnamed_arg_0);
}

extern "C" QPoint bg_QWidget_mapToParent_const_QPoint_R(QWidget * _self_, const QPoint unnamed_arg_0) {
  return _self_->mapToParent(unnamed_arg_0);
}

extern "C" QPoint bg_QWidget_mapFromParent_const_QPoint_R(QWidget * _self_, const QPoint unnamed_arg_0) {
  return _self_->mapFromParent(unnamed_arg_0);
}

extern "C" QPoint bg_QWidget_mapTo_const_QWidget_X_const_QPoint_R(QWidget * _self_, const QWidget * unnamed_arg_0, const QPoint unnamed_arg_1) {
  return _self_->mapTo(unnamed_arg_0, unnamed_arg_1);
}

extern "C" QPoint bg_QWidget_mapFrom_const_QWidget_X_const_QPoint_R(QWidget * _self_, const QWidget * unnamed_arg_0, const QPoint unnamed_arg_1) {
  return _self_->mapFrom(unnamed_arg_0, unnamed_arg_1);
}

extern "C" QWidget * bg_QWidget_window_(QWidget * _self_) {
  return _self_->window();
}

extern "C" QWidget * bg_QWidget_nativeParentWidget_(QWidget * _self_) {
  return _self_->nativeParentWidget();
}

extern "C" QWidget * bg_QWidget_topLevelWidget_(QWidget * _self_) {
  return _self_->topLevelWidget();
}

extern "C" const QPalette * bg_QWidget_palette_(QWidget * _self_) {
  return &(_self_->palette());
}

extern "C" void bg_QWidget_setPalette_const_QPalette_R(QWidget * _self_, const QPalette & unnamed_arg_0) {
  _self_->setPalette(unnamed_arg_0);
}

extern "C" void bg_QWidget_setBackgroundRole_QPalette__ColorRole(QWidget * _self_, QPalette::ColorRole unnamed_arg_0) {
  _self_->setBackgroundRole(unnamed_arg_0);
}

extern "C" QPalette::ColorRole bg_QWidget_backgroundRole_(QWidget * _self_) {
  return _self_->backgroundRole();
}

extern "C" void bg_QWidget_setForegroundRole_QPalette__ColorRole(QWidget * _self_, QPalette::ColorRole unnamed_arg_0) {
  _self_->setForegroundRole(unnamed_arg_0);
}

extern "C" QPalette::ColorRole bg_QWidget_foregroundRole_(QWidget * _self_) {
  return _self_->foregroundRole();
}

extern "C" const QFont * bg_QWidget_font_(QWidget * _self_) {
  return &(_self_->font());
}

extern "C" void bg_QWidget_setFont_const_QFont_R(QWidget * _self_, const QFont & unnamed_arg_0) {
  _self_->setFont(unnamed_arg_0);
}

extern "C" QFontMetrics * bg_QWidget_fontMetrics_(QWidget * _self_) {
  return new (UseGC) QFontMetrics (_self_->fontMetrics());
}

extern "C" QFontInfo * bg_QWidget_fontInfo_(QWidget * _self_) {
  return new (UseGC) QFontInfo (_self_->fontInfo());
}

extern "C" QCursor * bg_QWidget_cursor_(QWidget * _self_) {
  return new (UseGC) QCursor (_self_->cursor());
}

extern "C" void bg_QWidget_setCursor_const_QCursor_R(QWidget * _self_, const QCursor & unnamed_arg_0) {
  _self_->setCursor(unnamed_arg_0);
}

extern "C" void bg_QWidget_unsetCursor_(QWidget * _self_) {
  _self_->unsetCursor();
}

extern "C" void bg_QWidget_setMouseTracking_bool(QWidget * _self_, bool enable) {
  _self_->setMouseTracking(enable);
}

extern "C" bool bg_QWidget_hasMouseTracking_(QWidget * _self_) {
  return _self_->hasMouseTracking();
}

extern "C" bool bg_QWidget_underMouse_(QWidget * _self_) {
  return _self_->underMouse();
}

extern "C" void bg_QWidget_setMask_const_QBitmap_R(QWidget * _self_, const QBitmap & unnamed_arg_0) {
  _self_->setMask(unnamed_arg_0);
}

extern "C" void bg_QWidget_setMask_const_QRegion_R(QWidget * _self_, const QRegion & unnamed_arg_0) {
  _self_->setMask(unnamed_arg_0);
}

extern "C" QRegion * bg_QWidget_mask_(QWidget * _self_) {
  return new (UseGC) QRegion (_self_->mask());
}

extern "C" void bg_QWidget_clearMask_(QWidget * _self_) {
  _self_->clearMask();
}

extern "C" void bg_QWidget_render_QPaintDevice_X(QWidget * _self_, QPaintDevice * target) {
  _self_->render(target);
}

extern "C" void bg_QWidget_render_QPaintDevice_X_const_QPoint_R(QWidget * _self_, QPaintDevice * target, const QPoint targetOffset) {
  _self_->render(target, targetOffset);
}

extern "C" void bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R(QWidget * _self_, QPaintDevice * target, const QPoint targetOffset, const QRegion & sourceRegion) {
  _self_->render(target, targetOffset, sourceRegion);
}

extern "C" void bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(QWidget * _self_, QPaintDevice * target, const QPoint targetOffset, const QRegion & sourceRegion, QWidget::RenderFlags renderFlags) {
  _self_->render(target, targetOffset, sourceRegion, renderFlags);
}

extern "C" void bg_QWidget_render_QPainter_X(QWidget * _self_, QPainter * painter) {
  _self_->render(painter);
}

extern "C" void bg_QWidget_render_QPainter_X_const_QPoint_R(QWidget * _self_, QPainter * painter, const QPoint targetOffset) {
  _self_->render(painter, targetOffset);
}

extern "C" void bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R(QWidget * _self_, QPainter * painter, const QPoint targetOffset, const QRegion & sourceRegion) {
  _self_->render(painter, targetOffset, sourceRegion);
}

extern "C" void bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(QWidget * _self_, QPainter * painter, const QPoint targetOffset, const QRegion & sourceRegion, QWidget::RenderFlags renderFlags) {
  _self_->render(painter, targetOffset, sourceRegion, renderFlags);
}

extern "C" QPixmap * bg_QWidget_grab_(QWidget * _self_) {
  return new (UseGC) QPixmap (_self_->grab());
}

extern "C" QPixmap * bg_QWidget_grab_const_QRect_R(QWidget * _self_, const QRect & rectangle) {
  return new (UseGC) QPixmap (_self_->grab(rectangle));
}

extern "C" QGraphicsEffect * bg_QWidget_graphicsEffect_(QWidget * _self_) {
  return _self_->graphicsEffect();
}

extern "C" void bg_QWidget_setGraphicsEffect_QGraphicsEffect_X(QWidget * _self_, QGraphicsEffect * effect) {
  _self_->setGraphicsEffect(effect);
}

extern "C" void bg_QWidget_grabGesture_Qt__GestureType(QWidget * _self_, Qt::GestureType type) {
  _self_->grabGesture(type);
}

extern "C" void bg_QWidget_grabGesture_Qt__GestureType_Qt__GestureFlags(QWidget * _self_, Qt::GestureType type, Qt::GestureFlags flags) {
  _self_->grabGesture(type, flags);
}

extern "C" void bg_QWidget_ungrabGesture_Qt__GestureType(QWidget * _self_, Qt::GestureType type) {
  _self_->ungrabGesture(type);
}

extern "C" void bg_QWidget_setWindowTitle_const_QString_R(QWidget * _self_, const CrystalString unnamed_arg_0) {
  _self_->setWindowTitle(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QWidget_setStyleSheet_const_QString_R(QWidget * _self_, const CrystalString styleSheet) {
  _self_->setStyleSheet(QString::fromUtf8(styleSheet.ptr, styleSheet.size));
}

extern "C" CrystalString bg_QWidget_styleSheet_(QWidget * _self_) {
  return qstring_to_crystal(_self_->styleSheet());
}

extern "C" CrystalString bg_QWidget_windowTitle_(QWidget * _self_) {
  return qstring_to_crystal(_self_->windowTitle());
}

extern "C" void bg_QWidget_setWindowIcon_const_QIcon_R(QWidget * _self_, const QIcon & icon) {
  _self_->setWindowIcon(icon);
}

extern "C" QIcon * bg_QWidget_windowIcon_(QWidget * _self_) {
  return new (UseGC) QIcon (_self_->windowIcon());
}

extern "C" void bg_QWidget_setWindowIconText_const_QString_R(QWidget * _self_, const CrystalString unnamed_arg_0) {
  _self_->setWindowIconText(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_windowIconText_(QWidget * _self_) {
  return qstring_to_crystal(_self_->windowIconText());
}

extern "C" void bg_QWidget_setWindowRole_const_QString_R(QWidget * _self_, const CrystalString unnamed_arg_0) {
  _self_->setWindowRole(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_windowRole_(QWidget * _self_) {
  return qstring_to_crystal(_self_->windowRole());
}

extern "C" void bg_QWidget_setWindowFilePath_const_QString_R(QWidget * _self_, const CrystalString filePath) {
  _self_->setWindowFilePath(QString::fromUtf8(filePath.ptr, filePath.size));
}

extern "C" CrystalString bg_QWidget_windowFilePath_(QWidget * _self_) {
  return qstring_to_crystal(_self_->windowFilePath());
}

extern "C" void bg_QWidget_setWindowOpacity_qreal(QWidget * _self_, qreal level) {
  _self_->setWindowOpacity(level);
}

extern "C" qreal bg_QWidget_windowOpacity_(QWidget * _self_) {
  return _self_->windowOpacity();
}

extern "C" bool bg_QWidget_isWindowModified_(QWidget * _self_) {
  return _self_->isWindowModified();
}

extern "C" void bg_QWidget_setToolTip_const_QString_R(QWidget * _self_, const CrystalString unnamed_arg_0) {
  _self_->setToolTip(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_toolTip_(QWidget * _self_) {
  return qstring_to_crystal(_self_->toolTip());
}

extern "C" void bg_QWidget_setToolTipDuration_int(QWidget * _self_, int msec) {
  _self_->setToolTipDuration(msec);
}

extern "C" int bg_QWidget_toolTipDuration_(QWidget * _self_) {
  return _self_->toolTipDuration();
}

extern "C" void bg_QWidget_setStatusTip_const_QString_R(QWidget * _self_, const CrystalString unnamed_arg_0) {
  _self_->setStatusTip(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_statusTip_(QWidget * _self_) {
  return qstring_to_crystal(_self_->statusTip());
}

extern "C" void bg_QWidget_setWhatsThis_const_QString_R(QWidget * _self_, const CrystalString unnamed_arg_0) {
  _self_->setWhatsThis(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_whatsThis_(QWidget * _self_) {
  return qstring_to_crystal(_self_->whatsThis());
}

extern "C" CrystalString bg_QWidget_accessibleName_(QWidget * _self_) {
  return qstring_to_crystal(_self_->accessibleName());
}

extern "C" void bg_QWidget_setAccessibleName_const_QString_R(QWidget * _self_, const CrystalString name) {
  _self_->setAccessibleName(QString::fromUtf8(name.ptr, name.size));
}

extern "C" CrystalString bg_QWidget_accessibleDescription_(QWidget * _self_) {
  return qstring_to_crystal(_self_->accessibleDescription());
}

extern "C" void bg_QWidget_setAccessibleDescription_const_QString_R(QWidget * _self_, const CrystalString description) {
  _self_->setAccessibleDescription(QString::fromUtf8(description.ptr, description.size));
}

extern "C" void bg_QWidget_setLayoutDirection_Qt__LayoutDirection(QWidget * _self_, Qt::LayoutDirection direction) {
  _self_->setLayoutDirection(direction);
}

extern "C" Qt::LayoutDirection bg_QWidget_layoutDirection_(QWidget * _self_) {
  return _self_->layoutDirection();
}

extern "C" void bg_QWidget_unsetLayoutDirection_(QWidget * _self_) {
  _self_->unsetLayoutDirection();
}

extern "C" void bg_QWidget_setLocale_const_QLocale_R(QWidget * _self_, const QLocale & locale) {
  _self_->setLocale(locale);
}

extern "C" QLocale * bg_QWidget_locale_(QWidget * _self_) {
  return new (UseGC) QLocale (_self_->locale());
}

extern "C" void bg_QWidget_unsetLocale_(QWidget * _self_) {
  _self_->unsetLocale();
}

extern "C" bool bg_QWidget_isRightToLeft_(QWidget * _self_) {
  return _self_->isRightToLeft();
}

extern "C" bool bg_QWidget_isLeftToRight_(QWidget * _self_) {
  return _self_->isLeftToRight();
}

extern "C" void bg_QWidget_setFocus_(QWidget * _self_) {
  _self_->setFocus();
}

extern "C" bool bg_QWidget_isActiveWindow_(QWidget * _self_) {
  return _self_->isActiveWindow();
}

extern "C" void bg_QWidget_activateWindow_(QWidget * _self_) {
  _self_->activateWindow();
}

extern "C" void bg_QWidget_clearFocus_(QWidget * _self_) {
  _self_->clearFocus();
}

extern "C" void bg_QWidget_setFocus_Qt__FocusReason(QWidget * _self_, Qt::FocusReason reason) {
  _self_->setFocus(reason);
}

extern "C" Qt::FocusPolicy bg_QWidget_focusPolicy_(QWidget * _self_) {
  return _self_->focusPolicy();
}

extern "C" void bg_QWidget_setFocusPolicy_Qt__FocusPolicy(QWidget * _self_, Qt::FocusPolicy policy) {
  _self_->setFocusPolicy(policy);
}

extern "C" bool bg_QWidget_hasFocus_(QWidget * _self_) {
  return _self_->hasFocus();
}

extern "C" void bg_QWidget_setTabOrder_STATIC_QWidget_X_QWidget_X(QWidget * unnamed_arg_0, QWidget * unnamed_arg_1) {
  QWidget::setTabOrder(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QWidget_setFocusProxy_QWidget_X(QWidget * _self_, QWidget * unnamed_arg_0) {
  _self_->setFocusProxy(unnamed_arg_0);
}

extern "C" QWidget * bg_QWidget_focusProxy_(QWidget * _self_) {
  return _self_->focusProxy();
}

extern "C" Qt::ContextMenuPolicy bg_QWidget_contextMenuPolicy_(QWidget * _self_) {
  return _self_->contextMenuPolicy();
}

extern "C" void bg_QWidget_setContextMenuPolicy_Qt__ContextMenuPolicy(QWidget * _self_, Qt::ContextMenuPolicy policy) {
  _self_->setContextMenuPolicy(policy);
}

extern "C" void bg_QWidget_grabMouse_(QWidget * _self_) {
  _self_->grabMouse();
}

extern "C" void bg_QWidget_grabMouse_const_QCursor_R(QWidget * _self_, const QCursor & unnamed_arg_0) {
  _self_->grabMouse(unnamed_arg_0);
}

extern "C" void bg_QWidget_releaseMouse_(QWidget * _self_) {
  _self_->releaseMouse();
}

extern "C" void bg_QWidget_grabKeyboard_(QWidget * _self_) {
  _self_->grabKeyboard();
}

extern "C" void bg_QWidget_releaseKeyboard_(QWidget * _self_) {
  _self_->releaseKeyboard();
}

extern "C" int bg_QWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(QWidget * _self_, const QKeySequence & key, Qt::ShortcutContext context) {
  return _self_->grabShortcut(key, context);
}

extern "C" void bg_QWidget_releaseShortcut_int(QWidget * _self_, int id) {
  _self_->releaseShortcut(id);
}

extern "C" void bg_QWidget_setShortcutEnabled_int_bool(QWidget * _self_, int id, bool enable) {
  _self_->setShortcutEnabled(id, enable);
}

extern "C" void bg_QWidget_setShortcutAutoRepeat_int_bool(QWidget * _self_, int id, bool enable) {
  _self_->setShortcutAutoRepeat(id, enable);
}

extern "C" QWidget * bg_QWidget_mouseGrabber_STATIC_() {
  return QWidget::mouseGrabber();
}

extern "C" QWidget * bg_QWidget_keyboardGrabber_STATIC_() {
  return QWidget::keyboardGrabber();
}

extern "C" bool bg_QWidget_updatesEnabled_(QWidget * _self_) {
  return _self_->updatesEnabled();
}

extern "C" void bg_QWidget_setUpdatesEnabled_bool(QWidget * _self_, bool enable) {
  _self_->setUpdatesEnabled(enable);
}

extern "C" QGraphicsProxyWidget * bg_QWidget_graphicsProxyWidget_(QWidget * _self_) {
  return _self_->graphicsProxyWidget();
}

extern "C" void bg_QWidget_update_(QWidget * _self_) {
  _self_->update();
}

extern "C" void bg_QWidget_repaint_(QWidget * _self_) {
  _self_->repaint();
}

extern "C" void bg_QWidget_update_int_int_int_int(QWidget * _self_, int x, int y, int w, int h) {
  _self_->update(x, y, w, h);
}

extern "C" void bg_QWidget_update_const_QRect_R(QWidget * _self_, const QRect & unnamed_arg_0) {
  _self_->update(unnamed_arg_0);
}

extern "C" void bg_QWidget_update_const_QRegion_R(QWidget * _self_, const QRegion & unnamed_arg_0) {
  _self_->update(unnamed_arg_0);
}

extern "C" void bg_QWidget_repaint_int_int_int_int(QWidget * _self_, int x, int y, int w, int h) {
  _self_->repaint(x, y, w, h);
}

extern "C" void bg_QWidget_repaint_const_QRect_R(QWidget * _self_, const QRect & unnamed_arg_0) {
  _self_->repaint(unnamed_arg_0);
}

extern "C" void bg_QWidget_repaint_const_QRegion_R(QWidget * _self_, const QRegion & unnamed_arg_0) {
  _self_->repaint(unnamed_arg_0);
}

extern "C" void bg_QWidget_setVisible_bool(QWidget * _self_, bool visible) {
  _self_->setVisible(visible);
}

extern "C" void bg_QWidget_setHidden_bool(QWidget * _self_, bool hidden) {
  _self_->setHidden(hidden);
}

extern "C" void bg_QWidget_show_(QWidget * _self_) {
  _self_->show();
}

extern "C" void bg_QWidget_hide_(QWidget * _self_) {
  _self_->hide();
}

extern "C" void bg_QWidget_showMinimized_(QWidget * _self_) {
  _self_->showMinimized();
}

extern "C" void bg_QWidget_showMaximized_(QWidget * _self_) {
  _self_->showMaximized();
}

extern "C" void bg_QWidget_showFullScreen_(QWidget * _self_) {
  _self_->showFullScreen();
}

extern "C" void bg_QWidget_showNormal_(QWidget * _self_) {
  _self_->showNormal();
}

extern "C" bool bg_QWidget_close_(QWidget * _self_) {
  return _self_->close();
}

extern "C" void bg_QWidget_raise_(QWidget * _self_) {
  _self_->raise();
}

extern "C" void bg_QWidget_lower_(QWidget * _self_) {
  _self_->lower();
}

extern "C" void bg_QWidget_stackUnder_QWidget_X(QWidget * _self_, QWidget * unnamed_arg_0) {
  _self_->stackUnder(unnamed_arg_0);
}

extern "C" void bg_QWidget_move_int_int(QWidget * _self_, int x, int y) {
  _self_->move(x, y);
}

extern "C" void bg_QWidget_move_const_QPoint_R(QWidget * _self_, const QPoint unnamed_arg_0) {
  _self_->move(unnamed_arg_0);
}

extern "C" void bg_QWidget_resize_int_int(QWidget * _self_, int w, int h) {
  _self_->resize(w, h);
}

extern "C" void bg_QWidget_resize_const_QSize_R(QWidget * _self_, const QSize & unnamed_arg_0) {
  _self_->resize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setGeometry_int_int_int_int(QWidget * _self_, int x, int y, int w, int h) {
  _self_->setGeometry(x, y, w, h);
}

extern "C" void bg_QWidget_setGeometry_const_QRect_R(QWidget * _self_, const QRect & unnamed_arg_0) {
  _self_->setGeometry(unnamed_arg_0);
}

extern "C" QByteArray * bg_QWidget_saveGeometry_(QWidget * _self_) {
  return new (UseGC) QByteArray (_self_->saveGeometry());
}

extern "C" bool bg_QWidget_restoreGeometry_const_QByteArray_R(QWidget * _self_, const QByteArray & geometry) {
  return _self_->restoreGeometry(geometry);
}

extern "C" void bg_QWidget_adjustSize_(QWidget * _self_) {
  _self_->adjustSize();
}

extern "C" bool bg_QWidget_isVisible_(QWidget * _self_) {
  return _self_->isVisible();
}

extern "C" bool bg_QWidget_isVisibleTo_const_QWidget_X(QWidget * _self_, const QWidget * unnamed_arg_0) {
  return _self_->isVisibleTo(unnamed_arg_0);
}

extern "C" bool bg_QWidget_isHidden_(QWidget * _self_) {
  return _self_->isHidden();
}

extern "C" bool bg_QWidget_isMinimized_(QWidget * _self_) {
  return _self_->isMinimized();
}

extern "C" bool bg_QWidget_isMaximized_(QWidget * _self_) {
  return _self_->isMaximized();
}

extern "C" bool bg_QWidget_isFullScreen_(QWidget * _self_) {
  return _self_->isFullScreen();
}

extern "C" Qt::WindowStates bg_QWidget_windowState_(QWidget * _self_) {
  return _self_->windowState();
}

extern "C" void bg_QWidget_setWindowState_Qt__WindowStates(QWidget * _self_, Qt::WindowStates state) {
  _self_->setWindowState(state);
}

extern "C" void bg_QWidget_overrideWindowState_Qt__WindowStates(QWidget * _self_, Qt::WindowStates state) {
  _self_->overrideWindowState(state);
}

extern "C" QSize * bg_QWidget_sizeHint_(QWidget * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QWidget_minimumSizeHint_(QWidget * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" QSizePolicy * bg_QWidget_sizePolicy_(QWidget * _self_) {
  return new (UseGC) QSizePolicy (_self_->sizePolicy());
}

extern "C" void bg_QWidget_setSizePolicy_QSizePolicy(QWidget * _self_, QSizePolicy & unnamed_arg_0) {
  _self_->setSizePolicy(unnamed_arg_0);
}

extern "C" void bg_QWidget_setSizePolicy_QSizePolicy__Policy_QSizePolicy__Policy(QWidget * _self_, QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical) {
  _self_->setSizePolicy(horizontal, vertical);
}

extern "C" int bg_QWidget_heightForWidth_int(QWidget * _self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" bool bg_QWidget_hasHeightForWidth_(QWidget * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" QRegion * bg_QWidget_visibleRegion_(QWidget * _self_) {
  return new (UseGC) QRegion (_self_->visibleRegion());
}

extern "C" void bg_QWidget_setContentsMargins_int_int_int_int(QWidget * _self_, int left, int top, int right, int bottom) {
  _self_->setContentsMargins(left, top, right, bottom);
}

extern "C" void bg_QWidget_setContentsMargins_const_QMargins_R(QWidget * _self_, const QMargins & margins) {
  _self_->setContentsMargins(margins);
}

extern "C" void bg_QWidget_getContentsMargins_int_X_int_X_int_X_int_X(QWidget * _self_, int * left, int * top, int * right, int * bottom) {
  _self_->getContentsMargins(left, top, right, bottom);
}

extern "C" QMargins * bg_QWidget_contentsMargins_(QWidget * _self_) {
  return new (UseGC) QMargins (_self_->contentsMargins());
}

extern "C" QRect * bg_QWidget_contentsRect_(QWidget * _self_) {
  return new (UseGC) QRect (_self_->contentsRect());
}

extern "C" QLayout * bg_QWidget_layout_(QWidget * _self_) {
  return _self_->layout();
}

extern "C" void bg_QWidget_setLayout_QLayout_X(QWidget * _self_, QLayout * unnamed_arg_0) {
  _self_->setLayout(unnamed_arg_0);
}

extern "C" void bg_QWidget_updateGeometry_(QWidget * _self_) {
  _self_->updateGeometry();
}

extern "C" void bg_QWidget_setParent_QWidget_X(QWidget * _self_, QWidget * parent) {
  _self_->setParent(parent);
}

extern "C" void bg_QWidget_setParent_QWidget_X_Qt__WindowFlags(QWidget * _self_, QWidget * parent, Qt::WindowFlags f) {
  _self_->setParent(parent, f);
}

extern "C" void bg_QWidget_scroll_int_int(QWidget * _self_, int dx, int dy) {
  _self_->scroll(dx, dy);
}

extern "C" void bg_QWidget_scroll_int_int_const_QRect_R(QWidget * _self_, int dx, int dy, const QRect & unnamed_arg_2) {
  _self_->scroll(dx, dy, unnamed_arg_2);
}

extern "C" QWidget * bg_QWidget_focusWidget_(QWidget * _self_) {
  return _self_->focusWidget();
}

extern "C" QWidget * bg_QWidget_nextInFocusChain_(QWidget * _self_) {
  return _self_->nextInFocusChain();
}

extern "C" QWidget * bg_QWidget_previousInFocusChain_(QWidget * _self_) {
  return _self_->previousInFocusChain();
}

extern "C" bool bg_QWidget_acceptDrops_(QWidget * _self_) {
  return _self_->acceptDrops();
}

extern "C" void bg_QWidget_setAcceptDrops_bool(QWidget * _self_, bool on) {
  _self_->setAcceptDrops(on);
}

extern "C" void bg_QWidget_addAction_QAction_X(QWidget * _self_, QAction * action) {
  _self_->addAction(action);
}

extern "C" void bg_QWidget_addActions_QList_QAction_X_(QWidget * _self_, Container_QList_QAction_X * actions) {
  _self_->addActions(*(actions));
}

extern "C" void bg_QWidget_insertAction_QAction_X_QAction_X(QWidget * _self_, QAction * before, QAction * action) {
  _self_->insertAction(before, action);
}

extern "C" void bg_QWidget_insertActions_QAction_X_QList_QAction_X_(QWidget * _self_, QAction * before, Container_QList_QAction_X * actions) {
  _self_->insertActions(before, *(actions));
}

extern "C" void bg_QWidget_removeAction_QAction_X(QWidget * _self_, QAction * action) {
  _self_->removeAction(action);
}

extern "C" Container_QList_QAction_X * bg_QWidget_actions_(QWidget * _self_) {
  return new (UseGC) Container_QList_QAction_X (_self_->actions());
}

extern "C" QWidget * bg_QWidget_parentWidget_(QWidget * _self_) {
  return _self_->parentWidget();
}

extern "C" void bg_QWidget_setWindowFlags_Qt__WindowFlags(QWidget * _self_, Qt::WindowFlags type) {
  _self_->setWindowFlags(type);
}

extern "C" Qt::WindowFlags bg_QWidget_windowFlags_(QWidget * _self_) {
  return _self_->windowFlags();
}

extern "C" void bg_QWidget_overrideWindowFlags_Qt__WindowFlags(QWidget * _self_, Qt::WindowFlags type) {
  _self_->overrideWindowFlags(type);
}

extern "C" Qt::WindowType bg_QWidget_windowType_(QWidget * _self_) {
  return _self_->windowType();
}

extern "C" QWidget * bg_QWidget_find_STATIC_WId(WId unnamed_arg_0) {
  return QWidget::find(unnamed_arg_0);
}

extern "C" QWidget * bg_QWidget_childAt_int_int(QWidget * _self_, int x, int y) {
  return _self_->childAt(x, y);
}

extern "C" QWidget * bg_QWidget_childAt_const_QPoint_R(QWidget * _self_, const QPoint p) {
  return _self_->childAt(p);
}

extern "C" void bg_QWidget_setAttribute_Qt__WidgetAttribute_bool(QWidget * _self_, Qt::WidgetAttribute unnamed_arg_0, bool on) {
  _self_->setAttribute(unnamed_arg_0, on);
}

extern "C" bool bg_QWidget_testAttribute_Qt__WidgetAttribute(QWidget * _self_, Qt::WidgetAttribute unnamed_arg_0) {
  return _self_->testAttribute(unnamed_arg_0);
}

extern "C" QPaintEngine * bg_QWidget_paintEngine_(QWidget * _self_) {
  return _self_->paintEngine();
}

extern "C" void bg_QWidget_ensurePolished_(QWidget * _self_) {
  _self_->ensurePolished();
}

extern "C" bool bg_QWidget_isAncestorOf_const_QWidget_X(QWidget * _self_, const QWidget * child) {
  return _self_->isAncestorOf(child);
}

extern "C" bool bg_QWidget_autoFillBackground_(QWidget * _self_) {
  return _self_->autoFillBackground();
}

extern "C" void bg_QWidget_setAutoFillBackground_bool(QWidget * _self_, bool enabled) {
  _self_->setAutoFillBackground(enabled);
}

extern "C" QBackingStore * bg_QWidget_backingStore_(QWidget * _self_) {
  return _self_->backingStore();
}

extern "C" QWindow * bg_QWidget_windowHandle_(QWidget * _self_) {
  return _self_->windowHandle();
}

extern "C" QWidget * bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X(QWindow * window, QWidget * parent) {
  return QWidget::createWindowContainer(window, parent);
}

extern "C" QWidget * bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X_Qt__WindowFlags(QWindow * window, QWidget * parent, Qt::WindowFlags flags) {
  return QWidget::createWindowContainer(window, parent, flags);
}

extern "C" void bg_QWidget_windowTitleChanged_const_QString_R(QWidget * _self_, const CrystalString title) {
  _self_->windowTitleChanged(QString::fromUtf8(title.ptr, title.size));
}

extern "C" void bg_QWidget_windowIconChanged_const_QIcon_R(QWidget * _self_, const QIcon & icon) {
  _self_->windowIconChanged(icon);
}

extern "C" void bg_QWidget_windowIconTextChanged_const_QString_R(QWidget * _self_, const CrystalString iconText) {
  _self_->windowIconTextChanged(QString::fromUtf8(iconText.ptr, iconText.size));
}

extern "C" void bg_QWidget_customContextMenuRequested_const_QPoint_R(QWidget * _self_, const QPoint pos) {
  _self_->customContextMenuRequested(pos);
}

extern "C" bool bg_QWidget_event_QEvent_X(QWidget * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" void bg_QWidget_mousePressEvent_QMouseEvent_X(QWidget * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_mouseReleaseEvent_QMouseEvent_X(QWidget * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(QWidget * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseDoubleClickEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_mouseMoveEvent_QMouseEvent_X(QWidget * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_wheelEvent_QWheelEvent_X(QWidget * _self_, QWheelEvent * unnamed_arg_0) {
  _self_->wheelEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_keyPressEvent_QKeyEvent_X(QWidget * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_keyReleaseEvent_QKeyEvent_X(QWidget * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_focusInEvent_QFocusEvent_X(QWidget * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusInEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_focusOutEvent_QFocusEvent_X(QWidget * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusOutEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_enterEvent_QEvent_X(QWidget * _self_, QEvent * unnamed_arg_0) {
  _self_->enterEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_leaveEvent_QEvent_X(QWidget * _self_, QEvent * unnamed_arg_0) {
  _self_->leaveEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_paintEvent_QPaintEvent_X(QWidget * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_moveEvent_QMoveEvent_X(QWidget * _self_, QMoveEvent * unnamed_arg_0) {
  _self_->moveEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_resizeEvent_QResizeEvent_X(QWidget * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_closeEvent_QCloseEvent_X(QWidget * _self_, QCloseEvent * unnamed_arg_0) {
  _self_->closeEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_contextMenuEvent_QContextMenuEvent_X(QWidget * _self_, QContextMenuEvent * unnamed_arg_0) {
  _self_->contextMenuEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_tabletEvent_QTabletEvent_X(QWidget * _self_, QTabletEvent * unnamed_arg_0) {
  _self_->tabletEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_actionEvent_QActionEvent_X(QWidget * _self_, QActionEvent * unnamed_arg_0) {
  _self_->actionEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_dragEnterEvent_QDragEnterEvent_X(QWidget * _self_, QDragEnterEvent * unnamed_arg_0) {
  _self_->dragEnterEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_dragMoveEvent_QDragMoveEvent_X(QWidget * _self_, QDragMoveEvent * unnamed_arg_0) {
  _self_->dragMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(QWidget * _self_, QDragLeaveEvent * unnamed_arg_0) {
  _self_->dragLeaveEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_dropEvent_QDropEvent_X(QWidget * _self_, QDropEvent * unnamed_arg_0) {
  _self_->dropEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_showEvent_QShowEvent_X(QWidget * _self_, QShowEvent * unnamed_arg_0) {
  _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QWidget_hideEvent_QHideEvent_X(QWidget * _self_, QHideEvent * unnamed_arg_0) {
  _self_->hideEvent(unnamed_arg_0);
}

extern "C" bool bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(QWidget * _self_, const QByteArray & eventType, void * message, long * result) {
  return _self_->nativeEvent(eventType, message, result);
}

extern "C" void bg_QWidget_changeEvent_QEvent_X(QWidget * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" int bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(QWidget * _self_, QPaintDevice::PaintDeviceMetric unnamed_arg_0) {
  return _self_->metric(unnamed_arg_0);
}

extern "C" void bg_QWidget_initPainter_QPainter_X(QWidget * _self_, QPainter * painter) {
  _self_->initPainter(painter);
}

extern "C" QPainter * bg_QWidget_sharedPainter_(QWidget * _self_) {
  return _self_->sharedPainter();
}

extern "C" void bg_QWidget_inputMethodEvent_QInputMethodEvent_X(QWidget * _self_, QInputMethodEvent * unnamed_arg_0) {
  _self_->inputMethodEvent(unnamed_arg_0);
}

extern "C" CrystalVariant bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(QWidget * _self_, Qt::InputMethodQuery unnamed_arg_0) {
  return qvariant_to_crystal(_self_->inputMethodQuery(unnamed_arg_0));
}

extern "C" Qt::InputMethodHints bg_QWidget_inputMethodHints_(QWidget * _self_) {
  return _self_->inputMethodHints();
}

extern "C" void bg_QWidget_setInputMethodHints_Qt__InputMethodHints(QWidget * _self_, Qt::InputMethodHints hints) {
  _self_->setInputMethodHints(hints);
}

extern "C" void bg_QWidget_updateMicroFocus_(QWidget * _self_) {
  _self_->updateMicroFocus();
}

extern "C" void bg_QWidget_create_WId_bool_bool(QWidget * _self_, WId unnamed_arg_0, bool initializeWindow, bool destroyOldWindow) {
  _self_->create(unnamed_arg_0, initializeWindow, destroyOldWindow);
}

extern "C" void bg_QWidget_destroy_bool_bool(QWidget * _self_, bool destroyWindow, bool destroySubWindows) {
  _self_->destroy(destroyWindow, destroySubWindows);
}

extern "C" bool bg_QWidget_focusNextPrevChild_bool(QWidget * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" bool bg_QWidget_focusNextChild_(QWidget * _self_) {
  return _self_->focusNextChild();
}

extern "C" bool bg_QWidget_focusPreviousChild_(QWidget * _self_) {
  return _self_->focusPreviousChild();
}

extern "C" QWidget * bg_QWidget__CONSTRUCT_QWidgetPrivate_R_QWidget_X_Qt__WindowFlags(QWidgetPrivate & d, QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_Widget(d, parent, f);
}

extern "C" QPaintDevice * bg_QWidget_AS_PaintDevice_(QWidget * _self_) {
  return static_cast<QPaintDevice *>(_self_);
}

extern "C" QMetaObject::Connection * bg_QWidget_CONNECT_windowTitleChanged_CrystalProc_void_const_QString_R(QWidget * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWidget::*)(const QString &))&QWidget::windowTitleChanged, [_proc_](const QString & title){ _proc_(qstring_to_crystal(title)); }));
}

extern "C" QMetaObject::Connection * bg_QWidget_CONNECT_windowIconChanged_CrystalProc_void_const_QIcon_R(QWidget * _self_, CrystalProc<void, const QIcon *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWidget::*)(const QIcon &))&QWidget::windowIconChanged, [_proc_](const QIcon & icon){ _proc_(&(icon)); }));
}

extern "C" QMetaObject::Connection * bg_QWidget_CONNECT_windowIconTextChanged_CrystalProc_void_const_QString_R(QWidget * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWidget::*)(const QString &))&QWidget::windowIconTextChanged, [_proc_](const QString & iconText){ _proc_(qstring_to_crystal(iconText)); }));
}

extern "C" QMetaObject::Connection * bg_QWidget_CONNECT_customContextMenuRequested_CrystalProc_void_const_QPoint_R(QWidget * _self_, CrystalProc<void, const QPoint> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWidget::*)(const QPoint &))&QWidget::customContextMenuRequested, [_proc_](const QPoint & pos){ _proc_(pos); }));
}

extern "C" void bg_BgInherit_Widget_JUMPTABLE_BgJumptable_Widget_R(BgInherit_Widget * _self_, const BgJumptable_Widget & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_AbstractButton {
  CrystalProc<const QMetaObject *> bg_QAbstractButton_metaObject_;
  CrystalProc<void *, const char *> bg_QAbstractButton_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QPaintEvent *> bg_QAbstractButton_paintEvent_QPaintEvent_X;
  CrystalProc<bool, const QPoint> bg_QAbstractButton_hitButton_const_QPoint_R;
  CrystalProc<void> bg_QAbstractButton_checkStateSet_;
  CrystalProc<void> bg_QAbstractButton_nextCheckState_;
  CrystalProc<bool, QEvent *> bg_QAbstractButton_event_QEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractButton_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractButton_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractButton_changeEvent_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractButton_timerEvent_QTimerEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_AbstractButton : public QAbstractButton {
  using QAbstractButton::QAbstractButton;
  BgJumptable_AbstractButton bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_metaObject_.isValid()) {
      return _self_->bgJump.bg_QAbstractButton_metaObject_();
    } else {
      return QAbstractButton::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QAbstractButton_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAbstractButton::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QAbstractButton::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void paintEvent(QPaintEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QAbstractButton_paintEvent_QPaintEvent_X.isValid())) {
      _self_->bgJump.bg_QAbstractButton_paintEvent_QPaintEvent_X(e);
    } else {
      bindgen_fatal_panic("No implementation for pure method QAbstractButton::paintEvent");
    }
  }
  
  bool hitButton(const QPoint & pos) const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_hitButton_const_QPoint_R.isValid()) {
      return _self_->bgJump.bg_QAbstractButton_hitButton_const_QPoint_R(pos);
    } else {
      return QAbstractButton::hitButton(pos);
    }
  }
  
  void checkStateSet() override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_checkStateSet_.isValid()) {
      _self_->bgJump.bg_QAbstractButton_checkStateSet_();
    } else {
      QAbstractButton::checkStateSet();
    }
  }
  
  void nextCheckState() override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_nextCheckState_.isValid()) {
      _self_->bgJump.bg_QAbstractButton_nextCheckState_();
    } else {
      QAbstractButton::nextCheckState();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractButton_event_QEvent_X(e);
    } else {
      return QAbstractButton::event(e);
    }
  }
  
  void keyPressEvent(QKeyEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(e);
    } else {
      QAbstractButton::keyPressEvent(e);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      QAbstractButton::keyReleaseEvent(e);
    }
  }
  
  void mousePressEvent(QMouseEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(e);
    } else {
      QAbstractButton::mousePressEvent(e);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      QAbstractButton::mouseReleaseEvent(e);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(e);
    } else {
      QAbstractButton::mouseMoveEvent(e);
    }
  }
  
  void focusInEvent(QFocusEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_focusInEvent_QFocusEvent_X(e);
    } else {
      QAbstractButton::focusInEvent(e);
    }
  }
  
  void focusOutEvent(QFocusEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(e);
    } else {
      QAbstractButton::focusOutEvent(e);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_changeEvent_QEvent_X(e);
    } else {
      QAbstractButton::changeEvent(e);
    }
  }
  
  void timerEvent(QTimerEvent * e) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_timerEvent_QTimerEvent_X(e);
    } else {
      QAbstractButton::timerEvent(e);
    }
  }
  
  int devType() const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QAbstractButton::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QAbstractButton::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QAbstractButton::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QAbstractButton::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QAbstractButton::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QAbstractButton::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QAbstractButton::paintEngine();
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::wheelEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QAbstractButton::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QAbstractButton::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QAbstractButton::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QAbstractButton::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QAbstractButton::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QAbstractButton::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_AbstractButton *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QAbstractButton::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QAbstractButton_metaObject_(QAbstractButton * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QAbstractButton_qt_metacast_const_char_X(QAbstractButton * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX(QAbstractButton * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QAbstractButton_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractButton::tr(s));
}

extern "C" CrystalString bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractButton::tr(s, c));
}

extern "C" CrystalString bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractButton::tr(s, c, n));
}

extern "C" CrystalString bg_QAbstractButton_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractButton::trUtf8(s));
}

extern "C" CrystalString bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractButton::trUtf8(s, c));
}

extern "C" CrystalString bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractButton::trUtf8(s, c, n));
}

extern "C" QAbstractButton * bg_QAbstractButton__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_AbstractButton(parent);
}

extern "C" void bg_QAbstractButton_setText_const_QString_R(QAbstractButton * _self_, const CrystalString text) {
  _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QAbstractButton_text_(QAbstractButton * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" void bg_QAbstractButton_setIcon_const_QIcon_R(QAbstractButton * _self_, const QIcon & icon) {
  _self_->setIcon(icon);
}

extern "C" QIcon * bg_QAbstractButton_icon_(QAbstractButton * _self_) {
  return new (UseGC) QIcon (_self_->icon());
}

extern "C" QSize * bg_QAbstractButton_iconSize_(QAbstractButton * _self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" void bg_QAbstractButton_setShortcut_const_QKeySequence_R(QAbstractButton * _self_, const QKeySequence & key) {
  _self_->setShortcut(key);
}

extern "C" QKeySequence * bg_QAbstractButton_shortcut_(QAbstractButton * _self_) {
  return new (UseGC) QKeySequence (_self_->shortcut());
}

extern "C" void bg_QAbstractButton_setCheckable_bool(QAbstractButton * _self_, bool unnamed_arg_0) {
  _self_->setCheckable(unnamed_arg_0);
}

extern "C" bool bg_QAbstractButton_isCheckable_(QAbstractButton * _self_) {
  return _self_->isCheckable();
}

extern "C" bool bg_QAbstractButton_isChecked_(QAbstractButton * _self_) {
  return _self_->isChecked();
}

extern "C" void bg_QAbstractButton_setDown_bool(QAbstractButton * _self_, bool unnamed_arg_0) {
  _self_->setDown(unnamed_arg_0);
}

extern "C" bool bg_QAbstractButton_isDown_(QAbstractButton * _self_) {
  return _self_->isDown();
}

extern "C" void bg_QAbstractButton_setAutoRepeat_bool(QAbstractButton * _self_, bool unnamed_arg_0) {
  _self_->setAutoRepeat(unnamed_arg_0);
}

extern "C" bool bg_QAbstractButton_autoRepeat_(QAbstractButton * _self_) {
  return _self_->autoRepeat();
}

extern "C" void bg_QAbstractButton_setAutoRepeatDelay_int(QAbstractButton * _self_, int unnamed_arg_0) {
  _self_->setAutoRepeatDelay(unnamed_arg_0);
}

extern "C" int bg_QAbstractButton_autoRepeatDelay_(QAbstractButton * _self_) {
  return _self_->autoRepeatDelay();
}

extern "C" void bg_QAbstractButton_setAutoRepeatInterval_int(QAbstractButton * _self_, int unnamed_arg_0) {
  _self_->setAutoRepeatInterval(unnamed_arg_0);
}

extern "C" int bg_QAbstractButton_autoRepeatInterval_(QAbstractButton * _self_) {
  return _self_->autoRepeatInterval();
}

extern "C" void bg_QAbstractButton_setAutoExclusive_bool(QAbstractButton * _self_, bool unnamed_arg_0) {
  _self_->setAutoExclusive(unnamed_arg_0);
}

extern "C" bool bg_QAbstractButton_autoExclusive_(QAbstractButton * _self_) {
  return _self_->autoExclusive();
}

extern "C" QButtonGroup * bg_QAbstractButton_group_(QAbstractButton * _self_) {
  return _self_->group();
}

extern "C" void bg_QAbstractButton_setIconSize_const_QSize_R(QAbstractButton * _self_, const QSize & size) {
  _self_->setIconSize(size);
}

extern "C" void bg_QAbstractButton_animateClick_int(QAbstractButton * _self_, int msec) {
  _self_->animateClick(msec);
}

extern "C" void bg_QAbstractButton_click_(QAbstractButton * _self_) {
  _self_->click();
}

extern "C" void bg_QAbstractButton_toggle_(QAbstractButton * _self_) {
  _self_->toggle();
}

extern "C" void bg_QAbstractButton_setChecked_bool(QAbstractButton * _self_, bool unnamed_arg_0) {
  _self_->setChecked(unnamed_arg_0);
}

extern "C" void bg_QAbstractButton_pressed_(QAbstractButton * _self_) {
  _self_->pressed();
}

extern "C" void bg_QAbstractButton_released_(QAbstractButton * _self_) {
  _self_->released();
}

extern "C" void bg_QAbstractButton_clicked_bool(QAbstractButton * _self_, bool checked) {
  _self_->clicked(checked);
}

extern "C" void bg_QAbstractButton_toggled_bool(QAbstractButton * _self_, bool checked) {
  _self_->toggled(checked);
}

extern "C" void bg_QAbstractButton_paintEvent_QPaintEvent_X(QAbstractButton * _self_, QPaintEvent * e) {
  _self_->paintEvent(e);
}

extern "C" bool bg_QAbstractButton_hitButton_const_QPoint_R(QAbstractButton * _self_, const QPoint pos) {
  return _self_->hitButton(pos);
}

extern "C" void bg_QAbstractButton_checkStateSet_(QAbstractButton * _self_) {
  _self_->checkStateSet();
}

extern "C" void bg_QAbstractButton_nextCheckState_(QAbstractButton * _self_) {
  _self_->nextCheckState();
}

extern "C" bool bg_QAbstractButton_event_QEvent_X(QAbstractButton * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QAbstractButton_keyPressEvent_QKeyEvent_X(QAbstractButton * _self_, QKeyEvent * e) {
  _self_->keyPressEvent(e);
}

extern "C" void bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(QAbstractButton * _self_, QKeyEvent * e) {
  _self_->keyReleaseEvent(e);
}

extern "C" void bg_QAbstractButton_mousePressEvent_QMouseEvent_X(QAbstractButton * _self_, QMouseEvent * e) {
  _self_->mousePressEvent(e);
}

extern "C" void bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(QAbstractButton * _self_, QMouseEvent * e) {
  _self_->mouseReleaseEvent(e);
}

extern "C" void bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(QAbstractButton * _self_, QMouseEvent * e) {
  _self_->mouseMoveEvent(e);
}

extern "C" void bg_QAbstractButton_focusInEvent_QFocusEvent_X(QAbstractButton * _self_, QFocusEvent * e) {
  _self_->focusInEvent(e);
}

extern "C" void bg_QAbstractButton_focusOutEvent_QFocusEvent_X(QAbstractButton * _self_, QFocusEvent * e) {
  _self_->focusOutEvent(e);
}

extern "C" void bg_QAbstractButton_changeEvent_QEvent_X(QAbstractButton * _self_, QEvent * e) {
  _self_->changeEvent(e);
}

extern "C" void bg_QAbstractButton_timerEvent_QTimerEvent_X(QAbstractButton * _self_, QTimerEvent * e) {
  _self_->timerEvent(e);
}

extern "C" QAbstractButton * bg_QAbstractButton__CONSTRUCT_QAbstractButtonPrivate_R_QWidget_X(QAbstractButtonPrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_AbstractButton(dd, parent);
}

extern "C" QMetaObject::Connection * bg_QAbstractButton_CONNECT_pressed_CrystalProc_void(QAbstractButton * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractButton::*)())&QAbstractButton::pressed, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractButton_CONNECT_released_CrystalProc_void(QAbstractButton * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractButton::*)())&QAbstractButton::released, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractButton_CONNECT_clicked_CrystalProc_void_bool(QAbstractButton * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractButton::*)(bool))&QAbstractButton::clicked, [_proc_](bool checked){ _proc_(checked); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractButton_CONNECT_toggled_CrystalProc_void_bool(QAbstractButton * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractButton::*)(bool))&QAbstractButton::toggled, [_proc_](bool checked){ _proc_(checked); }));
}

extern "C" void bg_BgInherit_AbstractButton_JUMPTABLE_BgJumptable_AbstractButton_R(BgInherit_AbstractButton * _self_, const BgJumptable_AbstractButton & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_ToolButton {
  CrystalProc<const QMetaObject *> bg_QToolButton_metaObject_;
  CrystalProc<void *, const char *> bg_QToolButton_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QToolButton_sizeHint_;
  CrystalProc<QSize &> bg_QToolButton_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QToolButton_event_QEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QToolButton_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QToolButton_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QToolButton_paintEvent_QPaintEvent_X;
  CrystalProc<void, QActionEvent *> bg_QToolButton_actionEvent_QActionEvent_X;
  CrystalProc<void, QEvent *> bg_QToolButton_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QToolButton_leaveEvent_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QToolButton_timerEvent_QTimerEvent_X;
  CrystalProc<void, QEvent *> bg_QToolButton_changeEvent_QEvent_X;
  CrystalProc<bool, const QPoint> bg_QToolButton_hitButton_const_QPoint_R;
  CrystalProc<void> bg_QToolButton_nextCheckState_;
  CrystalProc<void> bg_QAbstractButton_checkStateSet_;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractButton_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractButton_focusOutEvent_QFocusEvent_X;
};
struct BgInherit_ToolButton : public QToolButton {
  using QToolButton::QToolButton;
  BgJumptable_ToolButton bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_metaObject_.isValid()) {
      return _self_->bgJump.bg_QToolButton_metaObject_();
    } else {
      return QToolButton::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QToolButton_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QToolButton::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QToolButton::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QToolButton_sizeHint_();
    } else {
      return QToolButton::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QToolButton_minimumSizeHint_();
    } else {
      return QToolButton::minimumSizeHint();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QToolButton_event_QEvent_X(e);
    } else {
      return QToolButton::event(e);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QToolButton_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QToolButton::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QToolButton_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QToolButton::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QToolButton_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QToolButton::paintEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QToolButton_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QToolButton::actionEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QToolButton_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QToolButton::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QToolButton_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QToolButton::leaveEvent(unnamed_arg_0);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QToolButton_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QToolButton::timerEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QToolButton_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QToolButton::changeEvent(unnamed_arg_0);
    }
  }
  
  bool hitButton(const QPoint & pos) const override {
    const BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_hitButton_const_QPoint_R.isValid()) {
      return _self_->bgJump.bg_QToolButton_hitButton_const_QPoint_R(pos);
    } else {
      return QToolButton::hitButton(pos);
    }
  }
  
  void nextCheckState() override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QToolButton_nextCheckState_.isValid()) {
      _self_->bgJump.bg_QToolButton_nextCheckState_();
    } else {
      QToolButton::nextCheckState();
    }
  }
  
  void checkStateSet() override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_checkStateSet_.isValid()) {
      _self_->bgJump.bg_QAbstractButton_checkStateSet_();
    } else {
      QToolButton::checkStateSet();
    }
  }
  
  void keyPressEvent(QKeyEvent * e) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(e);
    } else {
      QToolButton::keyPressEvent(e);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * e) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      QToolButton::keyReleaseEvent(e);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * e) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(e);
    } else {
      QToolButton::mouseMoveEvent(e);
    }
  }
  
  void focusInEvent(QFocusEvent * e) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_focusInEvent_QFocusEvent_X(e);
    } else {
      QToolButton::focusInEvent(e);
    }
  }
  
  void focusOutEvent(QFocusEvent * e) override {
    BgInherit_ToolButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(e);
    } else {
      QToolButton::focusOutEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QToolButton_metaObject_(QToolButton * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QToolButton_qt_metacast_const_char_X(QToolButton * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX(QToolButton * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QToolButton_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QToolButton::tr(s));
}

extern "C" CrystalString bg_QToolButton_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QToolButton::tr(s, c));
}

extern "C" CrystalString bg_QToolButton_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QToolButton::tr(s, c, n));
}

extern "C" CrystalString bg_QToolButton_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QToolButton::trUtf8(s));
}

extern "C" CrystalString bg_QToolButton_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QToolButton::trUtf8(s, c));
}

extern "C" CrystalString bg_QToolButton_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QToolButton::trUtf8(s, c, n));
}

extern "C" QToolButton * bg_QToolButton__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_ToolButton(parent);
}

extern "C" QSize * bg_QToolButton_sizeHint_(QToolButton * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QToolButton_minimumSizeHint_(QToolButton * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" Qt::ToolButtonStyle bg_QToolButton_toolButtonStyle_(QToolButton * _self_) {
  return _self_->toolButtonStyle();
}

extern "C" Qt::ArrowType bg_QToolButton_arrowType_(QToolButton * _self_) {
  return _self_->arrowType();
}

extern "C" void bg_QToolButton_setArrowType_Qt__ArrowType(QToolButton * _self_, Qt::ArrowType type) {
  _self_->setArrowType(type);
}

extern "C" void bg_QToolButton_setMenu_QMenu_X(QToolButton * _self_, QMenu * menu) {
  _self_->setMenu(menu);
}

extern "C" QMenu * bg_QToolButton_menu_(QToolButton * _self_) {
  return _self_->menu();
}

extern "C" void bg_QToolButton_setPopupMode_QToolButton__ToolButtonPopupMode(QToolButton * _self_, QToolButton::ToolButtonPopupMode mode) {
  _self_->setPopupMode(mode);
}

extern "C" QToolButton::ToolButtonPopupMode bg_QToolButton_popupMode_(QToolButton * _self_) {
  return _self_->popupMode();
}

extern "C" QAction * bg_QToolButton_defaultAction_(QToolButton * _self_) {
  return _self_->defaultAction();
}

extern "C" void bg_QToolButton_setAutoRaise_bool(QToolButton * _self_, bool enable) {
  _self_->setAutoRaise(enable);
}

extern "C" bool bg_QToolButton_autoRaise_(QToolButton * _self_) {
  return _self_->autoRaise();
}

extern "C" void bg_QToolButton_showMenu_(QToolButton * _self_) {
  _self_->showMenu();
}

extern "C" void bg_QToolButton_setToolButtonStyle_Qt__ToolButtonStyle(QToolButton * _self_, Qt::ToolButtonStyle style) {
  _self_->setToolButtonStyle(style);
}

extern "C" void bg_QToolButton_setDefaultAction_QAction_X(QToolButton * _self_, QAction * unnamed_arg_0) {
  _self_->setDefaultAction(unnamed_arg_0);
}

extern "C" void bg_QToolButton_triggered_QAction_X(QToolButton * _self_, QAction * unnamed_arg_0) {
  _self_->triggered(unnamed_arg_0);
}

extern "C" bool bg_QToolButton_event_QEvent_X(QToolButton * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QToolButton_mousePressEvent_QMouseEvent_X(QToolButton * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QToolButton_mouseReleaseEvent_QMouseEvent_X(QToolButton * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QToolButton_paintEvent_QPaintEvent_X(QToolButton * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QToolButton_actionEvent_QActionEvent_X(QToolButton * _self_, QActionEvent * unnamed_arg_0) {
  _self_->actionEvent(unnamed_arg_0);
}

extern "C" void bg_QToolButton_enterEvent_QEvent_X(QToolButton * _self_, QEvent * unnamed_arg_0) {
  _self_->enterEvent(unnamed_arg_0);
}

extern "C" void bg_QToolButton_leaveEvent_QEvent_X(QToolButton * _self_, QEvent * unnamed_arg_0) {
  _self_->leaveEvent(unnamed_arg_0);
}

extern "C" void bg_QToolButton_timerEvent_QTimerEvent_X(QToolButton * _self_, QTimerEvent * unnamed_arg_0) {
  _self_->timerEvent(unnamed_arg_0);
}

extern "C" void bg_QToolButton_changeEvent_QEvent_X(QToolButton * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" bool bg_QToolButton_hitButton_const_QPoint_R(QToolButton * _self_, const QPoint pos) {
  return _self_->hitButton(pos);
}

extern "C" void bg_QToolButton_nextCheckState_(QToolButton * _self_) {
  _self_->nextCheckState();
}

extern "C" void bg_QToolButton_initStyleOption_QStyleOptionToolButton_X(QToolButton * _self_, QStyleOptionToolButton * option) {
  _self_->initStyleOption(option);
}

extern "C" QMetaObject::Connection * bg_QToolButton_CONNECT_triggered_CrystalProc_void_QAction_X(QToolButton * _self_, CrystalProc<void, QAction *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolButton::*)(QAction *))&QToolButton::triggered, [_proc_](QAction * unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" void bg_BgInherit_ToolButton_JUMPTABLE_BgJumptable_ToolButton_R(BgInherit_ToolButton * _self_, const BgJumptable_ToolButton & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_ToolBar {
  CrystalProc<const QMetaObject *> bg_QToolBar_metaObject_;
  CrystalProc<void *, const char *> bg_QToolBar_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QActionEvent *> bg_QToolBar_actionEvent_QActionEvent_X;
  CrystalProc<void, QEvent *> bg_QToolBar_changeEvent_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QToolBar_paintEvent_QPaintEvent_X;
  CrystalProc<bool, QEvent *> bg_QToolBar_event_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_ToolBar : public QToolBar {
  using QToolBar::QToolBar;
  BgJumptable_ToolBar bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QToolBar_metaObject_.isValid()) {
      return _self_->bgJump.bg_QToolBar_metaObject_();
    } else {
      return QToolBar::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QToolBar_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QToolBar_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QToolBar::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QToolBar::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void actionEvent(QActionEvent * event) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QToolBar_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QToolBar_actionEvent_QActionEvent_X(event);
    } else {
      QToolBar::actionEvent(event);
    }
  }
  
  void changeEvent(QEvent * event) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QToolBar_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QToolBar_changeEvent_QEvent_X(event);
    } else {
      QToolBar::changeEvent(event);
    }
  }
  
  void paintEvent(QPaintEvent * event) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QToolBar_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QToolBar_paintEvent_QPaintEvent_X(event);
    } else {
      QToolBar::paintEvent(event);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QToolBar_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QToolBar_event_QEvent_X(event);
    } else {
      return QToolBar::event(event);
    }
  }
  
  int devType() const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QToolBar::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QToolBar::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QToolBar::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QToolBar::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QToolBar::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QToolBar::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QToolBar::paintEngine();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QToolBar::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QToolBar::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QToolBar::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QToolBar::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QToolBar::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QToolBar::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QToolBar::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QToolBar::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QToolBar::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QToolBar::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QToolBar::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QToolBar::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QToolBar::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QToolBar::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QToolBar::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QToolBar::tabletEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QToolBar::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QToolBar::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QToolBar::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QToolBar::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QToolBar::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QToolBar::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QToolBar::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QToolBar::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QToolBar::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QToolBar::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QToolBar::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QToolBar::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_ToolBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QToolBar::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QToolBar_metaObject_(QToolBar * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QToolBar_qt_metacast_const_char_X(QToolBar * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX(QToolBar * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QToolBar_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QToolBar::tr(s));
}

extern "C" CrystalString bg_QToolBar_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QToolBar::tr(s, c));
}

extern "C" CrystalString bg_QToolBar_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QToolBar::tr(s, c, n));
}

extern "C" CrystalString bg_QToolBar_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QToolBar::trUtf8(s));
}

extern "C" CrystalString bg_QToolBar_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QToolBar::trUtf8(s, c));
}

extern "C" CrystalString bg_QToolBar_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QToolBar::trUtf8(s, c, n));
}

extern "C" QToolBar * bg_QToolBar__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString title, QWidget * parent) {
  return new (UseGC) BgInherit_ToolBar(QString::fromUtf8(title.ptr, title.size), parent);
}

extern "C" QToolBar * bg_QToolBar__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_ToolBar(parent);
}

extern "C" void bg_QToolBar_setMovable_bool(QToolBar * _self_, bool movable) {
  _self_->setMovable(movable);
}

extern "C" bool bg_QToolBar_isMovable_(QToolBar * _self_) {
  return _self_->isMovable();
}

extern "C" void bg_QToolBar_setAllowedAreas_Qt__ToolBarAreas(QToolBar * _self_, Qt::ToolBarAreas areas) {
  _self_->setAllowedAreas(areas);
}

extern "C" Qt::ToolBarAreas bg_QToolBar_allowedAreas_(QToolBar * _self_) {
  return _self_->allowedAreas();
}

extern "C" bool bg_QToolBar_isAreaAllowed_Qt__ToolBarArea(QToolBar * _self_, Qt::ToolBarArea area) {
  return _self_->isAreaAllowed(area);
}

extern "C" void bg_QToolBar_setOrientation_Qt__Orientation(QToolBar * _self_, Qt::Orientation orientation) {
  _self_->setOrientation(orientation);
}

extern "C" Qt::Orientation bg_QToolBar_orientation_(QToolBar * _self_) {
  return _self_->orientation();
}

extern "C" void bg_QToolBar_clear_(QToolBar * _self_) {
  _self_->clear();
}

extern "C" QAction * bg_QToolBar_addAction_const_QString_R(QToolBar * _self_, const CrystalString text) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction * bg_QToolBar_addAction_const_QIcon_R_const_QString_R(QToolBar * _self_, const QIcon & icon, const CrystalString text) {
  return _self_->addAction(icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction * bg_QToolBar_addAction_const_QString_R_const_QObject_X_const_char_X(QToolBar * _self_, const CrystalString text, const QObject * receiver, const char * member) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size), receiver, member);
}

extern "C" QAction * bg_QToolBar_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(QToolBar * _self_, const QIcon & icon, const CrystalString text, const QObject * receiver, const char * member) {
  return _self_->addAction(icon, QString::fromUtf8(text.ptr, text.size), receiver, member);
}

extern "C" QAction * bg_QToolBar_addSeparator_(QToolBar * _self_) {
  return _self_->addSeparator();
}

extern "C" QAction * bg_QToolBar_insertSeparator_QAction_X(QToolBar * _self_, QAction * before) {
  return _self_->insertSeparator(before);
}

extern "C" QAction * bg_QToolBar_addWidget_QWidget_X(QToolBar * _self_, QWidget * widget) {
  return _self_->addWidget(widget);
}

extern "C" QAction * bg_QToolBar_insertWidget_QAction_X_QWidget_X(QToolBar * _self_, QAction * before, QWidget * widget) {
  return _self_->insertWidget(before, widget);
}

extern "C" QRect * bg_QToolBar_actionGeometry_QAction_X(QToolBar * _self_, QAction * action) {
  return new (UseGC) QRect (_self_->actionGeometry(action));
}

extern "C" QAction * bg_QToolBar_actionAt_const_QPoint_R(QToolBar * _self_, const QPoint p) {
  return _self_->actionAt(p);
}

extern "C" QAction * bg_QToolBar_actionAt_int_int(QToolBar * _self_, int x, int y) {
  return _self_->actionAt(x, y);
}

extern "C" QAction * bg_QToolBar_toggleViewAction_(QToolBar * _self_) {
  return _self_->toggleViewAction();
}

extern "C" QSize * bg_QToolBar_iconSize_(QToolBar * _self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" Qt::ToolButtonStyle bg_QToolBar_toolButtonStyle_(QToolBar * _self_) {
  return _self_->toolButtonStyle();
}

extern "C" QWidget * bg_QToolBar_widgetForAction_QAction_X(QToolBar * _self_, QAction * action) {
  return _self_->widgetForAction(action);
}

extern "C" bool bg_QToolBar_isFloatable_(QToolBar * _self_) {
  return _self_->isFloatable();
}

extern "C" void bg_QToolBar_setFloatable_bool(QToolBar * _self_, bool floatable) {
  _self_->setFloatable(floatable);
}

extern "C" bool bg_QToolBar_isFloating_(QToolBar * _self_) {
  return _self_->isFloating();
}

extern "C" void bg_QToolBar_setIconSize_const_QSize_R(QToolBar * _self_, const QSize & iconSize) {
  _self_->setIconSize(iconSize);
}

extern "C" void bg_QToolBar_setToolButtonStyle_Qt__ToolButtonStyle(QToolBar * _self_, Qt::ToolButtonStyle toolButtonStyle) {
  _self_->setToolButtonStyle(toolButtonStyle);
}

extern "C" void bg_QToolBar_actionTriggered_QAction_X(QToolBar * _self_, QAction * action) {
  _self_->actionTriggered(action);
}

extern "C" void bg_QToolBar_movableChanged_bool(QToolBar * _self_, bool movable) {
  _self_->movableChanged(movable);
}

extern "C" void bg_QToolBar_allowedAreasChanged_Qt__ToolBarAreas(QToolBar * _self_, Qt::ToolBarAreas allowedAreas) {
  _self_->allowedAreasChanged(allowedAreas);
}

extern "C" void bg_QToolBar_orientationChanged_Qt__Orientation(QToolBar * _self_, Qt::Orientation orientation) {
  _self_->orientationChanged(orientation);
}

extern "C" void bg_QToolBar_iconSizeChanged_const_QSize_R(QToolBar * _self_, const QSize & iconSize) {
  _self_->iconSizeChanged(iconSize);
}

extern "C" void bg_QToolBar_toolButtonStyleChanged_Qt__ToolButtonStyle(QToolBar * _self_, Qt::ToolButtonStyle toolButtonStyle) {
  _self_->toolButtonStyleChanged(toolButtonStyle);
}

extern "C" void bg_QToolBar_topLevelChanged_bool(QToolBar * _self_, bool topLevel) {
  _self_->topLevelChanged(topLevel);
}

extern "C" void bg_QToolBar_visibilityChanged_bool(QToolBar * _self_, bool visible) {
  _self_->visibilityChanged(visible);
}

extern "C" void bg_QToolBar_actionEvent_QActionEvent_X(QToolBar * _self_, QActionEvent * event) {
  _self_->actionEvent(event);
}

extern "C" void bg_QToolBar_changeEvent_QEvent_X(QToolBar * _self_, QEvent * event) {
  _self_->changeEvent(event);
}

extern "C" void bg_QToolBar_paintEvent_QPaintEvent_X(QToolBar * _self_, QPaintEvent * event) {
  _self_->paintEvent(event);
}

extern "C" bool bg_QToolBar_event_QEvent_X(QToolBar * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" void bg_QToolBar_initStyleOption_QStyleOptionToolBar_X(QToolBar * _self_, QStyleOptionToolBar * option) {
  _self_->initStyleOption(option);
}

extern "C" QMetaObject::Connection * bg_QToolBar_CONNECT_actionTriggered_CrystalProc_void_QAction_X(QToolBar * _self_, CrystalProc<void, QAction *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolBar::*)(QAction *))&QToolBar::actionTriggered, [_proc_](QAction * action){ _proc_(action); }));
}

extern "C" QMetaObject::Connection * bg_QToolBar_CONNECT_movableChanged_CrystalProc_void_bool(QToolBar * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolBar::*)(bool))&QToolBar::movableChanged, [_proc_](bool movable){ _proc_(movable); }));
}

extern "C" QMetaObject::Connection * bg_QToolBar_CONNECT_allowedAreasChanged_CrystalProc_void_Qt__ToolBarAreas(QToolBar * _self_, CrystalProc<void, Qt::ToolBarAreas> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolBar::*)(Qt::ToolBarAreas))&QToolBar::allowedAreasChanged, [_proc_](Qt::ToolBarAreas allowedAreas){ _proc_(allowedAreas); }));
}

extern "C" QMetaObject::Connection * bg_QToolBar_CONNECT_orientationChanged_CrystalProc_void_Qt__Orientation(QToolBar * _self_, CrystalProc<void, Qt::Orientation> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolBar::*)(Qt::Orientation))&QToolBar::orientationChanged, [_proc_](Qt::Orientation orientation){ _proc_(orientation); }));
}

extern "C" QMetaObject::Connection * bg_QToolBar_CONNECT_iconSizeChanged_CrystalProc_void_const_QSize_R(QToolBar * _self_, CrystalProc<void, const QSize *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolBar::*)(const QSize &))&QToolBar::iconSizeChanged, [_proc_](const QSize & iconSize){ _proc_(&(iconSize)); }));
}

extern "C" QMetaObject::Connection * bg_QToolBar_CONNECT_toolButtonStyleChanged_CrystalProc_void_Qt__ToolButtonStyle(QToolBar * _self_, CrystalProc<void, Qt::ToolButtonStyle> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolBar::*)(Qt::ToolButtonStyle))&QToolBar::toolButtonStyleChanged, [_proc_](Qt::ToolButtonStyle toolButtonStyle){ _proc_(toolButtonStyle); }));
}

extern "C" QMetaObject::Connection * bg_QToolBar_CONNECT_topLevelChanged_CrystalProc_void_bool(QToolBar * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolBar::*)(bool))&QToolBar::topLevelChanged, [_proc_](bool topLevel){ _proc_(topLevel); }));
}

extern "C" QMetaObject::Connection * bg_QToolBar_CONNECT_visibilityChanged_CrystalProc_void_bool(QToolBar * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QToolBar::*)(bool))&QToolBar::visibilityChanged, [_proc_](bool visible){ _proc_(visible); }));
}

extern "C" void bg_BgInherit_ToolBar_JUMPTABLE_BgJumptable_ToolBar_R(BgInherit_ToolBar * _self_, const BgJumptable_ToolBar & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Frame {
  CrystalProc<const QMetaObject *> bg_QFrame_metaObject_;
  CrystalProc<void *, const char *> bg_QFrame_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QFrame_sizeHint_;
  CrystalProc<bool, QEvent *> bg_QFrame_event_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QFrame_paintEvent_QPaintEvent_X;
  CrystalProc<void, QEvent *> bg_QFrame_changeEvent_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_Frame : public QFrame {
  using QFrame::QFrame;
  BgJumptable_Frame bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QFrame_metaObject_.isValid()) {
      return _self_->bgJump.bg_QFrame_metaObject_();
    } else {
      return QFrame::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QFrame_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QFrame_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QFrame::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QFrame::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QFrame_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QFrame_sizeHint_();
    } else {
      return QFrame::sizeHint();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QFrame_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QFrame_event_QEvent_X(e);
    } else {
      return QFrame::event(e);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QFrame_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QFrame_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QFrame::paintEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QFrame_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QFrame_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QFrame::changeEvent(unnamed_arg_0);
    }
  }
  
  int devType() const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QFrame::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QFrame::setVisible(visible);
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QFrame::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QFrame::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QFrame::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QFrame::paintEngine();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QFrame::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QFrame::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QFrame::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QFrame::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QFrame::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QFrame::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QFrame::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QFrame::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QFrame::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QFrame::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QFrame::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QFrame::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QFrame::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QFrame::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QFrame::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QFrame::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QFrame::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QFrame::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QFrame::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QFrame::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QFrame::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QFrame::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QFrame::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QFrame::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QFrame::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QFrame::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QFrame::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QFrame::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QFrame::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_Frame *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QFrame::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QFrame_metaObject_(QFrame * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QFrame_qt_metacast_const_char_X(QFrame * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX(QFrame * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QFrame_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QFrame::tr(s));
}

extern "C" CrystalString bg_QFrame_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QFrame::tr(s, c));
}

extern "C" CrystalString bg_QFrame_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QFrame::tr(s, c, n));
}

extern "C" CrystalString bg_QFrame_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QFrame::trUtf8(s));
}

extern "C" CrystalString bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QFrame::trUtf8(s, c));
}

extern "C" CrystalString bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QFrame::trUtf8(s, c, n));
}

extern "C" QFrame * bg_QFrame__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_Frame(parent);
}

extern "C" QFrame * bg_QFrame__CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_Frame(parent, f);
}

extern "C" int bg_QFrame_frameStyle_(QFrame * _self_) {
  return _self_->frameStyle();
}

extern "C" void bg_QFrame_setFrameStyle_int(QFrame * _self_, int unnamed_arg_0) {
  _self_->setFrameStyle(unnamed_arg_0);
}

extern "C" int bg_QFrame_frameWidth_(QFrame * _self_) {
  return _self_->frameWidth();
}

extern "C" QSize * bg_QFrame_sizeHint_(QFrame * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QFrame::Shape bg_QFrame_frameShape_(QFrame * _self_) {
  return _self_->frameShape();
}

extern "C" void bg_QFrame_setFrameShape_QFrame__Shape(QFrame * _self_, QFrame::Shape unnamed_arg_0) {
  _self_->setFrameShape(unnamed_arg_0);
}

extern "C" QFrame::Shadow bg_QFrame_frameShadow_(QFrame * _self_) {
  return _self_->frameShadow();
}

extern "C" void bg_QFrame_setFrameShadow_QFrame__Shadow(QFrame * _self_, QFrame::Shadow unnamed_arg_0) {
  _self_->setFrameShadow(unnamed_arg_0);
}

extern "C" int bg_QFrame_lineWidth_(QFrame * _self_) {
  return _self_->lineWidth();
}

extern "C" void bg_QFrame_setLineWidth_int(QFrame * _self_, int unnamed_arg_0) {
  _self_->setLineWidth(unnamed_arg_0);
}

extern "C" int bg_QFrame_midLineWidth_(QFrame * _self_) {
  return _self_->midLineWidth();
}

extern "C" void bg_QFrame_setMidLineWidth_int(QFrame * _self_, int unnamed_arg_0) {
  _self_->setMidLineWidth(unnamed_arg_0);
}

extern "C" QRect * bg_QFrame_frameRect_(QFrame * _self_) {
  return new (UseGC) QRect (_self_->frameRect());
}

extern "C" void bg_QFrame_setFrameRect_const_QRect_R(QFrame * _self_, const QRect & unnamed_arg_0) {
  _self_->setFrameRect(unnamed_arg_0);
}

extern "C" bool bg_QFrame_event_QEvent_X(QFrame * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QFrame_paintEvent_QPaintEvent_X(QFrame * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QFrame_changeEvent_QEvent_X(QFrame * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QFrame_drawFrame_QPainter_X(QFrame * _self_, QPainter * unnamed_arg_0) {
  _self_->drawFrame(unnamed_arg_0);
}

extern "C" QFrame * bg_QFrame__CONSTRUCT_QFramePrivate_R_QWidget_X(QFramePrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_Frame(dd, parent);
}

extern "C" QFrame * bg_QFrame__CONSTRUCT_QFramePrivate_R_QWidget_X_Qt__WindowFlags(QFramePrivate & dd, QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_Frame(dd, parent, f);
}

extern "C" void bg_QFrame_initStyleOption_QStyleOptionFrame_X(QFrame * _self_, QStyleOptionFrame * option) {
  _self_->initStyleOption(option);
}

extern "C" void bg_BgInherit_Frame_JUMPTABLE_BgJumptable_Frame_R(BgInherit_Frame * _self_, const BgJumptable_Frame & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_ComboBox {
  CrystalProc<const QMetaObject *> bg_QComboBox_metaObject_;
  CrystalProc<void *, const char *> bg_QComboBox_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QComboBox_sizeHint_;
  CrystalProc<QSize &> bg_QComboBox_minimumSizeHint_;
  CrystalProc<void> bg_QComboBox_showPopup_;
  CrystalProc<void> bg_QComboBox_hidePopup_;
  CrystalProc<bool, QEvent *> bg_QComboBox_event_QEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<void, QFocusEvent *> bg_QComboBox_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QComboBox_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QComboBox_changeEvent_QEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QComboBox_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QComboBox_paintEvent_QPaintEvent_X;
  CrystalProc<void, QShowEvent *> bg_QComboBox_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QComboBox_hideEvent_QHideEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QComboBox_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QComboBox_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QComboBox_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QComboBox_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QComboBox_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QComboBox_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QComboBox_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_ComboBox : public QComboBox {
  using QComboBox::QComboBox;
  BgJumptable_ComboBox bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_metaObject_.isValid()) {
      return _self_->bgJump.bg_QComboBox_metaObject_();
    } else {
      return QComboBox::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QComboBox_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QComboBox::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QComboBox::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QComboBox_sizeHint_();
    } else {
      return QComboBox::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QComboBox_minimumSizeHint_();
    } else {
      return QComboBox::minimumSizeHint();
    }
  }
  
  void showPopup() override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_showPopup_.isValid()) {
      _self_->bgJump.bg_QComboBox_showPopup_();
    } else {
      QComboBox::showPopup();
    }
  }
  
  void hidePopup() override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_hidePopup_.isValid()) {
      _self_->bgJump.bg_QComboBox_hidePopup_();
    } else {
      QComboBox::hidePopup();
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QComboBox_event_QEvent_X(event);
    } else {
      return QComboBox::event(event);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QComboBox::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_focusInEvent_QFocusEvent_X(e);
    } else {
      QComboBox::focusInEvent(e);
    }
  }
  
  void focusOutEvent(QFocusEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_focusOutEvent_QFocusEvent_X(e);
    } else {
      QComboBox::focusOutEvent(e);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_changeEvent_QEvent_X(e);
    } else {
      QComboBox::changeEvent(e);
    }
  }
  
  void resizeEvent(QResizeEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_resizeEvent_QResizeEvent_X(e);
    } else {
      QComboBox::resizeEvent(e);
    }
  }
  
  void paintEvent(QPaintEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_paintEvent_QPaintEvent_X(e);
    } else {
      QComboBox::paintEvent(e);
    }
  }
  
  void showEvent(QShowEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_showEvent_QShowEvent_X(e);
    } else {
      QComboBox::showEvent(e);
    }
  }
  
  void hideEvent(QHideEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_hideEvent_QHideEvent_X(e);
    } else {
      QComboBox::hideEvent(e);
    }
  }
  
  void mousePressEvent(QMouseEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_mousePressEvent_QMouseEvent_X(e);
    } else {
      QComboBox::mousePressEvent(e);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      QComboBox::mouseReleaseEvent(e);
    }
  }
  
  void keyPressEvent(QKeyEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_keyPressEvent_QKeyEvent_X(e);
    } else {
      QComboBox::keyPressEvent(e);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      QComboBox::keyReleaseEvent(e);
    }
  }
  
  void wheelEvent(QWheelEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_wheelEvent_QWheelEvent_X(e);
    } else {
      QComboBox::wheelEvent(e);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * e) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_contextMenuEvent_QContextMenuEvent_X(e);
    } else {
      QComboBox::contextMenuEvent(e);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QComboBox_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QComboBox_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QComboBox::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  int devType() const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QComboBox::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QComboBox::setVisible(visible);
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QComboBox::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QComboBox::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QComboBox::paintEngine();
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QComboBox::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QComboBox::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QComboBox::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QComboBox::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QComboBox::moveEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QComboBox::closeEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QComboBox::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QComboBox::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QComboBox::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QComboBox::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QComboBox::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QComboBox::dropEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QComboBox::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QComboBox::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QComboBox::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QComboBox::sharedPainter();
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_ComboBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QComboBox::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QComboBox_metaObject_(QComboBox * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QComboBox_qt_metacast_const_char_X(QComboBox * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX(QComboBox * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QComboBox_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QComboBox::tr(s));
}

extern "C" CrystalString bg_QComboBox_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QComboBox::tr(s, c));
}

extern "C" CrystalString bg_QComboBox_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QComboBox::tr(s, c, n));
}

extern "C" CrystalString bg_QComboBox_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QComboBox::trUtf8(s));
}

extern "C" CrystalString bg_QComboBox_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QComboBox::trUtf8(s, c));
}

extern "C" CrystalString bg_QComboBox_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QComboBox::trUtf8(s, c, n));
}

extern "C" QComboBox * bg_QComboBox__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_ComboBox(parent);
}

extern "C" int bg_QComboBox_maxVisibleItems_(QComboBox * _self_) {
  return _self_->maxVisibleItems();
}

extern "C" void bg_QComboBox_setMaxVisibleItems_int(QComboBox * _self_, int maxItems) {
  _self_->setMaxVisibleItems(maxItems);
}

extern "C" int bg_QComboBox_count_(QComboBox * _self_) {
  return _self_->count();
}

extern "C" void bg_QComboBox_setMaxCount_int(QComboBox * _self_, int max) {
  _self_->setMaxCount(max);
}

extern "C" int bg_QComboBox_maxCount_(QComboBox * _self_) {
  return _self_->maxCount();
}

extern "C" bool bg_QComboBox_autoCompletion_(QComboBox * _self_) {
  return _self_->autoCompletion();
}

extern "C" void bg_QComboBox_setAutoCompletion_bool(QComboBox * _self_, bool enable) {
  _self_->setAutoCompletion(enable);
}

extern "C" Qt::CaseSensitivity bg_QComboBox_autoCompletionCaseSensitivity_(QComboBox * _self_) {
  return _self_->autoCompletionCaseSensitivity();
}

extern "C" void bg_QComboBox_setAutoCompletionCaseSensitivity_Qt__CaseSensitivity(QComboBox * _self_, Qt::CaseSensitivity sensitivity) {
  _self_->setAutoCompletionCaseSensitivity(sensitivity);
}

extern "C" bool bg_QComboBox_duplicatesEnabled_(QComboBox * _self_) {
  return _self_->duplicatesEnabled();
}

extern "C" void bg_QComboBox_setDuplicatesEnabled_bool(QComboBox * _self_, bool enable) {
  _self_->setDuplicatesEnabled(enable);
}

extern "C" void bg_QComboBox_setFrame_bool(QComboBox * _self_, bool unnamed_arg_0) {
  _self_->setFrame(unnamed_arg_0);
}

extern "C" bool bg_QComboBox_hasFrame_(QComboBox * _self_) {
  return _self_->hasFrame();
}

extern "C" int bg_QComboBox_findText_const_QString_R(QComboBox * _self_, const CrystalString text) {
  return _self_->findText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" int bg_QComboBox_findText_const_QString_R_Qt__MatchFlags(QComboBox * _self_, const CrystalString text, Qt::MatchFlags flags) {
  return _self_->findText(QString::fromUtf8(text.ptr, text.size), flags);
}

extern "C" int bg_QComboBox_findData_const_QVariant_R_int(QComboBox * _self_, const CrystalVariant data, int role) {
  return _self_->findData(crystal_to_qvariant(data), role);
}

extern "C" int bg_QComboBox_findData_const_QVariant_R_int_Qt__MatchFlags(QComboBox * _self_, const CrystalVariant data, int role, Qt::MatchFlags flags) {
  return _self_->findData(crystal_to_qvariant(data), role, flags);
}

extern "C" QComboBox::InsertPolicy bg_QComboBox_insertPolicy_(QComboBox * _self_) {
  return _self_->insertPolicy();
}

extern "C" void bg_QComboBox_setInsertPolicy_QComboBox__InsertPolicy(QComboBox * _self_, QComboBox::InsertPolicy policy) {
  _self_->setInsertPolicy(policy);
}

extern "C" QComboBox::SizeAdjustPolicy bg_QComboBox_sizeAdjustPolicy_(QComboBox * _self_) {
  return _self_->sizeAdjustPolicy();
}

extern "C" void bg_QComboBox_setSizeAdjustPolicy_QComboBox__SizeAdjustPolicy(QComboBox * _self_, QComboBox::SizeAdjustPolicy policy) {
  _self_->setSizeAdjustPolicy(policy);
}

extern "C" int bg_QComboBox_minimumContentsLength_(QComboBox * _self_) {
  return _self_->minimumContentsLength();
}

extern "C" void bg_QComboBox_setMinimumContentsLength_int(QComboBox * _self_, int characters) {
  _self_->setMinimumContentsLength(characters);
}

extern "C" QSize * bg_QComboBox_iconSize_(QComboBox * _self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" void bg_QComboBox_setIconSize_const_QSize_R(QComboBox * _self_, const QSize & size) {
  _self_->setIconSize(size);
}

extern "C" bool bg_QComboBox_isEditable_(QComboBox * _self_) {
  return _self_->isEditable();
}

extern "C" void bg_QComboBox_setEditable_bool(QComboBox * _self_, bool editable) {
  _self_->setEditable(editable);
}

extern "C" void bg_QComboBox_setLineEdit_QLineEdit_X(QComboBox * _self_, QLineEdit * edit) {
  _self_->setLineEdit(edit);
}

extern "C" QLineEdit * bg_QComboBox_lineEdit_(QComboBox * _self_) {
  return _self_->lineEdit();
}

extern "C" void bg_QComboBox_setValidator_const_QValidator_X(QComboBox * _self_, const QValidator * v) {
  _self_->setValidator(v);
}

extern "C" const QValidator * bg_QComboBox_validator_(QComboBox * _self_) {
  return _self_->validator();
}

extern "C" void bg_QComboBox_setCompleter_QCompleter_X(QComboBox * _self_, QCompleter * c) {
  _self_->setCompleter(c);
}

extern "C" QCompleter * bg_QComboBox_completer_(QComboBox * _self_) {
  return _self_->completer();
}

extern "C" QAbstractItemDelegate * bg_QComboBox_itemDelegate_(QComboBox * _self_) {
  return _self_->itemDelegate();
}

extern "C" void bg_QComboBox_setItemDelegate_QAbstractItemDelegate_X(QComboBox * _self_, QAbstractItemDelegate * delegate) {
  _self_->setItemDelegate(delegate);
}

extern "C" QAbstractItemModel * bg_QComboBox_model_(QComboBox * _self_) {
  return _self_->model();
}

extern "C" void bg_QComboBox_setModel_QAbstractItemModel_X(QComboBox * _self_, QAbstractItemModel * model) {
  _self_->setModel(model);
}

extern "C" QModelIndex * bg_QComboBox_rootModelIndex_(QComboBox * _self_) {
  return new (UseGC) QModelIndex (_self_->rootModelIndex());
}

extern "C" void bg_QComboBox_setRootModelIndex_const_QModelIndex_R(QComboBox * _self_, const QModelIndex & index) {
  _self_->setRootModelIndex(index);
}

extern "C" int bg_QComboBox_modelColumn_(QComboBox * _self_) {
  return _self_->modelColumn();
}

extern "C" void bg_QComboBox_setModelColumn_int(QComboBox * _self_, int visibleColumn) {
  _self_->setModelColumn(visibleColumn);
}

extern "C" int bg_QComboBox_currentIndex_(QComboBox * _self_) {
  return _self_->currentIndex();
}

extern "C" CrystalString bg_QComboBox_currentText_(QComboBox * _self_) {
  return qstring_to_crystal(_self_->currentText());
}

extern "C" CrystalVariant bg_QComboBox_currentData_int(QComboBox * _self_, int role) {
  return qvariant_to_crystal(_self_->currentData(role));
}

extern "C" CrystalString bg_QComboBox_itemText_int(QComboBox * _self_, int index) {
  return qstring_to_crystal(_self_->itemText(index));
}

extern "C" QIcon * bg_QComboBox_itemIcon_int(QComboBox * _self_, int index) {
  return new (UseGC) QIcon (_self_->itemIcon(index));
}

extern "C" CrystalVariant bg_QComboBox_itemData_int_int(QComboBox * _self_, int index, int role) {
  return qvariant_to_crystal(_self_->itemData(index, role));
}

extern "C" void bg_QComboBox_addItem_const_QString_R(QComboBox * _self_, const CrystalString text) {
  _self_->addItem(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QComboBox_addItem_const_QString_R_const_QVariant_R(QComboBox * _self_, const CrystalString text, const CrystalVariant userData) {
  _self_->addItem(QString::fromUtf8(text.ptr, text.size), crystal_to_qvariant(userData));
}

extern "C" void bg_QComboBox_addItem_const_QIcon_R_const_QString_R(QComboBox * _self_, const QIcon & icon, const CrystalString text) {
  _self_->addItem(icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QComboBox_addItem_const_QIcon_R_const_QString_R_const_QVariant_R(QComboBox * _self_, const QIcon & icon, const CrystalString text, const CrystalVariant userData) {
  _self_->addItem(icon, QString::fromUtf8(text.ptr, text.size), crystal_to_qvariant(userData));
}

extern "C" void bg_QComboBox_addItems_const_QStringList_R(QComboBox * _self_, const QStringList & texts) {
  _self_->addItems(texts);
}

extern "C" void bg_QComboBox_insertItem_int_const_QString_R(QComboBox * _self_, int index, const CrystalString text) {
  _self_->insertItem(index, QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QComboBox_insertItem_int_const_QString_R_const_QVariant_R(QComboBox * _self_, int index, const CrystalString text, const CrystalVariant userData) {
  _self_->insertItem(index, QString::fromUtf8(text.ptr, text.size), crystal_to_qvariant(userData));
}

extern "C" void bg_QComboBox_insertItem_int_const_QIcon_R_const_QString_R(QComboBox * _self_, int index, const QIcon & icon, const CrystalString text) {
  _self_->insertItem(index, icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QComboBox_insertItem_int_const_QIcon_R_const_QString_R_const_QVariant_R(QComboBox * _self_, int index, const QIcon & icon, const CrystalString text, const CrystalVariant userData) {
  _self_->insertItem(index, icon, QString::fromUtf8(text.ptr, text.size), crystal_to_qvariant(userData));
}

extern "C" void bg_QComboBox_insertItems_int_const_QStringList_R(QComboBox * _self_, int index, const QStringList & texts) {
  _self_->insertItems(index, texts);
}

extern "C" void bg_QComboBox_insertSeparator_int(QComboBox * _self_, int index) {
  _self_->insertSeparator(index);
}

extern "C" void bg_QComboBox_removeItem_int(QComboBox * _self_, int index) {
  _self_->removeItem(index);
}

extern "C" void bg_QComboBox_setItemText_int_const_QString_R(QComboBox * _self_, int index, const CrystalString text) {
  _self_->setItemText(index, QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QComboBox_setItemIcon_int_const_QIcon_R(QComboBox * _self_, int index, const QIcon & icon) {
  _self_->setItemIcon(index, icon);
}

extern "C" void bg_QComboBox_setItemData_int_const_QVariant_R_int(QComboBox * _self_, int index, const CrystalVariant value, int role) {
  _self_->setItemData(index, crystal_to_qvariant(value), role);
}

extern "C" QAbstractItemView * bg_QComboBox_view_(QComboBox * _self_) {
  return _self_->view();
}

extern "C" void bg_QComboBox_setView_QAbstractItemView_X(QComboBox * _self_, QAbstractItemView * itemView) {
  _self_->setView(itemView);
}

extern "C" QSize * bg_QComboBox_sizeHint_(QComboBox * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QComboBox_minimumSizeHint_(QComboBox * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QComboBox_showPopup_(QComboBox * _self_) {
  _self_->showPopup();
}

extern "C" void bg_QComboBox_hidePopup_(QComboBox * _self_) {
  _self_->hidePopup();
}

extern "C" bool bg_QComboBox_event_QEvent_X(QComboBox * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" CrystalVariant bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery(QComboBox * _self_, Qt::InputMethodQuery unnamed_arg_0) {
  return qvariant_to_crystal(_self_->inputMethodQuery(unnamed_arg_0));
}

extern "C" void bg_QComboBox_clear_(QComboBox * _self_) {
  _self_->clear();
}

extern "C" void bg_QComboBox_clearEditText_(QComboBox * _self_) {
  _self_->clearEditText();
}

extern "C" void bg_QComboBox_setEditText_const_QString_R(QComboBox * _self_, const CrystalString text) {
  _self_->setEditText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QComboBox_setCurrentIndex_int(QComboBox * _self_, int index) {
  _self_->setCurrentIndex(index);
}

extern "C" void bg_QComboBox_setCurrentText_const_QString_R(QComboBox * _self_, const CrystalString text) {
  _self_->setCurrentText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QComboBox_editTextChanged_const_QString_R(QComboBox * _self_, const CrystalString unnamed_arg_0) {
  _self_->editTextChanged(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QComboBox_activated_int(QComboBox * _self_, int index) {
  _self_->activated(index);
}

extern "C" void bg_QComboBox_activated_const_QString_R(QComboBox * _self_, const CrystalString unnamed_arg_0) {
  _self_->activated(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QComboBox_highlighted_int(QComboBox * _self_, int index) {
  _self_->highlighted(index);
}

extern "C" void bg_QComboBox_highlighted_const_QString_R(QComboBox * _self_, const CrystalString unnamed_arg_0) {
  _self_->highlighted(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QComboBox_currentIndexChanged_int(QComboBox * _self_, int index) {
  _self_->currentIndexChanged(index);
}

extern "C" void bg_QComboBox_currentIndexChanged_const_QString_R(QComboBox * _self_, const CrystalString unnamed_arg_0) {
  _self_->currentIndexChanged(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QComboBox_currentTextChanged_const_QString_R(QComboBox * _self_, const CrystalString unnamed_arg_0) {
  _self_->currentTextChanged(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QComboBox_focusInEvent_QFocusEvent_X(QComboBox * _self_, QFocusEvent * e) {
  _self_->focusInEvent(e);
}

extern "C" void bg_QComboBox_focusOutEvent_QFocusEvent_X(QComboBox * _self_, QFocusEvent * e) {
  _self_->focusOutEvent(e);
}

extern "C" void bg_QComboBox_changeEvent_QEvent_X(QComboBox * _self_, QEvent * e) {
  _self_->changeEvent(e);
}

extern "C" void bg_QComboBox_resizeEvent_QResizeEvent_X(QComboBox * _self_, QResizeEvent * e) {
  _self_->resizeEvent(e);
}

extern "C" void bg_QComboBox_paintEvent_QPaintEvent_X(QComboBox * _self_, QPaintEvent * e) {
  _self_->paintEvent(e);
}

extern "C" void bg_QComboBox_showEvent_QShowEvent_X(QComboBox * _self_, QShowEvent * e) {
  _self_->showEvent(e);
}

extern "C" void bg_QComboBox_hideEvent_QHideEvent_X(QComboBox * _self_, QHideEvent * e) {
  _self_->hideEvent(e);
}

extern "C" void bg_QComboBox_mousePressEvent_QMouseEvent_X(QComboBox * _self_, QMouseEvent * e) {
  _self_->mousePressEvent(e);
}

extern "C" void bg_QComboBox_mouseReleaseEvent_QMouseEvent_X(QComboBox * _self_, QMouseEvent * e) {
  _self_->mouseReleaseEvent(e);
}

extern "C" void bg_QComboBox_keyPressEvent_QKeyEvent_X(QComboBox * _self_, QKeyEvent * e) {
  _self_->keyPressEvent(e);
}

extern "C" void bg_QComboBox_keyReleaseEvent_QKeyEvent_X(QComboBox * _self_, QKeyEvent * e) {
  _self_->keyReleaseEvent(e);
}

extern "C" void bg_QComboBox_wheelEvent_QWheelEvent_X(QComboBox * _self_, QWheelEvent * e) {
  _self_->wheelEvent(e);
}

extern "C" void bg_QComboBox_contextMenuEvent_QContextMenuEvent_X(QComboBox * _self_, QContextMenuEvent * e) {
  _self_->contextMenuEvent(e);
}

extern "C" void bg_QComboBox_inputMethodEvent_QInputMethodEvent_X(QComboBox * _self_, QInputMethodEvent * unnamed_arg_0) {
  _self_->inputMethodEvent(unnamed_arg_0);
}

extern "C" void bg_QComboBox_initStyleOption_QStyleOptionComboBox_X(QComboBox * _self_, QStyleOptionComboBox * option) {
  _self_->initStyleOption(option);
}

extern "C" QComboBox * bg_QComboBox__CONSTRUCT_QComboBoxPrivate_R_QWidget_X(QComboBoxPrivate & unnamed_arg_0, QWidget * unnamed_arg_1) {
  return new (UseGC) BgInherit_ComboBox(unnamed_arg_0, unnamed_arg_1);
}

extern "C" QMetaObject::Connection * bg_QComboBox_CONNECT_editTextChanged_CrystalProc_void_const_QString_R(QComboBox * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QComboBox::*)(const QString &))&QComboBox::editTextChanged, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" QMetaObject::Connection * bg_QComboBox_CONNECT_activated_CrystalProc_void_int(QComboBox * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QComboBox::*)(int))&QComboBox::activated, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QComboBox_CONNECT_activated_CrystalProc_void_const_QString_R(QComboBox * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QComboBox::*)(const QString &))&QComboBox::activated, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" QMetaObject::Connection * bg_QComboBox_CONNECT_highlighted_CrystalProc_void_int(QComboBox * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QComboBox::*)(int))&QComboBox::highlighted, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QComboBox_CONNECT_highlighted_CrystalProc_void_const_QString_R(QComboBox * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QComboBox::*)(const QString &))&QComboBox::highlighted, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" QMetaObject::Connection * bg_QComboBox_CONNECT_currentIndexChanged_CrystalProc_void_int(QComboBox * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QComboBox::*)(int))&QComboBox::currentIndexChanged, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QComboBox_CONNECT_currentIndexChanged_CrystalProc_void_const_QString_R(QComboBox * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QComboBox::*)(const QString &))&QComboBox::currentIndexChanged, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" QMetaObject::Connection * bg_QComboBox_CONNECT_currentTextChanged_CrystalProc_void_const_QString_R(QComboBox * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QComboBox::*)(const QString &))&QComboBox::currentTextChanged, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" void bg_BgInherit_ComboBox_JUMPTABLE_BgJumptable_ComboBox_R(BgInherit_ComboBox * _self_, const BgJumptable_ComboBox & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_ProgressBar {
  CrystalProc<const QMetaObject *> bg_QProgressBar_metaObject_;
  CrystalProc<void *, const char *> bg_QProgressBar_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<CrystalString> bg_QProgressBar_text_;
  CrystalProc<QSize &> bg_QProgressBar_sizeHint_;
  CrystalProc<QSize &> bg_QProgressBar_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QProgressBar_event_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QProgressBar_paintEvent_QPaintEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<void, QEvent *> bg_QWidget_changeEvent_QEvent_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_ProgressBar : public QProgressBar {
  using QProgressBar::QProgressBar;
  BgJumptable_ProgressBar bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QProgressBar_metaObject_.isValid()) {
      return _self_->bgJump.bg_QProgressBar_metaObject_();
    } else {
      return QProgressBar::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QProgressBar_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QProgressBar_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QProgressBar::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QProgressBar::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QString text() const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QProgressBar_text_.isValid()) {
      return QString::fromUtf8(_self_->bgJump.bg_QProgressBar_text_().ptr, _self_->bgJump.bg_QProgressBar_text_().size);
    } else {
      return QProgressBar::text();
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QProgressBar_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QProgressBar_sizeHint_();
    } else {
      return QProgressBar::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QProgressBar_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QProgressBar_minimumSizeHint_();
    } else {
      return QProgressBar::minimumSizeHint();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QProgressBar_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QProgressBar_event_QEvent_X(e);
    } else {
      return QProgressBar::event(e);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QProgressBar_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QProgressBar_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::paintEvent(unnamed_arg_0);
    }
  }
  
  int devType() const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QProgressBar::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QProgressBar::setVisible(visible);
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QProgressBar::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QProgressBar::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QProgressBar::paintEngine();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QProgressBar::nativeEvent(eventType, message, result);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::changeEvent(unnamed_arg_0);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QProgressBar::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QProgressBar::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QProgressBar::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QProgressBar::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QProgressBar::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_ProgressBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QProgressBar::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QProgressBar_metaObject_(QProgressBar * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QProgressBar_qt_metacast_const_char_X(QProgressBar * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX(QProgressBar * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QProgressBar_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QProgressBar::tr(s));
}

extern "C" CrystalString bg_QProgressBar_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QProgressBar::tr(s, c));
}

extern "C" CrystalString bg_QProgressBar_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QProgressBar::tr(s, c, n));
}

extern "C" CrystalString bg_QProgressBar_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QProgressBar::trUtf8(s));
}

extern "C" CrystalString bg_QProgressBar_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QProgressBar::trUtf8(s, c));
}

extern "C" CrystalString bg_QProgressBar_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QProgressBar::trUtf8(s, c, n));
}

extern "C" QProgressBar * bg_QProgressBar__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_ProgressBar(parent);
}

extern "C" int bg_QProgressBar_minimum_(QProgressBar * _self_) {
  return _self_->minimum();
}

extern "C" int bg_QProgressBar_maximum_(QProgressBar * _self_) {
  return _self_->maximum();
}

extern "C" int bg_QProgressBar_value_(QProgressBar * _self_) {
  return _self_->value();
}

extern "C" CrystalString bg_QProgressBar_text_(QProgressBar * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" void bg_QProgressBar_setTextVisible_bool(QProgressBar * _self_, bool visible) {
  _self_->setTextVisible(visible);
}

extern "C" bool bg_QProgressBar_isTextVisible_(QProgressBar * _self_) {
  return _self_->isTextVisible();
}

extern "C" Qt::Alignment bg_QProgressBar_alignment_(QProgressBar * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QProgressBar_setAlignment_Qt__Alignment(QProgressBar * _self_, Qt::Alignment alignment) {
  _self_->setAlignment(alignment);
}

extern "C" QSize * bg_QProgressBar_sizeHint_(QProgressBar * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QProgressBar_minimumSizeHint_(QProgressBar * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" Qt::Orientation bg_QProgressBar_orientation_(QProgressBar * _self_) {
  return _self_->orientation();
}

extern "C" void bg_QProgressBar_setInvertedAppearance_bool(QProgressBar * _self_, bool invert) {
  _self_->setInvertedAppearance(invert);
}

extern "C" bool bg_QProgressBar_invertedAppearance_(QProgressBar * _self_) {
  return _self_->invertedAppearance();
}

extern "C" void bg_QProgressBar_setTextDirection_QProgressBar__Direction(QProgressBar * _self_, QProgressBar::Direction textDirection) {
  _self_->setTextDirection(textDirection);
}

extern "C" QProgressBar::Direction bg_QProgressBar_textDirection_(QProgressBar * _self_) {
  return _self_->textDirection();
}

extern "C" void bg_QProgressBar_setFormat_const_QString_R(QProgressBar * _self_, const CrystalString format) {
  _self_->setFormat(QString::fromUtf8(format.ptr, format.size));
}

extern "C" void bg_QProgressBar_resetFormat_(QProgressBar * _self_) {
  _self_->resetFormat();
}

extern "C" CrystalString bg_QProgressBar_format_(QProgressBar * _self_) {
  return qstring_to_crystal(_self_->format());
}

extern "C" void bg_QProgressBar_reset_(QProgressBar * _self_) {
  _self_->reset();
}

extern "C" void bg_QProgressBar_setRange_int_int(QProgressBar * _self_, int minimum, int maximum) {
  _self_->setRange(minimum, maximum);
}

extern "C" void bg_QProgressBar_setMinimum_int(QProgressBar * _self_, int minimum) {
  _self_->setMinimum(minimum);
}

extern "C" void bg_QProgressBar_setMaximum_int(QProgressBar * _self_, int maximum) {
  _self_->setMaximum(maximum);
}

extern "C" void bg_QProgressBar_setValue_int(QProgressBar * _self_, int value) {
  _self_->setValue(value);
}

extern "C" void bg_QProgressBar_setOrientation_Qt__Orientation(QProgressBar * _self_, Qt::Orientation unnamed_arg_0) {
  _self_->setOrientation(unnamed_arg_0);
}

extern "C" void bg_QProgressBar_valueChanged_int(QProgressBar * _self_, int value) {
  _self_->valueChanged(value);
}

extern "C" bool bg_QProgressBar_event_QEvent_X(QProgressBar * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QProgressBar_paintEvent_QPaintEvent_X(QProgressBar * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QProgressBar_initStyleOption_QStyleOptionProgressBar_X(QProgressBar * _self_, QStyleOptionProgressBar * option) {
  _self_->initStyleOption(option);
}

extern "C" QMetaObject::Connection * bg_QProgressBar_CONNECT_valueChanged_CrystalProc_void_int(QProgressBar * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QProgressBar::*)(int))&QProgressBar::valueChanged, [_proc_](int value){ _proc_(value); }));
}

extern "C" void bg_BgInherit_ProgressBar_JUMPTABLE_BgJumptable_ProgressBar_R(BgInherit_ProgressBar * _self_, const BgJumptable_ProgressBar & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_AbstractSlider {
  CrystalProc<const QMetaObject *> bg_QAbstractSlider_metaObject_;
  CrystalProc<void *, const char *> bg_QAbstractSlider_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QAbstractSlider_event_QEvent_X;
  CrystalProc<void, QAbstractSlider::SliderChange> bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSlider_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractSlider_timerEvent_QTimerEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QAbstractSlider_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractSlider_changeEvent_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QWidget_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_AbstractSlider : public QAbstractSlider {
  using QAbstractSlider::QAbstractSlider;
  BgJumptable_AbstractSlider bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_metaObject_.isValid()) {
      return _self_->bgJump.bg_QAbstractSlider_metaObject_();
    } else {
      return QAbstractSlider::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QAbstractSlider_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAbstractSlider::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QAbstractSlider::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractSlider_event_QEvent_X(e);
    } else {
      return QAbstractSlider::event(e);
    }
  }
  
  void sliderChange(QAbstractSlider::SliderChange change) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(change);
    } else {
      QAbstractSlider::sliderChange(change);
    }
  }
  
  void keyPressEvent(QKeyEvent * ev) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(ev);
    } else {
      QAbstractSlider::keyPressEvent(ev);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::timerEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * e) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_wheelEvent_QWheelEvent_X(e);
    } else {
      QAbstractSlider::wheelEvent(e);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_changeEvent_QEvent_X(e);
    } else {
      QAbstractSlider::changeEvent(e);
    }
  }
  
  int devType() const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QAbstractSlider::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QAbstractSlider::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QAbstractSlider::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QAbstractSlider::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QAbstractSlider::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QAbstractSlider::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QAbstractSlider::paintEngine();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::leaveEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::paintEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QAbstractSlider::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QAbstractSlider::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QAbstractSlider::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QAbstractSlider::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QAbstractSlider::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QAbstractSlider::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_AbstractSlider *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QAbstractSlider::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QAbstractSlider_metaObject_(QAbstractSlider * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QAbstractSlider_qt_metacast_const_char_X(QAbstractSlider * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX(QAbstractSlider * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QAbstractSlider_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractSlider::tr(s));
}

extern "C" CrystalString bg_QAbstractSlider_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractSlider::tr(s, c));
}

extern "C" CrystalString bg_QAbstractSlider_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractSlider::tr(s, c, n));
}

extern "C" CrystalString bg_QAbstractSlider_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractSlider::trUtf8(s));
}

extern "C" CrystalString bg_QAbstractSlider_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractSlider::trUtf8(s, c));
}

extern "C" CrystalString bg_QAbstractSlider_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractSlider::trUtf8(s, c, n));
}

extern "C" QAbstractSlider * bg_QAbstractSlider__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_AbstractSlider(parent);
}

extern "C" Qt::Orientation bg_QAbstractSlider_orientation_(QAbstractSlider * _self_) {
  return _self_->orientation();
}

extern "C" void bg_QAbstractSlider_setMinimum_int(QAbstractSlider * _self_, int unnamed_arg_0) {
  _self_->setMinimum(unnamed_arg_0);
}

extern "C" int bg_QAbstractSlider_minimum_(QAbstractSlider * _self_) {
  return _self_->minimum();
}

extern "C" void bg_QAbstractSlider_setMaximum_int(QAbstractSlider * _self_, int unnamed_arg_0) {
  _self_->setMaximum(unnamed_arg_0);
}

extern "C" int bg_QAbstractSlider_maximum_(QAbstractSlider * _self_) {
  return _self_->maximum();
}

extern "C" void bg_QAbstractSlider_setSingleStep_int(QAbstractSlider * _self_, int unnamed_arg_0) {
  _self_->setSingleStep(unnamed_arg_0);
}

extern "C" int bg_QAbstractSlider_singleStep_(QAbstractSlider * _self_) {
  return _self_->singleStep();
}

extern "C" void bg_QAbstractSlider_setPageStep_int(QAbstractSlider * _self_, int unnamed_arg_0) {
  _self_->setPageStep(unnamed_arg_0);
}

extern "C" int bg_QAbstractSlider_pageStep_(QAbstractSlider * _self_) {
  return _self_->pageStep();
}

extern "C" void bg_QAbstractSlider_setTracking_bool(QAbstractSlider * _self_, bool enable) {
  _self_->setTracking(enable);
}

extern "C" bool bg_QAbstractSlider_hasTracking_(QAbstractSlider * _self_) {
  return _self_->hasTracking();
}

extern "C" void bg_QAbstractSlider_setSliderDown_bool(QAbstractSlider * _self_, bool unnamed_arg_0) {
  _self_->setSliderDown(unnamed_arg_0);
}

extern "C" bool bg_QAbstractSlider_isSliderDown_(QAbstractSlider * _self_) {
  return _self_->isSliderDown();
}

extern "C" void bg_QAbstractSlider_setSliderPosition_int(QAbstractSlider * _self_, int unnamed_arg_0) {
  _self_->setSliderPosition(unnamed_arg_0);
}

extern "C" int bg_QAbstractSlider_sliderPosition_(QAbstractSlider * _self_) {
  return _self_->sliderPosition();
}

extern "C" void bg_QAbstractSlider_setInvertedAppearance_bool(QAbstractSlider * _self_, bool unnamed_arg_0) {
  _self_->setInvertedAppearance(unnamed_arg_0);
}

extern "C" bool bg_QAbstractSlider_invertedAppearance_(QAbstractSlider * _self_) {
  return _self_->invertedAppearance();
}

extern "C" void bg_QAbstractSlider_setInvertedControls_bool(QAbstractSlider * _self_, bool unnamed_arg_0) {
  _self_->setInvertedControls(unnamed_arg_0);
}

extern "C" bool bg_QAbstractSlider_invertedControls_(QAbstractSlider * _self_) {
  return _self_->invertedControls();
}

extern "C" int bg_QAbstractSlider_value_(QAbstractSlider * _self_) {
  return _self_->value();
}

extern "C" void bg_QAbstractSlider_triggerAction_QAbstractSlider__SliderAction(QAbstractSlider * _self_, QAbstractSlider::SliderAction action) {
  _self_->triggerAction(action);
}

extern "C" void bg_QAbstractSlider_setValue_int(QAbstractSlider * _self_, int unnamed_arg_0) {
  _self_->setValue(unnamed_arg_0);
}

extern "C" void bg_QAbstractSlider_setOrientation_Qt__Orientation(QAbstractSlider * _self_, Qt::Orientation unnamed_arg_0) {
  _self_->setOrientation(unnamed_arg_0);
}

extern "C" void bg_QAbstractSlider_setRange_int_int(QAbstractSlider * _self_, int min, int max) {
  _self_->setRange(min, max);
}

extern "C" void bg_QAbstractSlider_valueChanged_int(QAbstractSlider * _self_, int value) {
  _self_->valueChanged(value);
}

extern "C" void bg_QAbstractSlider_sliderPressed_(QAbstractSlider * _self_) {
  _self_->sliderPressed();
}

extern "C" void bg_QAbstractSlider_sliderMoved_int(QAbstractSlider * _self_, int position) {
  _self_->sliderMoved(position);
}

extern "C" void bg_QAbstractSlider_sliderReleased_(QAbstractSlider * _self_) {
  _self_->sliderReleased();
}

extern "C" void bg_QAbstractSlider_rangeChanged_int_int(QAbstractSlider * _self_, int min, int max) {
  _self_->rangeChanged(min, max);
}

extern "C" void bg_QAbstractSlider_actionTriggered_int(QAbstractSlider * _self_, int action) {
  _self_->actionTriggered(action);
}

extern "C" bool bg_QAbstractSlider_event_QEvent_X(QAbstractSlider * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QAbstractSlider_setRepeatAction_QAbstractSlider__SliderAction_int_int(QAbstractSlider * _self_, QAbstractSlider::SliderAction action, int thresholdTime, int repeatTime) {
  _self_->setRepeatAction(action, thresholdTime, repeatTime);
}

extern "C" QAbstractSlider::SliderAction bg_QAbstractSlider_repeatAction_(QAbstractSlider * _self_) {
  return _self_->repeatAction();
}

extern "C" void bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(QAbstractSlider * _self_, QAbstractSlider::SliderChange change) {
  _self_->sliderChange(change);
}

extern "C" void bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(QAbstractSlider * _self_, QKeyEvent * ev) {
  _self_->keyPressEvent(ev);
}

extern "C" void bg_QAbstractSlider_timerEvent_QTimerEvent_X(QAbstractSlider * _self_, QTimerEvent * unnamed_arg_0) {
  _self_->timerEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractSlider_wheelEvent_QWheelEvent_X(QAbstractSlider * _self_, QWheelEvent * e) {
  _self_->wheelEvent(e);
}

extern "C" void bg_QAbstractSlider_changeEvent_QEvent_X(QAbstractSlider * _self_, QEvent * e) {
  _self_->changeEvent(e);
}

extern "C" QAbstractSlider * bg_QAbstractSlider__CONSTRUCT_QAbstractSliderPrivate_R_QWidget_X(QAbstractSliderPrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_AbstractSlider(dd, parent);
}

extern "C" QMetaObject::Connection * bg_QAbstractSlider_CONNECT_valueChanged_CrystalProc_void_int(QAbstractSlider * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractSlider::*)(int))&QAbstractSlider::valueChanged, [_proc_](int value){ _proc_(value); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractSlider_CONNECT_sliderPressed_CrystalProc_void(QAbstractSlider * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractSlider::*)())&QAbstractSlider::sliderPressed, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractSlider_CONNECT_sliderMoved_CrystalProc_void_int(QAbstractSlider * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractSlider::*)(int))&QAbstractSlider::sliderMoved, [_proc_](int position){ _proc_(position); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractSlider_CONNECT_sliderReleased_CrystalProc_void(QAbstractSlider * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractSlider::*)())&QAbstractSlider::sliderReleased, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractSlider_CONNECT_rangeChanged_CrystalProc_void_int_int(QAbstractSlider * _self_, CrystalProc<void, int, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractSlider::*)(int, int))&QAbstractSlider::rangeChanged, [_proc_](int min, int max){ _proc_(min, max); }));
}

extern "C" QMetaObject::Connection * bg_QAbstractSlider_CONNECT_actionTriggered_CrystalProc_void_int(QAbstractSlider * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractSlider::*)(int))&QAbstractSlider::actionTriggered, [_proc_](int action){ _proc_(action); }));
}

extern "C" void bg_BgInherit_AbstractSlider_JUMPTABLE_BgJumptable_AbstractSlider_R(BgInherit_AbstractSlider * _self_, const BgJumptable_AbstractSlider & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Dial {
  CrystalProc<const QMetaObject *> bg_QDial_metaObject_;
  CrystalProc<void *, const char *> bg_QDial_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QDial_sizeHint_;
  CrystalProc<QSize &> bg_QDial_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QDial_event_QEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QDial_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QDial_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QDial_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QDial_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QDial_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QAbstractSlider::SliderChange> bg_QDial_sliderChange_QAbstractSlider__SliderChange;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSlider_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractSlider_timerEvent_QTimerEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QAbstractSlider_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractSlider_changeEvent_QEvent_X;
};
struct BgInherit_Dial : public QDial {
  using QDial::QDial;
  BgJumptable_Dial bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_metaObject_.isValid()) {
      return _self_->bgJump.bg_QDial_metaObject_();
    } else {
      return QDial::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QDial_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QDial::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QDial::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QDial_sizeHint_();
    } else {
      return QDial::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QDial_minimumSizeHint_();
    } else {
      return QDial::minimumSizeHint();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QDial_event_QEvent_X(e);
    } else {
      return QDial::event(e);
    }
  }
  
  void resizeEvent(QResizeEvent * re) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QDial_resizeEvent_QResizeEvent_X(re);
    } else {
      QDial::resizeEvent(re);
    }
  }
  
  void paintEvent(QPaintEvent * pe) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QDial_paintEvent_QPaintEvent_X(pe);
    } else {
      QDial::paintEvent(pe);
    }
  }
  
  void mousePressEvent(QMouseEvent * me) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QDial_mousePressEvent_QMouseEvent_X(me);
    } else {
      QDial::mousePressEvent(me);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * me) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QDial_mouseReleaseEvent_QMouseEvent_X(me);
    } else {
      QDial::mouseReleaseEvent(me);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * me) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QDial_mouseMoveEvent_QMouseEvent_X(me);
    } else {
      QDial::mouseMoveEvent(me);
    }
  }
  
  void sliderChange(QAbstractSlider::SliderChange change) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QDial_sliderChange_QAbstractSlider__SliderChange.isValid()) {
      _self_->bgJump.bg_QDial_sliderChange_QAbstractSlider__SliderChange(change);
    } else {
      QDial::sliderChange(change);
    }
  }
  
  void keyPressEvent(QKeyEvent * ev) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(ev);
    } else {
      QDial::keyPressEvent(ev);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QDial::timerEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * e) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_wheelEvent_QWheelEvent_X(e);
    } else {
      QDial::wheelEvent(e);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_Dial *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_changeEvent_QEvent_X(e);
    } else {
      QDial::changeEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QDial_metaObject_(QDial * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QDial_qt_metacast_const_char_X(QDial * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX(QDial * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QDial_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDial::tr(s));
}

extern "C" CrystalString bg_QDial_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDial::tr(s, c));
}

extern "C" CrystalString bg_QDial_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDial::tr(s, c, n));
}

extern "C" CrystalString bg_QDial_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDial::trUtf8(s));
}

extern "C" CrystalString bg_QDial_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDial::trUtf8(s, c));
}

extern "C" CrystalString bg_QDial_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDial::trUtf8(s, c, n));
}

extern "C" QDial * bg_QDial__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_Dial(parent);
}

extern "C" bool bg_QDial_wrapping_(QDial * _self_) {
  return _self_->wrapping();
}

extern "C" int bg_QDial_notchSize_(QDial * _self_) {
  return _self_->notchSize();
}

extern "C" void bg_QDial_setNotchTarget_double(QDial * _self_, double target) {
  _self_->setNotchTarget(target);
}

extern "C" qreal bg_QDial_notchTarget_(QDial * _self_) {
  return _self_->notchTarget();
}

extern "C" bool bg_QDial_notchesVisible_(QDial * _self_) {
  return _self_->notchesVisible();
}

extern "C" QSize * bg_QDial_sizeHint_(QDial * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QDial_minimumSizeHint_(QDial * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QDial_setNotchesVisible_bool(QDial * _self_, bool visible) {
  _self_->setNotchesVisible(visible);
}

extern "C" void bg_QDial_setWrapping_bool(QDial * _self_, bool on) {
  _self_->setWrapping(on);
}

extern "C" bool bg_QDial_event_QEvent_X(QDial * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QDial_resizeEvent_QResizeEvent_X(QDial * _self_, QResizeEvent * re) {
  _self_->resizeEvent(re);
}

extern "C" void bg_QDial_paintEvent_QPaintEvent_X(QDial * _self_, QPaintEvent * pe) {
  _self_->paintEvent(pe);
}

extern "C" void bg_QDial_mousePressEvent_QMouseEvent_X(QDial * _self_, QMouseEvent * me) {
  _self_->mousePressEvent(me);
}

extern "C" void bg_QDial_mouseReleaseEvent_QMouseEvent_X(QDial * _self_, QMouseEvent * me) {
  _self_->mouseReleaseEvent(me);
}

extern "C" void bg_QDial_mouseMoveEvent_QMouseEvent_X(QDial * _self_, QMouseEvent * me) {
  _self_->mouseMoveEvent(me);
}

extern "C" void bg_QDial_sliderChange_QAbstractSlider__SliderChange(QDial * _self_, QAbstractSlider::SliderChange change) {
  _self_->sliderChange(change);
}

extern "C" void bg_QDial_initStyleOption_QStyleOptionSlider_X(QDial * _self_, QStyleOptionSlider * option) {
  _self_->initStyleOption(option);
}

extern "C" void bg_BgInherit_Dial_JUMPTABLE_BgJumptable_Dial_R(BgInherit_Dial * _self_, const BgJumptable_Dial & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_ScrollBar {
  CrystalProc<const QMetaObject *> bg_QScrollBar_metaObject_;
  CrystalProc<void *, const char *> bg_QScrollBar_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QScrollBar_sizeHint_;
  CrystalProc<bool, QEvent *> bg_QScrollBar_event_QEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QScrollBar_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QScrollBar_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QScrollBar_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QScrollBar_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QHideEvent *> bg_QScrollBar_hideEvent_QHideEvent_X;
  CrystalProc<void, QAbstractSlider::SliderChange> bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange;
  CrystalProc<void, QContextMenuEvent *> bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSlider_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractSlider_timerEvent_QTimerEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractSlider_changeEvent_QEvent_X;
};
struct BgInherit_ScrollBar : public QScrollBar {
  using QScrollBar::QScrollBar;
  BgJumptable_ScrollBar bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_metaObject_.isValid()) {
      return _self_->bgJump.bg_QScrollBar_metaObject_();
    } else {
      return QScrollBar::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QScrollBar_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QScrollBar::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QScrollBar::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QScrollBar_sizeHint_();
    } else {
      return QScrollBar::sizeHint();
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QScrollBar_event_QEvent_X(event);
    } else {
      return QScrollBar::event(event);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QScrollBar_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QScrollBar::wheelEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QScrollBar_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QScrollBar::paintEvent(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QScrollBar_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QScrollBar::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QScrollBar::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QScrollBar_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QScrollBar::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QScrollBar_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QScrollBar::hideEvent(unnamed_arg_0);
    }
  }
  
  void sliderChange(QAbstractSlider::SliderChange change) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange.isValid()) {
      _self_->bgJump.bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange(change);
    } else {
      QScrollBar::sliderChange(change);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QScrollBar::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * ev) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(ev);
    } else {
      QScrollBar::keyPressEvent(ev);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QScrollBar::timerEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_ScrollBar *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_changeEvent_QEvent_X(e);
    } else {
      QScrollBar::changeEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QScrollBar_metaObject_(QScrollBar * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QScrollBar_qt_metacast_const_char_X(QScrollBar * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX(QScrollBar * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QScrollBar_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QScrollBar::tr(s));
}

extern "C" CrystalString bg_QScrollBar_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QScrollBar::tr(s, c));
}

extern "C" CrystalString bg_QScrollBar_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QScrollBar::tr(s, c, n));
}

extern "C" CrystalString bg_QScrollBar_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QScrollBar::trUtf8(s));
}

extern "C" CrystalString bg_QScrollBar_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QScrollBar::trUtf8(s, c));
}

extern "C" CrystalString bg_QScrollBar_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QScrollBar::trUtf8(s, c, n));
}

extern "C" QScrollBar * bg_QScrollBar__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_ScrollBar(parent);
}

extern "C" QScrollBar * bg_QScrollBar__CONSTRUCT_Qt__Orientation_QWidget_X(Qt::Orientation unnamed_arg_0, QWidget * parent) {
  return new (UseGC) BgInherit_ScrollBar(unnamed_arg_0, parent);
}

extern "C" QSize * bg_QScrollBar_sizeHint_(QScrollBar * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" bool bg_QScrollBar_event_QEvent_X(QScrollBar * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" void bg_QScrollBar_wheelEvent_QWheelEvent_X(QScrollBar * _self_, QWheelEvent * unnamed_arg_0) {
  _self_->wheelEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollBar_paintEvent_QPaintEvent_X(QScrollBar * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollBar_mousePressEvent_QMouseEvent_X(QScrollBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X(QScrollBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollBar_mouseMoveEvent_QMouseEvent_X(QScrollBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollBar_hideEvent_QHideEvent_X(QScrollBar * _self_, QHideEvent * unnamed_arg_0) {
  _self_->hideEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange(QScrollBar * _self_, QAbstractSlider::SliderChange change) {
  _self_->sliderChange(change);
}

extern "C" void bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X(QScrollBar * _self_, QContextMenuEvent * unnamed_arg_0) {
  _self_->contextMenuEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollBar_initStyleOption_QStyleOptionSlider_X(QScrollBar * _self_, QStyleOptionSlider * option) {
  _self_->initStyleOption(option);
}

extern "C" void bg_BgInherit_ScrollBar_JUMPTABLE_BgJumptable_ScrollBar_R(BgInherit_ScrollBar * _self_, const BgJumptable_ScrollBar & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Slider {
  CrystalProc<const QMetaObject *> bg_QSlider_metaObject_;
  CrystalProc<void *, const char *> bg_QSlider_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QSlider_sizeHint_;
  CrystalProc<QSize &> bg_QSlider_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QSlider_event_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QSlider_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QSlider_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QSlider_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QSlider_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QAbstractSlider::SliderChange> bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSlider_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractSlider_timerEvent_QTimerEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QAbstractSlider_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractSlider_changeEvent_QEvent_X;
};
struct BgInherit_Slider : public QSlider {
  using QSlider::QSlider;
  BgJumptable_Slider bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_metaObject_.isValid()) {
      return _self_->bgJump.bg_QSlider_metaObject_();
    } else {
      return QSlider::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QSlider_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QSlider::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QSlider::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QSlider_sizeHint_();
    } else {
      return QSlider::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QSlider_minimumSizeHint_();
    } else {
      return QSlider::minimumSizeHint();
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QSlider_event_QEvent_X(event);
    } else {
      return QSlider::event(event);
    }
  }
  
  void paintEvent(QPaintEvent * ev) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QSlider_paintEvent_QPaintEvent_X(ev);
    } else {
      QSlider::paintEvent(ev);
    }
  }
  
  void mousePressEvent(QMouseEvent * ev) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QSlider_mousePressEvent_QMouseEvent_X(ev);
    } else {
      QSlider::mousePressEvent(ev);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * ev) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QSlider_mouseReleaseEvent_QMouseEvent_X(ev);
    } else {
      QSlider::mouseReleaseEvent(ev);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * ev) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QSlider_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QSlider_mouseMoveEvent_QMouseEvent_X(ev);
    } else {
      QSlider::mouseMoveEvent(ev);
    }
  }
  
  void sliderChange(QAbstractSlider::SliderChange change) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(change);
    } else {
      QSlider::sliderChange(change);
    }
  }
  
  void keyPressEvent(QKeyEvent * ev) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(ev);
    } else {
      QSlider::keyPressEvent(ev);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QSlider::timerEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * e) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_wheelEvent_QWheelEvent_X(e);
    } else {
      QSlider::wheelEvent(e);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_Slider *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSlider_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSlider_changeEvent_QEvent_X(e);
    } else {
      QSlider::changeEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QSlider_metaObject_(QSlider * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QSlider_qt_metacast_const_char_X(QSlider * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX(QSlider * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QSlider_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QSlider::tr(s));
}

extern "C" CrystalString bg_QSlider_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QSlider::tr(s, c));
}

extern "C" CrystalString bg_QSlider_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QSlider::tr(s, c, n));
}

extern "C" CrystalString bg_QSlider_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QSlider::trUtf8(s));
}

extern "C" CrystalString bg_QSlider_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QSlider::trUtf8(s, c));
}

extern "C" CrystalString bg_QSlider_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QSlider::trUtf8(s, c, n));
}

extern "C" QSlider * bg_QSlider__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_Slider(parent);
}

extern "C" QSlider * bg_QSlider__CONSTRUCT_Qt__Orientation_QWidget_X(Qt::Orientation orientation, QWidget * parent) {
  return new (UseGC) BgInherit_Slider(orientation, parent);
}

extern "C" QSize * bg_QSlider_sizeHint_(QSlider * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QSlider_minimumSizeHint_(QSlider * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QSlider_setTickPosition_QSlider__TickPosition(QSlider * _self_, QSlider::TickPosition position) {
  _self_->setTickPosition(position);
}

extern "C" QSlider::TickPosition bg_QSlider_tickPosition_(QSlider * _self_) {
  return _self_->tickPosition();
}

extern "C" void bg_QSlider_setTickInterval_int(QSlider * _self_, int ti) {
  _self_->setTickInterval(ti);
}

extern "C" int bg_QSlider_tickInterval_(QSlider * _self_) {
  return _self_->tickInterval();
}

extern "C" bool bg_QSlider_event_QEvent_X(QSlider * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" void bg_QSlider_paintEvent_QPaintEvent_X(QSlider * _self_, QPaintEvent * ev) {
  _self_->paintEvent(ev);
}

extern "C" void bg_QSlider_mousePressEvent_QMouseEvent_X(QSlider * _self_, QMouseEvent * ev) {
  _self_->mousePressEvent(ev);
}

extern "C" void bg_QSlider_mouseReleaseEvent_QMouseEvent_X(QSlider * _self_, QMouseEvent * ev) {
  _self_->mouseReleaseEvent(ev);
}

extern "C" void bg_QSlider_mouseMoveEvent_QMouseEvent_X(QSlider * _self_, QMouseEvent * ev) {
  _self_->mouseMoveEvent(ev);
}

extern "C" void bg_QSlider_initStyleOption_QStyleOptionSlider_X(QSlider * _self_, QStyleOptionSlider * option) {
  _self_->initStyleOption(option);
}

extern "C" void bg_BgInherit_Slider_JUMPTABLE_BgJumptable_Slider_R(BgInherit_Slider * _self_, const BgJumptable_Slider & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_AbstractScrollArea {
  CrystalProc<const QMetaObject *> bg_QAbstractScrollArea_metaObject_;
  CrystalProc<void *, const char *> bg_QAbstractScrollArea_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QAbstractScrollArea_minimumSizeHint_;
  CrystalProc<QSize &> bg_QAbstractScrollArea_sizeHint_;
  CrystalProc<void, QWidget *> bg_QAbstractScrollArea_setupViewport_QWidget_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QAbstractScrollArea_event_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QAbstractScrollArea_viewportEvent_QEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QAbstractScrollArea_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QAbstractScrollArea_dropEvent_QDropEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, int, int> bg_QAbstractScrollArea_scrollContentsBy_int_int;
  CrystalProc<QSize &> bg_QAbstractScrollArea_viewportSizeHint_;
  CrystalProc<void, QEvent *> bg_QFrame_changeEvent_QEvent_X;
};
struct BgInherit_AbstractScrollArea : public QAbstractScrollArea {
  using QAbstractScrollArea::QAbstractScrollArea;
  BgJumptable_AbstractScrollArea bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_metaObject_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_metaObject_();
    } else {
      return QAbstractScrollArea::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QAbstractScrollArea::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_minimumSizeHint_();
    } else {
      return QAbstractScrollArea::minimumSizeHint();
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_sizeHint_();
    } else {
      return QAbstractScrollArea::sizeHint();
    }
  }
  
  void setupViewport(QWidget * viewport) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_setupViewport_QWidget_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_setupViewport_QWidget_X(viewport);
    } else {
      QAbstractScrollArea::setupViewport(viewport);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QAbstractScrollArea::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_event_QEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::event(unnamed_arg_0);
    }
  }
  
  bool viewportEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_viewportEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_viewportEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::viewportEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::resizeEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::paintEvent(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::wheelEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::dropEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void scrollContentsBy(int dx, int dy) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_scrollContentsBy_int_int.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_scrollContentsBy_int_int(dx, dy);
    } else {
      QAbstractScrollArea::scrollContentsBy(dx, dy);
    }
  }
  
  QSize viewportSizeHint() const override {
    const BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_viewportSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_viewportSizeHint_();
    } else {
      return QAbstractScrollArea::viewportSizeHint();
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QFrame_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QFrame_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAbstractScrollArea::changeEvent(unnamed_arg_0);
    }
  }
  
};
extern "C" const QMetaObject * bg_QAbstractScrollArea_metaObject_(QAbstractScrollArea * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QAbstractScrollArea_qt_metacast_const_char_X(QAbstractScrollArea * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(QAbstractScrollArea * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QAbstractScrollArea_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractScrollArea::tr(s));
}

extern "C" CrystalString bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractScrollArea::tr(s, c));
}

extern "C" CrystalString bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractScrollArea::tr(s, c, n));
}

extern "C" CrystalString bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractScrollArea::trUtf8(s));
}

extern "C" CrystalString bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractScrollArea::trUtf8(s, c));
}

extern "C" CrystalString bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractScrollArea::trUtf8(s, c, n));
}

extern "C" QAbstractScrollArea * bg_QAbstractScrollArea__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_AbstractScrollArea(parent);
}

extern "C" Qt::ScrollBarPolicy bg_QAbstractScrollArea_verticalScrollBarPolicy_(QAbstractScrollArea * _self_) {
  return _self_->verticalScrollBarPolicy();
}

extern "C" void bg_QAbstractScrollArea_setVerticalScrollBarPolicy_Qt__ScrollBarPolicy(QAbstractScrollArea * _self_, Qt::ScrollBarPolicy unnamed_arg_0) {
  _self_->setVerticalScrollBarPolicy(unnamed_arg_0);
}

extern "C" QScrollBar * bg_QAbstractScrollArea_verticalScrollBar_(QAbstractScrollArea * _self_) {
  return _self_->verticalScrollBar();
}

extern "C" void bg_QAbstractScrollArea_setVerticalScrollBar_QScrollBar_X(QAbstractScrollArea * _self_, QScrollBar * scrollbar) {
  _self_->setVerticalScrollBar(scrollbar);
}

extern "C" Qt::ScrollBarPolicy bg_QAbstractScrollArea_horizontalScrollBarPolicy_(QAbstractScrollArea * _self_) {
  return _self_->horizontalScrollBarPolicy();
}

extern "C" void bg_QAbstractScrollArea_setHorizontalScrollBarPolicy_Qt__ScrollBarPolicy(QAbstractScrollArea * _self_, Qt::ScrollBarPolicy unnamed_arg_0) {
  _self_->setHorizontalScrollBarPolicy(unnamed_arg_0);
}

extern "C" QScrollBar * bg_QAbstractScrollArea_horizontalScrollBar_(QAbstractScrollArea * _self_) {
  return _self_->horizontalScrollBar();
}

extern "C" void bg_QAbstractScrollArea_setHorizontalScrollBar_QScrollBar_X(QAbstractScrollArea * _self_, QScrollBar * scrollbar) {
  _self_->setHorizontalScrollBar(scrollbar);
}

extern "C" QWidget * bg_QAbstractScrollArea_cornerWidget_(QAbstractScrollArea * _self_) {
  return _self_->cornerWidget();
}

extern "C" void bg_QAbstractScrollArea_setCornerWidget_QWidget_X(QAbstractScrollArea * _self_, QWidget * widget) {
  _self_->setCornerWidget(widget);
}

extern "C" void bg_QAbstractScrollArea_addScrollBarWidget_QWidget_X_Qt__Alignment(QAbstractScrollArea * _self_, QWidget * widget, Qt::Alignment alignment) {
  _self_->addScrollBarWidget(widget, alignment);
}

extern "C" QWidgetList * bg_QAbstractScrollArea_scrollBarWidgets_Qt__Alignment(QAbstractScrollArea * _self_, Qt::Alignment alignment) {
  return new (UseGC) QWidgetList (_self_->scrollBarWidgets(alignment));
}

extern "C" QWidget * bg_QAbstractScrollArea_viewport_(QAbstractScrollArea * _self_) {
  return _self_->viewport();
}

extern "C" void bg_QAbstractScrollArea_setViewport_QWidget_X(QAbstractScrollArea * _self_, QWidget * widget) {
  _self_->setViewport(widget);
}

extern "C" QSize * bg_QAbstractScrollArea_maximumViewportSize_(QAbstractScrollArea * _self_) {
  return new (UseGC) QSize (_self_->maximumViewportSize());
}

extern "C" QSize * bg_QAbstractScrollArea_minimumSizeHint_(QAbstractScrollArea * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" QSize * bg_QAbstractScrollArea_sizeHint_(QAbstractScrollArea * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" void bg_QAbstractScrollArea_setupViewport_QWidget_X(QAbstractScrollArea * _self_, QWidget * viewport) {
  _self_->setupViewport(viewport);
}

extern "C" QAbstractScrollArea::SizeAdjustPolicy bg_QAbstractScrollArea_sizeAdjustPolicy_(QAbstractScrollArea * _self_) {
  return _self_->sizeAdjustPolicy();
}

extern "C" void bg_QAbstractScrollArea_setSizeAdjustPolicy_QAbstractScrollArea__SizeAdjustPolicy(QAbstractScrollArea * _self_, QAbstractScrollArea::SizeAdjustPolicy policy) {
  _self_->setSizeAdjustPolicy(policy);
}

extern "C" QAbstractScrollArea * bg_QAbstractScrollArea__CONSTRUCT_QAbstractScrollAreaPrivate_R_QWidget_X(QAbstractScrollAreaPrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_AbstractScrollArea(dd, parent);
}

extern "C" void bg_QAbstractScrollArea_setViewportMargins_int_int_int_int(QAbstractScrollArea * _self_, int left, int top, int right, int bottom) {
  _self_->setViewportMargins(left, top, right, bottom);
}

extern "C" void bg_QAbstractScrollArea_setViewportMargins_const_QMargins_R(QAbstractScrollArea * _self_, const QMargins & margins) {
  _self_->setViewportMargins(margins);
}

extern "C" QMargins * bg_QAbstractScrollArea_viewportMargins_(QAbstractScrollArea * _self_) {
  return new (UseGC) QMargins (_self_->viewportMargins());
}

extern "C" bool bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(QAbstractScrollArea * _self_, QObject * unnamed_arg_0, QEvent * unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QAbstractScrollArea_event_QEvent_X(QAbstractScrollArea * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QAbstractScrollArea_viewportEvent_QEvent_X(QAbstractScrollArea * _self_, QEvent * unnamed_arg_0) {
  return _self_->viewportEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(QAbstractScrollArea * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(QAbstractScrollArea * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(QAbstractScrollArea * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(QAbstractScrollArea * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(QAbstractScrollArea * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseDoubleClickEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(QAbstractScrollArea * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(QAbstractScrollArea * _self_, QWheelEvent * unnamed_arg_0) {
  _self_->wheelEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(QAbstractScrollArea * _self_, QContextMenuEvent * unnamed_arg_0) {
  _self_->contextMenuEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(QAbstractScrollArea * _self_, QDragEnterEvent * unnamed_arg_0) {
  _self_->dragEnterEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(QAbstractScrollArea * _self_, QDragMoveEvent * unnamed_arg_0) {
  _self_->dragMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(QAbstractScrollArea * _self_, QDragLeaveEvent * unnamed_arg_0) {
  _self_->dragLeaveEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_dropEvent_QDropEvent_X(QAbstractScrollArea * _self_, QDropEvent * unnamed_arg_0) {
  _self_->dropEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(QAbstractScrollArea * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_scrollContentsBy_int_int(QAbstractScrollArea * _self_, int dx, int dy) {
  _self_->scrollContentsBy(dx, dy);
}

extern "C" QSize * bg_QAbstractScrollArea_viewportSizeHint_(QAbstractScrollArea * _self_) {
  return new (UseGC) QSize (_self_->viewportSizeHint());
}

extern "C" void bg_BgInherit_AbstractScrollArea_JUMPTABLE_BgJumptable_AbstractScrollArea_R(BgInherit_AbstractScrollArea * _self_, const BgJumptable_AbstractScrollArea & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_ScrollArea {
  CrystalProc<const QMetaObject *> bg_QScrollArea_metaObject_;
  CrystalProc<void *, const char *> bg_QScrollArea_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QScrollArea_sizeHint_;
  CrystalProc<bool, bool> bg_QScrollArea_focusNextPrevChild_bool;
  CrystalProc<bool, QEvent *> bg_QScrollArea_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QScrollArea_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QScrollArea_resizeEvent_QResizeEvent_X;
  CrystalProc<void, int, int> bg_QScrollArea_scrollContentsBy_int_int;
  CrystalProc<QSize &> bg_QScrollArea_viewportSizeHint_;
  CrystalProc<QSize &> bg_QAbstractScrollArea_minimumSizeHint_;
  CrystalProc<void, QWidget *> bg_QAbstractScrollArea_setupViewport_QWidget_X;
  CrystalProc<bool, QEvent *> bg_QAbstractScrollArea_viewportEvent_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QAbstractScrollArea_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QAbstractScrollArea_dropEvent_QDropEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X;
};
struct BgInherit_ScrollArea : public QScrollArea {
  using QScrollArea::QScrollArea;
  BgJumptable_ScrollArea bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_metaObject_.isValid()) {
      return _self_->bgJump.bg_QScrollArea_metaObject_();
    } else {
      return QScrollArea::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QScrollArea_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QScrollArea::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QScrollArea::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QScrollArea_sizeHint_();
    } else {
      return QScrollArea::sizeHint();
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QScrollArea_focusNextPrevChild_bool(next);
    } else {
      return QScrollArea::focusNextPrevChild(next);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QScrollArea_event_QEvent_X(unnamed_arg_0);
    } else {
      return QScrollArea::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QScrollArea_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QScrollArea::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QScrollArea_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::resizeEvent(unnamed_arg_0);
    }
  }
  
  void scrollContentsBy(int dx, int dy) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_scrollContentsBy_int_int.isValid()) {
      _self_->bgJump.bg_QScrollArea_scrollContentsBy_int_int(dx, dy);
    } else {
      QScrollArea::scrollContentsBy(dx, dy);
    }
  }
  
  QSize viewportSizeHint() const override {
    const BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QScrollArea_viewportSizeHint_.isValid()) {
      return _self_->bgJump.bg_QScrollArea_viewportSizeHint_();
    } else {
      return QScrollArea::viewportSizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_minimumSizeHint_();
    } else {
      return QScrollArea::minimumSizeHint();
    }
  }
  
  void setupViewport(QWidget * viewport) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_setupViewport_QWidget_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_setupViewport_QWidget_X(viewport);
    } else {
      QScrollArea::setupViewport(viewport);
    }
  }
  
  bool viewportEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_viewportEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_viewportEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QScrollArea::viewportEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::paintEvent(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::wheelEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::dropEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_ScrollArea *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QScrollArea::keyPressEvent(unnamed_arg_0);
    }
  }
  
};
extern "C" const QMetaObject * bg_QScrollArea_metaObject_(QScrollArea * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QScrollArea_qt_metacast_const_char_X(QScrollArea * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(QScrollArea * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QScrollArea_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QScrollArea::tr(s));
}

extern "C" CrystalString bg_QScrollArea_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QScrollArea::tr(s, c));
}

extern "C" CrystalString bg_QScrollArea_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QScrollArea::tr(s, c, n));
}

extern "C" CrystalString bg_QScrollArea_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QScrollArea::trUtf8(s));
}

extern "C" CrystalString bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QScrollArea::trUtf8(s, c));
}

extern "C" CrystalString bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QScrollArea::trUtf8(s, c, n));
}

extern "C" QScrollArea * bg_QScrollArea__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_ScrollArea(parent);
}

extern "C" QWidget * bg_QScrollArea_widget_(QScrollArea * _self_) {
  return _self_->widget();
}

extern "C" void bg_QScrollArea_setWidget_QWidget_X(QScrollArea * _self_, QWidget * widget) {
  _self_->setWidget(widget);
}

extern "C" QWidget * bg_QScrollArea_takeWidget_(QScrollArea * _self_) {
  return _self_->takeWidget();
}

extern "C" bool bg_QScrollArea_widgetResizable_(QScrollArea * _self_) {
  return _self_->widgetResizable();
}

extern "C" void bg_QScrollArea_setWidgetResizable_bool(QScrollArea * _self_, bool resizable) {
  _self_->setWidgetResizable(resizable);
}

extern "C" QSize * bg_QScrollArea_sizeHint_(QScrollArea * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" bool bg_QScrollArea_focusNextPrevChild_bool(QScrollArea * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" Qt::Alignment bg_QScrollArea_alignment_(QScrollArea * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QScrollArea_setAlignment_Qt__Alignment(QScrollArea * _self_, Qt::Alignment unnamed_arg_0) {
  _self_->setAlignment(unnamed_arg_0);
}

extern "C" void bg_QScrollArea_ensureVisible_int_int_int_int(QScrollArea * _self_, int x, int y, int xmargin, int ymargin) {
  _self_->ensureVisible(x, y, xmargin, ymargin);
}

extern "C" void bg_QScrollArea_ensureWidgetVisible_QWidget_X_int_int(QScrollArea * _self_, QWidget * childWidget, int xmargin, int ymargin) {
  _self_->ensureWidgetVisible(childWidget, xmargin, ymargin);
}

extern "C" QScrollArea * bg_QScrollArea__CONSTRUCT_QScrollAreaPrivate_R_QWidget_X(QScrollAreaPrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_ScrollArea(dd, parent);
}

extern "C" bool bg_QScrollArea_event_QEvent_X(QScrollArea * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QScrollArea_eventFilter_QObject_X_QEvent_X(QScrollArea * _self_, QObject * unnamed_arg_0, QEvent * unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QScrollArea_resizeEvent_QResizeEvent_X(QScrollArea * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollArea_scrollContentsBy_int_int(QScrollArea * _self_, int dx, int dy) {
  _self_->scrollContentsBy(dx, dy);
}

extern "C" QSize * bg_QScrollArea_viewportSizeHint_(QScrollArea * _self_) {
  return new (UseGC) QSize (_self_->viewportSizeHint());
}

extern "C" void bg_BgInherit_ScrollArea_JUMPTABLE_BgJumptable_ScrollArea_R(BgInherit_ScrollArea * _self_, const BgJumptable_ScrollArea & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_AbstractSpinBox {
  CrystalProc<const QMetaObject *> bg_QAbstractSpinBox_metaObject_;
  CrystalProc<void *, const char *> bg_QAbstractSpinBox_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QAbstractSpinBox_sizeHint_;
  CrystalProc<QSize &> bg_QAbstractSpinBox_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QAbstractSpinBox_event_QEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<void, int> bg_QAbstractSpinBox_stepBy_int;
  CrystalProc<void> bg_QAbstractSpinBox_clear_;
  CrystalProc<void, QResizeEvent *> bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractSpinBox_changeEvent_QEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QAbstractSpinBox_closeEvent_QCloseEvent_X;
  CrystalProc<void, QHideEvent *> bg_QAbstractSpinBox_hideEvent_QHideEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractSpinBox_timerEvent_QTimerEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QAbstractSpinBox_paintEvent_QPaintEvent_X;
  CrystalProc<void, QShowEvent *> bg_QAbstractSpinBox_showEvent_QShowEvent_X;
  CrystalProc<QAbstractSpinBox::StepEnabled> bg_QAbstractSpinBox_stepEnabled_;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_AbstractSpinBox : public QAbstractSpinBox {
  using QAbstractSpinBox::QAbstractSpinBox;
  BgJumptable_AbstractSpinBox bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_metaObject_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_metaObject_();
    } else {
      return QAbstractSpinBox::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAbstractSpinBox::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QAbstractSpinBox::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_sizeHint_();
    } else {
      return QAbstractSpinBox::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_minimumSizeHint_();
    } else {
      return QAbstractSpinBox::minimumSizeHint();
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_event_QEvent_X(event);
    } else {
      return QAbstractSpinBox::event(event);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QAbstractSpinBox::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  void stepBy(int steps) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_stepBy_int.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_stepBy_int(steps);
    } else {
      QAbstractSpinBox::stepBy(steps);
    }
  }
  
  void clear() override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_clear_.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_clear_();
    } else {
      QAbstractSpinBox::clear();
    }
  }
  
  void resizeEvent(QResizeEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(event);
    } else {
      QAbstractSpinBox::resizeEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(event);
    } else {
      QAbstractSpinBox::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QAbstractSpinBox::keyReleaseEvent(event);
    }
  }
  
  void wheelEvent(QWheelEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(event);
    } else {
      QAbstractSpinBox::wheelEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(event);
    } else {
      QAbstractSpinBox::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(event);
    } else {
      QAbstractSpinBox::focusOutEvent(event);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      QAbstractSpinBox::contextMenuEvent(event);
    }
  }
  
  void changeEvent(QEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_changeEvent_QEvent_X(event);
    } else {
      QAbstractSpinBox::changeEvent(event);
    }
  }
  
  void closeEvent(QCloseEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(event);
    } else {
      QAbstractSpinBox::closeEvent(event);
    }
  }
  
  void hideEvent(QHideEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(event);
    } else {
      QAbstractSpinBox::hideEvent(event);
    }
  }
  
  void mousePressEvent(QMouseEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(event);
    } else {
      QAbstractSpinBox::mousePressEvent(event);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      QAbstractSpinBox::mouseReleaseEvent(event);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      QAbstractSpinBox::mouseMoveEvent(event);
    }
  }
  
  void timerEvent(QTimerEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(event);
    } else {
      QAbstractSpinBox::timerEvent(event);
    }
  }
  
  void paintEvent(QPaintEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(event);
    } else {
      QAbstractSpinBox::paintEvent(event);
    }
  }
  
  void showEvent(QShowEvent * event) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_showEvent_QShowEvent_X(event);
    } else {
      QAbstractSpinBox::showEvent(event);
    }
  }
  
  QAbstractSpinBox::StepEnabled stepEnabled() const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_stepEnabled_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_stepEnabled_();
    } else {
      return QAbstractSpinBox::stepEnabled();
    }
  }
  
  int devType() const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QAbstractSpinBox::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QAbstractSpinBox::setVisible(visible);
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QAbstractSpinBox::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QAbstractSpinBox::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QAbstractSpinBox::paintEngine();
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::moveEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::dropEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QAbstractSpinBox::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QAbstractSpinBox::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QAbstractSpinBox::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QAbstractSpinBox::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QAbstractSpinBox::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_AbstractSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QAbstractSpinBox::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QAbstractSpinBox_metaObject_(QAbstractSpinBox * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QAbstractSpinBox_qt_metacast_const_char_X(QAbstractSpinBox * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(QAbstractSpinBox * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QAbstractSpinBox_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractSpinBox::tr(s));
}

extern "C" CrystalString bg_QAbstractSpinBox_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractSpinBox::tr(s, c));
}

extern "C" CrystalString bg_QAbstractSpinBox_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractSpinBox::tr(s, c, n));
}

extern "C" CrystalString bg_QAbstractSpinBox_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAbstractSpinBox::trUtf8(s));
}

extern "C" CrystalString bg_QAbstractSpinBox_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAbstractSpinBox::trUtf8(s, c));
}

extern "C" CrystalString bg_QAbstractSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAbstractSpinBox::trUtf8(s, c, n));
}

extern "C" QAbstractSpinBox * bg_QAbstractSpinBox__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_AbstractSpinBox(parent);
}

extern "C" QAbstractSpinBox::ButtonSymbols bg_QAbstractSpinBox_buttonSymbols_(QAbstractSpinBox * _self_) {
  return _self_->buttonSymbols();
}

extern "C" void bg_QAbstractSpinBox_setButtonSymbols_QAbstractSpinBox__ButtonSymbols(QAbstractSpinBox * _self_, QAbstractSpinBox::ButtonSymbols bs) {
  _self_->setButtonSymbols(bs);
}

extern "C" void bg_QAbstractSpinBox_setCorrectionMode_QAbstractSpinBox__CorrectionMode(QAbstractSpinBox * _self_, QAbstractSpinBox::CorrectionMode cm) {
  _self_->setCorrectionMode(cm);
}

extern "C" QAbstractSpinBox::CorrectionMode bg_QAbstractSpinBox_correctionMode_(QAbstractSpinBox * _self_) {
  return _self_->correctionMode();
}

extern "C" bool bg_QAbstractSpinBox_hasAcceptableInput_(QAbstractSpinBox * _self_) {
  return _self_->hasAcceptableInput();
}

extern "C" CrystalString bg_QAbstractSpinBox_text_(QAbstractSpinBox * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" CrystalString bg_QAbstractSpinBox_specialValueText_(QAbstractSpinBox * _self_) {
  return qstring_to_crystal(_self_->specialValueText());
}

extern "C" void bg_QAbstractSpinBox_setSpecialValueText_const_QString_R(QAbstractSpinBox * _self_, const CrystalString txt) {
  _self_->setSpecialValueText(QString::fromUtf8(txt.ptr, txt.size));
}

extern "C" bool bg_QAbstractSpinBox_wrapping_(QAbstractSpinBox * _self_) {
  return _self_->wrapping();
}

extern "C" void bg_QAbstractSpinBox_setWrapping_bool(QAbstractSpinBox * _self_, bool w) {
  _self_->setWrapping(w);
}

extern "C" void bg_QAbstractSpinBox_setReadOnly_bool(QAbstractSpinBox * _self_, bool r) {
  _self_->setReadOnly(r);
}

extern "C" bool bg_QAbstractSpinBox_isReadOnly_(QAbstractSpinBox * _self_) {
  return _self_->isReadOnly();
}

extern "C" void bg_QAbstractSpinBox_setKeyboardTracking_bool(QAbstractSpinBox * _self_, bool kt) {
  _self_->setKeyboardTracking(kt);
}

extern "C" bool bg_QAbstractSpinBox_keyboardTracking_(QAbstractSpinBox * _self_) {
  return _self_->keyboardTracking();
}

extern "C" void bg_QAbstractSpinBox_setAlignment_Qt__Alignment(QAbstractSpinBox * _self_, Qt::Alignment flag) {
  _self_->setAlignment(flag);
}

extern "C" Qt::Alignment bg_QAbstractSpinBox_alignment_(QAbstractSpinBox * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QAbstractSpinBox_setFrame_bool(QAbstractSpinBox * _self_, bool unnamed_arg_0) {
  _self_->setFrame(unnamed_arg_0);
}

extern "C" bool bg_QAbstractSpinBox_hasFrame_(QAbstractSpinBox * _self_) {
  return _self_->hasFrame();
}

extern "C" void bg_QAbstractSpinBox_setAccelerated_bool(QAbstractSpinBox * _self_, bool on) {
  _self_->setAccelerated(on);
}

extern "C" bool bg_QAbstractSpinBox_isAccelerated_(QAbstractSpinBox * _self_) {
  return _self_->isAccelerated();
}

extern "C" void bg_QAbstractSpinBox_setGroupSeparatorShown_bool(QAbstractSpinBox * _self_, bool shown) {
  _self_->setGroupSeparatorShown(shown);
}

extern "C" bool bg_QAbstractSpinBox_isGroupSeparatorShown_(QAbstractSpinBox * _self_) {
  return _self_->isGroupSeparatorShown();
}

extern "C" QSize * bg_QAbstractSpinBox_sizeHint_(QAbstractSpinBox * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QAbstractSpinBox_minimumSizeHint_(QAbstractSpinBox * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QAbstractSpinBox_interpretText_(QAbstractSpinBox * _self_) {
  _self_->interpretText();
}

extern "C" bool bg_QAbstractSpinBox_event_QEvent_X(QAbstractSpinBox * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" CrystalVariant bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(QAbstractSpinBox * _self_, Qt::InputMethodQuery unnamed_arg_0) {
  return qvariant_to_crystal(_self_->inputMethodQuery(unnamed_arg_0));
}

extern "C" void bg_QAbstractSpinBox_stepBy_int(QAbstractSpinBox * _self_, int steps) {
  _self_->stepBy(steps);
}

extern "C" void bg_QAbstractSpinBox_stepUp_(QAbstractSpinBox * _self_) {
  _self_->stepUp();
}

extern "C" void bg_QAbstractSpinBox_stepDown_(QAbstractSpinBox * _self_) {
  _self_->stepDown();
}

extern "C" void bg_QAbstractSpinBox_selectAll_(QAbstractSpinBox * _self_) {
  _self_->selectAll();
}

extern "C" void bg_QAbstractSpinBox_clear_(QAbstractSpinBox * _self_) {
  _self_->clear();
}

extern "C" void bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(QAbstractSpinBox * _self_, QResizeEvent * event) {
  _self_->resizeEvent(event);
}

extern "C" void bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(QAbstractSpinBox * _self_, QKeyEvent * event) {
  _self_->keyPressEvent(event);
}

extern "C" void bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(QAbstractSpinBox * _self_, QKeyEvent * event) {
  _self_->keyReleaseEvent(event);
}

extern "C" void bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(QAbstractSpinBox * _self_, QWheelEvent * event) {
  _self_->wheelEvent(event);
}

extern "C" void bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(QAbstractSpinBox * _self_, QFocusEvent * event) {
  _self_->focusInEvent(event);
}

extern "C" void bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(QAbstractSpinBox * _self_, QFocusEvent * event) {
  _self_->focusOutEvent(event);
}

extern "C" void bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(QAbstractSpinBox * _self_, QContextMenuEvent * event) {
  _self_->contextMenuEvent(event);
}

extern "C" void bg_QAbstractSpinBox_changeEvent_QEvent_X(QAbstractSpinBox * _self_, QEvent * event) {
  _self_->changeEvent(event);
}

extern "C" void bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(QAbstractSpinBox * _self_, QCloseEvent * event) {
  _self_->closeEvent(event);
}

extern "C" void bg_QAbstractSpinBox_hideEvent_QHideEvent_X(QAbstractSpinBox * _self_, QHideEvent * event) {
  _self_->hideEvent(event);
}

extern "C" void bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(QAbstractSpinBox * _self_, QMouseEvent * event) {
  _self_->mousePressEvent(event);
}

extern "C" void bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(QAbstractSpinBox * _self_, QMouseEvent * event) {
  _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(QAbstractSpinBox * _self_, QMouseEvent * event) {
  _self_->mouseMoveEvent(event);
}

extern "C" void bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(QAbstractSpinBox * _self_, QTimerEvent * event) {
  _self_->timerEvent(event);
}

extern "C" void bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(QAbstractSpinBox * _self_, QPaintEvent * event) {
  _self_->paintEvent(event);
}

extern "C" void bg_QAbstractSpinBox_showEvent_QShowEvent_X(QAbstractSpinBox * _self_, QShowEvent * event) {
  _self_->showEvent(event);
}

extern "C" void bg_QAbstractSpinBox_initStyleOption_QStyleOptionSpinBox_X(QAbstractSpinBox * _self_, QStyleOptionSpinBox * option) {
  _self_->initStyleOption(option);
}

extern "C" QLineEdit * bg_QAbstractSpinBox_lineEdit_(QAbstractSpinBox * _self_) {
  return _self_->lineEdit();
}

extern "C" void bg_QAbstractSpinBox_setLineEdit_QLineEdit_X(QAbstractSpinBox * _self_, QLineEdit * edit) {
  _self_->setLineEdit(edit);
}

extern "C" QAbstractSpinBox::StepEnabled bg_QAbstractSpinBox_stepEnabled_(QAbstractSpinBox * _self_) {
  return _self_->stepEnabled();
}

extern "C" void bg_QAbstractSpinBox_editingFinished_(QAbstractSpinBox * _self_) {
  _self_->editingFinished();
}

extern "C" QAbstractSpinBox * bg_QAbstractSpinBox__CONSTRUCT_QAbstractSpinBoxPrivate_R_QWidget_X(QAbstractSpinBoxPrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_AbstractSpinBox(dd, parent);
}

extern "C" QMetaObject::Connection * bg_QAbstractSpinBox_CONNECT_editingFinished_CrystalProc_void(QAbstractSpinBox * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractSpinBox::*)())&QAbstractSpinBox::editingFinished, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_AbstractSpinBox_JUMPTABLE_BgJumptable_AbstractSpinBox_R(BgInherit_AbstractSpinBox * _self_, const BgJumptable_AbstractSpinBox & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_SpinBox {
  CrystalProc<const QMetaObject *> bg_QSpinBox_metaObject_;
  CrystalProc<void *, const char *> bg_QSpinBox_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QSpinBox_event_QEvent_X;
  CrystalProc<int, const CrystalString> bg_QSpinBox_valueFromText_const_QString_R;
  CrystalProc<CrystalString, int> bg_QSpinBox_textFromValue_int;
  CrystalProc<QSize &> bg_QAbstractSpinBox_sizeHint_;
  CrystalProc<QSize &> bg_QAbstractSpinBox_minimumSizeHint_;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<void, int> bg_QAbstractSpinBox_stepBy_int;
  CrystalProc<void> bg_QAbstractSpinBox_clear_;
  CrystalProc<void, QResizeEvent *> bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractSpinBox_changeEvent_QEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QAbstractSpinBox_closeEvent_QCloseEvent_X;
  CrystalProc<void, QHideEvent *> bg_QAbstractSpinBox_hideEvent_QHideEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractSpinBox_timerEvent_QTimerEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QAbstractSpinBox_paintEvent_QPaintEvent_X;
  CrystalProc<void, QShowEvent *> bg_QAbstractSpinBox_showEvent_QShowEvent_X;
  CrystalProc<QAbstractSpinBox::StepEnabled> bg_QAbstractSpinBox_stepEnabled_;
};
struct BgInherit_SpinBox : public QSpinBox {
  using QSpinBox::QSpinBox;
  BgJumptable_SpinBox bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QSpinBox_metaObject_.isValid()) {
      return _self_->bgJump.bg_QSpinBox_metaObject_();
    } else {
      return QSpinBox::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QSpinBox_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QSpinBox_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QSpinBox::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QSpinBox::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QSpinBox_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QSpinBox_event_QEvent_X(event);
    } else {
      return QSpinBox::event(event);
    }
  }
  
  int valueFromText(const QString & text) const override {
    const BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QSpinBox_valueFromText_const_QString_R.isValid()) {
      return _self_->bgJump.bg_QSpinBox_valueFromText_const_QString_R(qstring_to_crystal(text));
    } else {
      return QSpinBox::valueFromText(text);
    }
  }
  
  QString textFromValue(int val) const override {
    const BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QSpinBox_textFromValue_int.isValid()) {
      return QString::fromUtf8(_self_->bgJump.bg_QSpinBox_textFromValue_int(val).ptr, _self_->bgJump.bg_QSpinBox_textFromValue_int(val).size);
    } else {
      return QSpinBox::textFromValue(val);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_sizeHint_();
    } else {
      return QSpinBox::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_minimumSizeHint_();
    } else {
      return QSpinBox::minimumSizeHint();
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QSpinBox::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  void stepBy(int steps) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_stepBy_int.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_stepBy_int(steps);
    } else {
      QSpinBox::stepBy(steps);
    }
  }
  
  void clear() override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_clear_.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_clear_();
    } else {
      QSpinBox::clear();
    }
  }
  
  void resizeEvent(QResizeEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(event);
    } else {
      QSpinBox::resizeEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(event);
    } else {
      QSpinBox::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QSpinBox::keyReleaseEvent(event);
    }
  }
  
  void wheelEvent(QWheelEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(event);
    } else {
      QSpinBox::wheelEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(event);
    } else {
      QSpinBox::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(event);
    } else {
      QSpinBox::focusOutEvent(event);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      QSpinBox::contextMenuEvent(event);
    }
  }
  
  void changeEvent(QEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_changeEvent_QEvent_X(event);
    } else {
      QSpinBox::changeEvent(event);
    }
  }
  
  void closeEvent(QCloseEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(event);
    } else {
      QSpinBox::closeEvent(event);
    }
  }
  
  void hideEvent(QHideEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(event);
    } else {
      QSpinBox::hideEvent(event);
    }
  }
  
  void mousePressEvent(QMouseEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(event);
    } else {
      QSpinBox::mousePressEvent(event);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      QSpinBox::mouseReleaseEvent(event);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      QSpinBox::mouseMoveEvent(event);
    }
  }
  
  void timerEvent(QTimerEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(event);
    } else {
      QSpinBox::timerEvent(event);
    }
  }
  
  void paintEvent(QPaintEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(event);
    } else {
      QSpinBox::paintEvent(event);
    }
  }
  
  void showEvent(QShowEvent * event) override {
    BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_showEvent_QShowEvent_X(event);
    } else {
      QSpinBox::showEvent(event);
    }
  }
  
  QAbstractSpinBox::StepEnabled stepEnabled() const override {
    const BgInherit_SpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_stepEnabled_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_stepEnabled_();
    } else {
      return QSpinBox::stepEnabled();
    }
  }
  
};
extern "C" const QMetaObject * bg_QSpinBox_metaObject_(QSpinBox * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QSpinBox_qt_metacast_const_char_X(QSpinBox * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(QSpinBox * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QSpinBox_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QSpinBox::tr(s));
}

extern "C" CrystalString bg_QSpinBox_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QSpinBox::tr(s, c));
}

extern "C" CrystalString bg_QSpinBox_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QSpinBox::tr(s, c, n));
}

extern "C" CrystalString bg_QSpinBox_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QSpinBox::trUtf8(s));
}

extern "C" CrystalString bg_QSpinBox_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QSpinBox::trUtf8(s, c));
}

extern "C" CrystalString bg_QSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QSpinBox::trUtf8(s, c, n));
}

extern "C" QSpinBox * bg_QSpinBox__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_SpinBox(parent);
}

extern "C" int bg_QSpinBox_value_(QSpinBox * _self_) {
  return _self_->value();
}

extern "C" CrystalString bg_QSpinBox_prefix_(QSpinBox * _self_) {
  return qstring_to_crystal(_self_->prefix());
}

extern "C" void bg_QSpinBox_setPrefix_const_QString_R(QSpinBox * _self_, const CrystalString prefix) {
  _self_->setPrefix(QString::fromUtf8(prefix.ptr, prefix.size));
}

extern "C" CrystalString bg_QSpinBox_suffix_(QSpinBox * _self_) {
  return qstring_to_crystal(_self_->suffix());
}

extern "C" void bg_QSpinBox_setSuffix_const_QString_R(QSpinBox * _self_, const CrystalString suffix) {
  _self_->setSuffix(QString::fromUtf8(suffix.ptr, suffix.size));
}

extern "C" CrystalString bg_QSpinBox_cleanText_(QSpinBox * _self_) {
  return qstring_to_crystal(_self_->cleanText());
}

extern "C" int bg_QSpinBox_singleStep_(QSpinBox * _self_) {
  return _self_->singleStep();
}

extern "C" void bg_QSpinBox_setSingleStep_int(QSpinBox * _self_, int val) {
  _self_->setSingleStep(val);
}

extern "C" int bg_QSpinBox_minimum_(QSpinBox * _self_) {
  return _self_->minimum();
}

extern "C" void bg_QSpinBox_setMinimum_int(QSpinBox * _self_, int min) {
  _self_->setMinimum(min);
}

extern "C" int bg_QSpinBox_maximum_(QSpinBox * _self_) {
  return _self_->maximum();
}

extern "C" void bg_QSpinBox_setMaximum_int(QSpinBox * _self_, int max) {
  _self_->setMaximum(max);
}

extern "C" void bg_QSpinBox_setRange_int_int(QSpinBox * _self_, int min, int max) {
  _self_->setRange(min, max);
}

extern "C" int bg_QSpinBox_displayIntegerBase_(QSpinBox * _self_) {
  return _self_->displayIntegerBase();
}

extern "C" void bg_QSpinBox_setDisplayIntegerBase_int(QSpinBox * _self_, int base) {
  _self_->setDisplayIntegerBase(base);
}

extern "C" bool bg_QSpinBox_event_QEvent_X(QSpinBox * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" int bg_QSpinBox_valueFromText_const_QString_R(QSpinBox * _self_, const CrystalString text) {
  return _self_->valueFromText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QSpinBox_textFromValue_int(QSpinBox * _self_, int val) {
  return qstring_to_crystal(_self_->textFromValue(val));
}

extern "C" void bg_QSpinBox_setValue_int(QSpinBox * _self_, int val) {
  _self_->setValue(val);
}

extern "C" void bg_QSpinBox_valueChanged_int(QSpinBox * _self_, int unnamed_arg_0) {
  _self_->valueChanged(unnamed_arg_0);
}

extern "C" void bg_QSpinBox_valueChanged_const_QString_R(QSpinBox * _self_, const CrystalString unnamed_arg_0) {
  _self_->valueChanged(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" QMetaObject::Connection * bg_QSpinBox_CONNECT_valueChanged_CrystalProc_void_int(QSpinBox * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QSpinBox::*)(int))&QSpinBox::valueChanged, [_proc_](int unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QSpinBox_CONNECT_valueChanged_CrystalProc_void_const_QString_R(QSpinBox * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QSpinBox::*)(const QString &))&QSpinBox::valueChanged, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" void bg_BgInherit_SpinBox_JUMPTABLE_BgJumptable_SpinBox_R(BgInherit_SpinBox * _self_, const BgJumptable_SpinBox & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_DoubleSpinBox {
  CrystalProc<const QMetaObject *> bg_QDoubleSpinBox_metaObject_;
  CrystalProc<void *, const char *> bg_QDoubleSpinBox_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<double, const CrystalString> bg_QDoubleSpinBox_valueFromText_const_QString_R;
  CrystalProc<CrystalString, double> bg_QDoubleSpinBox_textFromValue_double;
  CrystalProc<QSize &> bg_QAbstractSpinBox_sizeHint_;
  CrystalProc<QSize &> bg_QAbstractSpinBox_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QAbstractSpinBox_event_QEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<void, int> bg_QAbstractSpinBox_stepBy_int;
  CrystalProc<void> bg_QAbstractSpinBox_clear_;
  CrystalProc<void, QResizeEvent *> bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractSpinBox_changeEvent_QEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QAbstractSpinBox_closeEvent_QCloseEvent_X;
  CrystalProc<void, QHideEvent *> bg_QAbstractSpinBox_hideEvent_QHideEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractSpinBox_timerEvent_QTimerEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QAbstractSpinBox_paintEvent_QPaintEvent_X;
  CrystalProc<void, QShowEvent *> bg_QAbstractSpinBox_showEvent_QShowEvent_X;
  CrystalProc<QAbstractSpinBox::StepEnabled> bg_QAbstractSpinBox_stepEnabled_;
};
struct BgInherit_DoubleSpinBox : public QDoubleSpinBox {
  using QDoubleSpinBox::QDoubleSpinBox;
  BgJumptable_DoubleSpinBox bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QDoubleSpinBox_metaObject_.isValid()) {
      return _self_->bgJump.bg_QDoubleSpinBox_metaObject_();
    } else {
      return QDoubleSpinBox::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QDoubleSpinBox_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QDoubleSpinBox_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QDoubleSpinBox::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QDoubleSpinBox::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  double valueFromText(const QString & text) const override {
    const BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QDoubleSpinBox_valueFromText_const_QString_R.isValid()) {
      return _self_->bgJump.bg_QDoubleSpinBox_valueFromText_const_QString_R(qstring_to_crystal(text));
    } else {
      return QDoubleSpinBox::valueFromText(text);
    }
  }
  
  QString textFromValue(double val) const override {
    const BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QDoubleSpinBox_textFromValue_double.isValid()) {
      return QString::fromUtf8(_self_->bgJump.bg_QDoubleSpinBox_textFromValue_double(val).ptr, _self_->bgJump.bg_QDoubleSpinBox_textFromValue_double(val).size);
    } else {
      return QDoubleSpinBox::textFromValue(val);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_sizeHint_();
    } else {
      return QDoubleSpinBox::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_minimumSizeHint_();
    } else {
      return QDoubleSpinBox::minimumSizeHint();
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_event_QEvent_X(event);
    } else {
      return QDoubleSpinBox::event(event);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QDoubleSpinBox::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  void stepBy(int steps) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_stepBy_int.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_stepBy_int(steps);
    } else {
      QDoubleSpinBox::stepBy(steps);
    }
  }
  
  void clear() override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_clear_.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_clear_();
    } else {
      QDoubleSpinBox::clear();
    }
  }
  
  void resizeEvent(QResizeEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(event);
    } else {
      QDoubleSpinBox::resizeEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(event);
    } else {
      QDoubleSpinBox::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QDoubleSpinBox::keyReleaseEvent(event);
    }
  }
  
  void wheelEvent(QWheelEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(event);
    } else {
      QDoubleSpinBox::wheelEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(event);
    } else {
      QDoubleSpinBox::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(event);
    } else {
      QDoubleSpinBox::focusOutEvent(event);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      QDoubleSpinBox::contextMenuEvent(event);
    }
  }
  
  void changeEvent(QEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_changeEvent_QEvent_X(event);
    } else {
      QDoubleSpinBox::changeEvent(event);
    }
  }
  
  void closeEvent(QCloseEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(event);
    } else {
      QDoubleSpinBox::closeEvent(event);
    }
  }
  
  void hideEvent(QHideEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(event);
    } else {
      QDoubleSpinBox::hideEvent(event);
    }
  }
  
  void mousePressEvent(QMouseEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(event);
    } else {
      QDoubleSpinBox::mousePressEvent(event);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      QDoubleSpinBox::mouseReleaseEvent(event);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      QDoubleSpinBox::mouseMoveEvent(event);
    }
  }
  
  void timerEvent(QTimerEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(event);
    } else {
      QDoubleSpinBox::timerEvent(event);
    }
  }
  
  void paintEvent(QPaintEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(event);
    } else {
      QDoubleSpinBox::paintEvent(event);
    }
  }
  
  void showEvent(QShowEvent * event) override {
    BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_showEvent_QShowEvent_X(event);
    } else {
      QDoubleSpinBox::showEvent(event);
    }
  }
  
  QAbstractSpinBox::StepEnabled stepEnabled() const override {
    const BgInherit_DoubleSpinBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_stepEnabled_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_stepEnabled_();
    } else {
      return QDoubleSpinBox::stepEnabled();
    }
  }
  
};
extern "C" const QMetaObject * bg_QDoubleSpinBox_metaObject_(QDoubleSpinBox * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QDoubleSpinBox_qt_metacast_const_char_X(QDoubleSpinBox * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(QDoubleSpinBox * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QDoubleSpinBox_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDoubleSpinBox::tr(s));
}

extern "C" CrystalString bg_QDoubleSpinBox_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDoubleSpinBox::tr(s, c));
}

extern "C" CrystalString bg_QDoubleSpinBox_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDoubleSpinBox::tr(s, c, n));
}

extern "C" CrystalString bg_QDoubleSpinBox_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDoubleSpinBox::trUtf8(s));
}

extern "C" CrystalString bg_QDoubleSpinBox_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDoubleSpinBox::trUtf8(s, c));
}

extern "C" CrystalString bg_QDoubleSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDoubleSpinBox::trUtf8(s, c, n));
}

extern "C" QDoubleSpinBox * bg_QDoubleSpinBox__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_DoubleSpinBox(parent);
}

extern "C" double bg_QDoubleSpinBox_value_(QDoubleSpinBox * _self_) {
  return _self_->value();
}

extern "C" CrystalString bg_QDoubleSpinBox_prefix_(QDoubleSpinBox * _self_) {
  return qstring_to_crystal(_self_->prefix());
}

extern "C" void bg_QDoubleSpinBox_setPrefix_const_QString_R(QDoubleSpinBox * _self_, const CrystalString prefix) {
  _self_->setPrefix(QString::fromUtf8(prefix.ptr, prefix.size));
}

extern "C" CrystalString bg_QDoubleSpinBox_suffix_(QDoubleSpinBox * _self_) {
  return qstring_to_crystal(_self_->suffix());
}

extern "C" void bg_QDoubleSpinBox_setSuffix_const_QString_R(QDoubleSpinBox * _self_, const CrystalString suffix) {
  _self_->setSuffix(QString::fromUtf8(suffix.ptr, suffix.size));
}

extern "C" CrystalString bg_QDoubleSpinBox_cleanText_(QDoubleSpinBox * _self_) {
  return qstring_to_crystal(_self_->cleanText());
}

extern "C" double bg_QDoubleSpinBox_singleStep_(QDoubleSpinBox * _self_) {
  return _self_->singleStep();
}

extern "C" void bg_QDoubleSpinBox_setSingleStep_double(QDoubleSpinBox * _self_, double val) {
  _self_->setSingleStep(val);
}

extern "C" double bg_QDoubleSpinBox_minimum_(QDoubleSpinBox * _self_) {
  return _self_->minimum();
}

extern "C" void bg_QDoubleSpinBox_setMinimum_double(QDoubleSpinBox * _self_, double min) {
  _self_->setMinimum(min);
}

extern "C" double bg_QDoubleSpinBox_maximum_(QDoubleSpinBox * _self_) {
  return _self_->maximum();
}

extern "C" void bg_QDoubleSpinBox_setMaximum_double(QDoubleSpinBox * _self_, double max) {
  _self_->setMaximum(max);
}

extern "C" void bg_QDoubleSpinBox_setRange_double_double(QDoubleSpinBox * _self_, double min, double max) {
  _self_->setRange(min, max);
}

extern "C" int bg_QDoubleSpinBox_decimals_(QDoubleSpinBox * _self_) {
  return _self_->decimals();
}

extern "C" void bg_QDoubleSpinBox_setDecimals_int(QDoubleSpinBox * _self_, int prec) {
  _self_->setDecimals(prec);
}

extern "C" double bg_QDoubleSpinBox_valueFromText_const_QString_R(QDoubleSpinBox * _self_, const CrystalString text) {
  return _self_->valueFromText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QDoubleSpinBox_textFromValue_double(QDoubleSpinBox * _self_, double val) {
  return qstring_to_crystal(_self_->textFromValue(val));
}

extern "C" void bg_QDoubleSpinBox_setValue_double(QDoubleSpinBox * _self_, double val) {
  _self_->setValue(val);
}

extern "C" void bg_QDoubleSpinBox_valueChanged_double(QDoubleSpinBox * _self_, double unnamed_arg_0) {
  _self_->valueChanged(unnamed_arg_0);
}

extern "C" void bg_QDoubleSpinBox_valueChanged_const_QString_R(QDoubleSpinBox * _self_, const CrystalString unnamed_arg_0) {
  _self_->valueChanged(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" QMetaObject::Connection * bg_QDoubleSpinBox_CONNECT_valueChanged_CrystalProc_void_double(QDoubleSpinBox * _self_, CrystalProc<void, double> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDoubleSpinBox::*)(double))&QDoubleSpinBox::valueChanged, [_proc_](double unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QDoubleSpinBox_CONNECT_valueChanged_CrystalProc_void_const_QString_R(QDoubleSpinBox * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDoubleSpinBox::*)(const QString &))&QDoubleSpinBox::valueChanged, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" void bg_BgInherit_DoubleSpinBox_JUMPTABLE_BgJumptable_DoubleSpinBox_R(BgInherit_DoubleSpinBox * _self_, const BgJumptable_DoubleSpinBox & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_DateTimeEdit {
  CrystalProc<const QMetaObject *> bg_QDateTimeEdit_metaObject_;
  CrystalProc<void *, const char *> bg_QDateTimeEdit_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QDateTimeEdit_sizeHint_;
  CrystalProc<void> bg_QDateTimeEdit_clear_;
  CrystalProc<void, int> bg_QDateTimeEdit_stepBy_int;
  CrystalProc<bool, QEvent *> bg_QDateTimeEdit_event_QEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QDateTimeEdit_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QDateTimeEdit_focusInEvent_QFocusEvent_X;
  CrystalProc<bool, bool> bg_QDateTimeEdit_focusNextPrevChild_bool;
  CrystalProc<QDateTime &, const CrystalString> bg_QDateTimeEdit_dateTimeFromText_const_QString_R;
  CrystalProc<CrystalString, const QDateTime *> bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R;
  CrystalProc<QAbstractSpinBox::StepEnabled> bg_QDateTimeEdit_stepEnabled_;
  CrystalProc<void, QMouseEvent *> bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QDateTimeEdit_paintEvent_QPaintEvent_X;
  CrystalProc<QSize &> bg_QAbstractSpinBox_minimumSizeHint_;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<void, QResizeEvent *> bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractSpinBox_changeEvent_QEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QAbstractSpinBox_closeEvent_QCloseEvent_X;
  CrystalProc<void, QHideEvent *> bg_QAbstractSpinBox_hideEvent_QHideEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractSpinBox_timerEvent_QTimerEvent_X;
  CrystalProc<void, QShowEvent *> bg_QAbstractSpinBox_showEvent_QShowEvent_X;
};
struct BgInherit_DateTimeEdit : public QDateTimeEdit {
  using QDateTimeEdit::QDateTimeEdit;
  BgJumptable_DateTimeEdit bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_metaObject_.isValid()) {
      return _self_->bgJump.bg_QDateTimeEdit_metaObject_();
    } else {
      return QDateTimeEdit::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QDateTimeEdit_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QDateTimeEdit::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QDateTimeEdit::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QDateTimeEdit_sizeHint_();
    } else {
      return QDateTimeEdit::sizeHint();
    }
  }
  
  void clear() override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_clear_.isValid()) {
      _self_->bgJump.bg_QDateTimeEdit_clear_();
    } else {
      QDateTimeEdit::clear();
    }
  }
  
  void stepBy(int steps) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_stepBy_int.isValid()) {
      _self_->bgJump.bg_QDateTimeEdit_stepBy_int(steps);
    } else {
      QDateTimeEdit::stepBy(steps);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QDateTimeEdit_event_QEvent_X(event);
    } else {
      return QDateTimeEdit::event(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X(event);
    } else {
      QDateTimeEdit::keyPressEvent(event);
    }
  }
  
  void wheelEvent(QWheelEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QDateTimeEdit_wheelEvent_QWheelEvent_X(event);
    } else {
      QDateTimeEdit::wheelEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QDateTimeEdit_focusInEvent_QFocusEvent_X(event);
    } else {
      QDateTimeEdit::focusInEvent(event);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QDateTimeEdit_focusNextPrevChild_bool(next);
    } else {
      return QDateTimeEdit::focusNextPrevChild(next);
    }
  }
  
  QDateTime dateTimeFromText(const QString & text) const override {
    const BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_dateTimeFromText_const_QString_R.isValid()) {
      return _self_->bgJump.bg_QDateTimeEdit_dateTimeFromText_const_QString_R(qstring_to_crystal(text));
    } else {
      return QDateTimeEdit::dateTimeFromText(text);
    }
  }
  
  QString textFromDateTime(const QDateTime & dt) const override {
    const BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R.isValid()) {
      return QString::fromUtf8(_self_->bgJump.bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R(&(dt)).ptr, _self_->bgJump.bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R(&(dt)).size);
    } else {
      return QDateTimeEdit::textFromDateTime(dt);
    }
  }
  
  QAbstractSpinBox::StepEnabled stepEnabled() const override {
    const BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_stepEnabled_.isValid()) {
      return _self_->bgJump.bg_QDateTimeEdit_stepEnabled_();
    } else {
      return QDateTimeEdit::stepEnabled();
    }
  }
  
  void mousePressEvent(QMouseEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X(event);
    } else {
      QDateTimeEdit::mousePressEvent(event);
    }
  }
  
  void paintEvent(QPaintEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QDateTimeEdit_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QDateTimeEdit_paintEvent_QPaintEvent_X(event);
    } else {
      QDateTimeEdit::paintEvent(event);
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractSpinBox_minimumSizeHint_();
    } else {
      return QDateTimeEdit::minimumSizeHint();
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QDateTimeEdit::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(event);
    } else {
      QDateTimeEdit::resizeEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QDateTimeEdit::keyReleaseEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(event);
    } else {
      QDateTimeEdit::focusOutEvent(event);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      QDateTimeEdit::contextMenuEvent(event);
    }
  }
  
  void changeEvent(QEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_changeEvent_QEvent_X(event);
    } else {
      QDateTimeEdit::changeEvent(event);
    }
  }
  
  void closeEvent(QCloseEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(event);
    } else {
      QDateTimeEdit::closeEvent(event);
    }
  }
  
  void hideEvent(QHideEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(event);
    } else {
      QDateTimeEdit::hideEvent(event);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      QDateTimeEdit::mouseReleaseEvent(event);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      QDateTimeEdit::mouseMoveEvent(event);
    }
  }
  
  void timerEvent(QTimerEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(event);
    } else {
      QDateTimeEdit::timerEvent(event);
    }
  }
  
  void showEvent(QShowEvent * event) override {
    BgInherit_DateTimeEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractSpinBox_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractSpinBox_showEvent_QShowEvent_X(event);
    } else {
      QDateTimeEdit::showEvent(event);
    }
  }
  
};
extern "C" const QMetaObject * bg_QDateTimeEdit_metaObject_(QDateTimeEdit * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QDateTimeEdit_qt_metacast_const_char_X(QDateTimeEdit * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX(QDateTimeEdit * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QDateTimeEdit_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDateTimeEdit::tr(s));
}

extern "C" CrystalString bg_QDateTimeEdit_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDateTimeEdit::tr(s, c));
}

extern "C" CrystalString bg_QDateTimeEdit_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDateTimeEdit::tr(s, c, n));
}

extern "C" CrystalString bg_QDateTimeEdit_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDateTimeEdit::trUtf8(s));
}

extern "C" CrystalString bg_QDateTimeEdit_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDateTimeEdit::trUtf8(s, c));
}

extern "C" CrystalString bg_QDateTimeEdit_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDateTimeEdit::trUtf8(s, c, n));
}

extern "C" QDateTimeEdit * bg_QDateTimeEdit__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_DateTimeEdit(parent);
}

extern "C" QDateTimeEdit * bg_QDateTimeEdit__CONSTRUCT_const_QDateTime_R_QWidget_X(const QDateTime & dt, QWidget * parent) {
  return new (UseGC) BgInherit_DateTimeEdit(dt, parent);
}

extern "C" QDateTimeEdit * bg_QDateTimeEdit__CONSTRUCT_const_QDate_R_QWidget_X(const QDate & d, QWidget * parent) {
  return new (UseGC) BgInherit_DateTimeEdit(d, parent);
}

extern "C" QDateTimeEdit * bg_QDateTimeEdit__CONSTRUCT_const_QTime_R_QWidget_X(const QTime & t, QWidget * parent) {
  return new (UseGC) BgInherit_DateTimeEdit(t, parent);
}

extern "C" QDateTime * bg_QDateTimeEdit_dateTime_(QDateTimeEdit * _self_) {
  return new (UseGC) QDateTime (_self_->dateTime());
}

extern "C" QDate * bg_QDateTimeEdit_date_(QDateTimeEdit * _self_) {
  return new (UseGC) QDate (_self_->date());
}

extern "C" QTime * bg_QDateTimeEdit_time_(QDateTimeEdit * _self_) {
  return new (UseGC) QTime (_self_->time());
}

extern "C" QDateTime * bg_QDateTimeEdit_minimumDateTime_(QDateTimeEdit * _self_) {
  return new (UseGC) QDateTime (_self_->minimumDateTime());
}

extern "C" void bg_QDateTimeEdit_clearMinimumDateTime_(QDateTimeEdit * _self_) {
  _self_->clearMinimumDateTime();
}

extern "C" void bg_QDateTimeEdit_setMinimumDateTime_const_QDateTime_R(QDateTimeEdit * _self_, const QDateTime & dt) {
  _self_->setMinimumDateTime(dt);
}

extern "C" QDateTime * bg_QDateTimeEdit_maximumDateTime_(QDateTimeEdit * _self_) {
  return new (UseGC) QDateTime (_self_->maximumDateTime());
}

extern "C" void bg_QDateTimeEdit_clearMaximumDateTime_(QDateTimeEdit * _self_) {
  _self_->clearMaximumDateTime();
}

extern "C" void bg_QDateTimeEdit_setMaximumDateTime_const_QDateTime_R(QDateTimeEdit * _self_, const QDateTime & dt) {
  _self_->setMaximumDateTime(dt);
}

extern "C" void bg_QDateTimeEdit_setDateTimeRange_const_QDateTime_R_const_QDateTime_R(QDateTimeEdit * _self_, const QDateTime & min, const QDateTime & max) {
  _self_->setDateTimeRange(min, max);
}

extern "C" QDate * bg_QDateTimeEdit_minimumDate_(QDateTimeEdit * _self_) {
  return new (UseGC) QDate (_self_->minimumDate());
}

extern "C" void bg_QDateTimeEdit_setMinimumDate_const_QDate_R(QDateTimeEdit * _self_, const QDate & min) {
  _self_->setMinimumDate(min);
}

extern "C" void bg_QDateTimeEdit_clearMinimumDate_(QDateTimeEdit * _self_) {
  _self_->clearMinimumDate();
}

extern "C" QDate * bg_QDateTimeEdit_maximumDate_(QDateTimeEdit * _self_) {
  return new (UseGC) QDate (_self_->maximumDate());
}

extern "C" void bg_QDateTimeEdit_setMaximumDate_const_QDate_R(QDateTimeEdit * _self_, const QDate & max) {
  _self_->setMaximumDate(max);
}

extern "C" void bg_QDateTimeEdit_clearMaximumDate_(QDateTimeEdit * _self_) {
  _self_->clearMaximumDate();
}

extern "C" void bg_QDateTimeEdit_setDateRange_const_QDate_R_const_QDate_R(QDateTimeEdit * _self_, const QDate & min, const QDate & max) {
  _self_->setDateRange(min, max);
}

extern "C" QTime * bg_QDateTimeEdit_minimumTime_(QDateTimeEdit * _self_) {
  return new (UseGC) QTime (_self_->minimumTime());
}

extern "C" void bg_QDateTimeEdit_setMinimumTime_const_QTime_R(QDateTimeEdit * _self_, const QTime & min) {
  _self_->setMinimumTime(min);
}

extern "C" void bg_QDateTimeEdit_clearMinimumTime_(QDateTimeEdit * _self_) {
  _self_->clearMinimumTime();
}

extern "C" QTime * bg_QDateTimeEdit_maximumTime_(QDateTimeEdit * _self_) {
  return new (UseGC) QTime (_self_->maximumTime());
}

extern "C" void bg_QDateTimeEdit_setMaximumTime_const_QTime_R(QDateTimeEdit * _self_, const QTime & max) {
  _self_->setMaximumTime(max);
}

extern "C" void bg_QDateTimeEdit_clearMaximumTime_(QDateTimeEdit * _self_) {
  _self_->clearMaximumTime();
}

extern "C" void bg_QDateTimeEdit_setTimeRange_const_QTime_R_const_QTime_R(QDateTimeEdit * _self_, const QTime & min, const QTime & max) {
  _self_->setTimeRange(min, max);
}

extern "C" QDateTimeEdit::Sections bg_QDateTimeEdit_displayedSections_(QDateTimeEdit * _self_) {
  return _self_->displayedSections();
}

extern "C" QDateTimeEdit::Section bg_QDateTimeEdit_currentSection_(QDateTimeEdit * _self_) {
  return _self_->currentSection();
}

extern "C" QDateTimeEdit::Section bg_QDateTimeEdit_sectionAt_int(QDateTimeEdit * _self_, int index) {
  return _self_->sectionAt(index);
}

extern "C" void bg_QDateTimeEdit_setCurrentSection_QDateTimeEdit__Section(QDateTimeEdit * _self_, QDateTimeEdit::Section section) {
  _self_->setCurrentSection(section);
}

extern "C" int bg_QDateTimeEdit_currentSectionIndex_(QDateTimeEdit * _self_) {
  return _self_->currentSectionIndex();
}

extern "C" void bg_QDateTimeEdit_setCurrentSectionIndex_int(QDateTimeEdit * _self_, int index) {
  _self_->setCurrentSectionIndex(index);
}

extern "C" QCalendarWidget * bg_QDateTimeEdit_calendarWidget_(QDateTimeEdit * _self_) {
  return _self_->calendarWidget();
}

extern "C" void bg_QDateTimeEdit_setCalendarWidget_QCalendarWidget_X(QDateTimeEdit * _self_, QCalendarWidget * calendarWidget) {
  _self_->setCalendarWidget(calendarWidget);
}

extern "C" int bg_QDateTimeEdit_sectionCount_(QDateTimeEdit * _self_) {
  return _self_->sectionCount();
}

extern "C" void bg_QDateTimeEdit_setSelectedSection_QDateTimeEdit__Section(QDateTimeEdit * _self_, QDateTimeEdit::Section section) {
  _self_->setSelectedSection(section);
}

extern "C" CrystalString bg_QDateTimeEdit_sectionText_QDateTimeEdit__Section(QDateTimeEdit * _self_, QDateTimeEdit::Section section) {
  return qstring_to_crystal(_self_->sectionText(section));
}

extern "C" CrystalString bg_QDateTimeEdit_displayFormat_(QDateTimeEdit * _self_) {
  return qstring_to_crystal(_self_->displayFormat());
}

extern "C" void bg_QDateTimeEdit_setDisplayFormat_const_QString_R(QDateTimeEdit * _self_, const CrystalString format) {
  _self_->setDisplayFormat(QString::fromUtf8(format.ptr, format.size));
}

extern "C" bool bg_QDateTimeEdit_calendarPopup_(QDateTimeEdit * _self_) {
  return _self_->calendarPopup();
}

extern "C" void bg_QDateTimeEdit_setCalendarPopup_bool(QDateTimeEdit * _self_, bool enable) {
  _self_->setCalendarPopup(enable);
}

extern "C" Qt::TimeSpec bg_QDateTimeEdit_timeSpec_(QDateTimeEdit * _self_) {
  return _self_->timeSpec();
}

extern "C" void bg_QDateTimeEdit_setTimeSpec_Qt__TimeSpec(QDateTimeEdit * _self_, Qt::TimeSpec spec) {
  _self_->setTimeSpec(spec);
}

extern "C" QSize * bg_QDateTimeEdit_sizeHint_(QDateTimeEdit * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" void bg_QDateTimeEdit_clear_(QDateTimeEdit * _self_) {
  _self_->clear();
}

extern "C" void bg_QDateTimeEdit_stepBy_int(QDateTimeEdit * _self_, int steps) {
  _self_->stepBy(steps);
}

extern "C" bool bg_QDateTimeEdit_event_QEvent_X(QDateTimeEdit * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" void bg_QDateTimeEdit_dateTimeChanged_const_QDateTime_R(QDateTimeEdit * _self_, const QDateTime & dateTime) {
  _self_->dateTimeChanged(dateTime);
}

extern "C" void bg_QDateTimeEdit_timeChanged_const_QTime_R(QDateTimeEdit * _self_, const QTime & time) {
  _self_->timeChanged(time);
}

extern "C" void bg_QDateTimeEdit_dateChanged_const_QDate_R(QDateTimeEdit * _self_, const QDate & date) {
  _self_->dateChanged(date);
}

extern "C" void bg_QDateTimeEdit_setDateTime_const_QDateTime_R(QDateTimeEdit * _self_, const QDateTime & dateTime) {
  _self_->setDateTime(dateTime);
}

extern "C" void bg_QDateTimeEdit_setDate_const_QDate_R(QDateTimeEdit * _self_, const QDate & date) {
  _self_->setDate(date);
}

extern "C" void bg_QDateTimeEdit_setTime_const_QTime_R(QDateTimeEdit * _self_, const QTime & time) {
  _self_->setTime(time);
}

extern "C" void bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X(QDateTimeEdit * _self_, QKeyEvent * event) {
  _self_->keyPressEvent(event);
}

extern "C" void bg_QDateTimeEdit_wheelEvent_QWheelEvent_X(QDateTimeEdit * _self_, QWheelEvent * event) {
  _self_->wheelEvent(event);
}

extern "C" void bg_QDateTimeEdit_focusInEvent_QFocusEvent_X(QDateTimeEdit * _self_, QFocusEvent * event) {
  _self_->focusInEvent(event);
}

extern "C" bool bg_QDateTimeEdit_focusNextPrevChild_bool(QDateTimeEdit * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" QDateTime * bg_QDateTimeEdit_dateTimeFromText_const_QString_R(QDateTimeEdit * _self_, const CrystalString text) {
  return new (UseGC) QDateTime (_self_->dateTimeFromText(QString::fromUtf8(text.ptr, text.size)));
}

extern "C" CrystalString bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R(QDateTimeEdit * _self_, const QDateTime & dt) {
  return qstring_to_crystal(_self_->textFromDateTime(dt));
}

extern "C" QAbstractSpinBox::StepEnabled bg_QDateTimeEdit_stepEnabled_(QDateTimeEdit * _self_) {
  return _self_->stepEnabled();
}

extern "C" void bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X(QDateTimeEdit * _self_, QMouseEvent * event) {
  _self_->mousePressEvent(event);
}

extern "C" void bg_QDateTimeEdit_paintEvent_QPaintEvent_X(QDateTimeEdit * _self_, QPaintEvent * event) {
  _self_->paintEvent(event);
}

extern "C" void bg_QDateTimeEdit_initStyleOption_QStyleOptionSpinBox_X(QDateTimeEdit * _self_, QStyleOptionSpinBox * option) {
  _self_->initStyleOption(option);
}

extern "C" QDateTimeEdit * bg_QDateTimeEdit__CONSTRUCT_const_QVariant_R_QVariant__Type_QWidget_X(const CrystalVariant val, QVariant::Type parserType, QWidget * parent) {
  return new (UseGC) BgInherit_DateTimeEdit(crystal_to_qvariant(val), parserType, parent);
}

extern "C" QMetaObject::Connection * bg_QDateTimeEdit_CONNECT_dateTimeChanged_CrystalProc_void_const_QDateTime_R(QDateTimeEdit * _self_, CrystalProc<void, const QDateTime *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDateTimeEdit::*)(const QDateTime &))&QDateTimeEdit::dateTimeChanged, [_proc_](const QDateTime & dateTime){ _proc_(&(dateTime)); }));
}

extern "C" QMetaObject::Connection * bg_QDateTimeEdit_CONNECT_timeChanged_CrystalProc_void_const_QTime_R(QDateTimeEdit * _self_, CrystalProc<void, const QTime *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDateTimeEdit::*)(const QTime &))&QDateTimeEdit::timeChanged, [_proc_](const QTime & time){ _proc_(&(time)); }));
}

extern "C" QMetaObject::Connection * bg_QDateTimeEdit_CONNECT_dateChanged_CrystalProc_void_const_QDate_R(QDateTimeEdit * _self_, CrystalProc<void, const QDate *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDateTimeEdit::*)(const QDate &))&QDateTimeEdit::dateChanged, [_proc_](const QDate & date){ _proc_(&(date)); }));
}

extern "C" void bg_BgInherit_DateTimeEdit_JUMPTABLE_BgJumptable_DateTimeEdit_R(BgInherit_DateTimeEdit * _self_, const BgJumptable_DateTimeEdit & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_MenuBar {
  CrystalProc<const QMetaObject *> bg_QMenuBar_metaObject_;
  CrystalProc<void *, const char *> bg_QMenuBar_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QMenuBar_sizeHint_;
  CrystalProc<QSize &> bg_QMenuBar_minimumSizeHint_;
  CrystalProc<int, int> bg_QMenuBar_heightForWidth_int;
  CrystalProc<void, bool> bg_QMenuBar_setVisible_bool;
  CrystalProc<void, QEvent *> bg_QMenuBar_changeEvent_QEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QMenuBar_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QMenuBar_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QMenuBar_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QEvent *> bg_QMenuBar_leaveEvent_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QMenuBar_paintEvent_QPaintEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QMenuBar_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QActionEvent *> bg_QMenuBar_actionEvent_QActionEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QMenuBar_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QMenuBar_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QMenuBar_timerEvent_QTimerEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QMenuBar_eventFilter_QObject_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QMenuBar_event_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_MenuBar : public QMenuBar {
  using QMenuBar::QMenuBar;
  BgJumptable_MenuBar bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_metaObject_.isValid()) {
      return _self_->bgJump.bg_QMenuBar_metaObject_();
    } else {
      return QMenuBar::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QMenuBar_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QMenuBar::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QMenuBar::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QMenuBar_sizeHint_();
    } else {
      return QMenuBar::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QMenuBar_minimumSizeHint_();
    } else {
      return QMenuBar::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QMenuBar_heightForWidth_int(unnamed_arg_0);
    } else {
      return QMenuBar::heightForWidth(unnamed_arg_0);
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QMenuBar_setVisible_bool(visible);
    } else {
      QMenuBar::setVisible(visible);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::changeEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::leaveEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::paintEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::resizeEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::actionEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::focusInEvent(unnamed_arg_0);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QMenuBar_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::timerEvent(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QMenuBar_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QMenuBar::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QMenuBar_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QMenuBar_event_QEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::event(unnamed_arg_0);
    }
  }
  
  int devType() const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QMenuBar::devType();
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QMenuBar::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QMenuBar::paintEngine();
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::enterEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::moveEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::tabletEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QMenuBar::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QMenuBar::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QMenuBar::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QMenuBar::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QMenuBar::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QMenuBar::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_MenuBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QMenuBar::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QMenuBar_metaObject_(QMenuBar * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QMenuBar_qt_metacast_const_char_X(QMenuBar * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX(QMenuBar * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QMenuBar_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QMenuBar::tr(s));
}

extern "C" CrystalString bg_QMenuBar_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QMenuBar::tr(s, c));
}

extern "C" CrystalString bg_QMenuBar_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QMenuBar::tr(s, c, n));
}

extern "C" CrystalString bg_QMenuBar_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QMenuBar::trUtf8(s));
}

extern "C" CrystalString bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QMenuBar::trUtf8(s, c));
}

extern "C" CrystalString bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QMenuBar::trUtf8(s, c, n));
}

extern "C" QMenuBar * bg_QMenuBar__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_MenuBar(parent);
}

extern "C" QAction * bg_QMenuBar_addAction_const_QString_R(QMenuBar * _self_, const CrystalString text) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction * bg_QMenuBar_addAction_const_QString_R_const_QObject_X_const_char_X(QMenuBar * _self_, const CrystalString text, const QObject * receiver, const char * member) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size), receiver, member);
}

extern "C" QAction * bg_QMenuBar_addMenu_QMenu_X(QMenuBar * _self_, QMenu * menu) {
  return _self_->addMenu(menu);
}

extern "C" QMenu * bg_QMenuBar_addMenu_const_QString_R(QMenuBar * _self_, const CrystalString title) {
  return _self_->addMenu(QString::fromUtf8(title.ptr, title.size));
}

extern "C" QMenu * bg_QMenuBar_addMenu_const_QIcon_R_const_QString_R(QMenuBar * _self_, const QIcon & icon, const CrystalString title) {
  return _self_->addMenu(icon, QString::fromUtf8(title.ptr, title.size));
}

extern "C" QAction * bg_QMenuBar_addSeparator_(QMenuBar * _self_) {
  return _self_->addSeparator();
}

extern "C" QAction * bg_QMenuBar_insertSeparator_QAction_X(QMenuBar * _self_, QAction * before) {
  return _self_->insertSeparator(before);
}

extern "C" QAction * bg_QMenuBar_insertMenu_QAction_X_QMenu_X(QMenuBar * _self_, QAction * before, QMenu * menu) {
  return _self_->insertMenu(before, menu);
}

extern "C" void bg_QMenuBar_clear_(QMenuBar * _self_) {
  _self_->clear();
}

extern "C" QAction * bg_QMenuBar_activeAction_(QMenuBar * _self_) {
  return _self_->activeAction();
}

extern "C" void bg_QMenuBar_setActiveAction_QAction_X(QMenuBar * _self_, QAction * action) {
  _self_->setActiveAction(action);
}

extern "C" void bg_QMenuBar_setDefaultUp_bool(QMenuBar * _self_, bool unnamed_arg_0) {
  _self_->setDefaultUp(unnamed_arg_0);
}

extern "C" bool bg_QMenuBar_isDefaultUp_(QMenuBar * _self_) {
  return _self_->isDefaultUp();
}

extern "C" QSize * bg_QMenuBar_sizeHint_(QMenuBar * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QMenuBar_minimumSizeHint_(QMenuBar * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" int bg_QMenuBar_heightForWidth_int(QMenuBar * _self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" QRect * bg_QMenuBar_actionGeometry_QAction_X(QMenuBar * _self_, QAction * unnamed_arg_0) {
  return new (UseGC) QRect (_self_->actionGeometry(unnamed_arg_0));
}

extern "C" QAction * bg_QMenuBar_actionAt_const_QPoint_R(QMenuBar * _self_, const QPoint unnamed_arg_0) {
  return _self_->actionAt(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_setCornerWidget_QWidget_X_Qt__Corner(QMenuBar * _self_, QWidget * w, Qt::Corner corner) {
  _self_->setCornerWidget(w, corner);
}

extern "C" QWidget * bg_QMenuBar_cornerWidget_Qt__Corner(QMenuBar * _self_, Qt::Corner corner) {
  return _self_->cornerWidget(corner);
}

extern "C" bool bg_QMenuBar_isNativeMenuBar_(QMenuBar * _self_) {
  return _self_->isNativeMenuBar();
}

extern "C" void bg_QMenuBar_setNativeMenuBar_bool(QMenuBar * _self_, bool nativeMenuBar) {
  _self_->setNativeMenuBar(nativeMenuBar);
}

extern "C" QPlatformMenuBar * bg_QMenuBar_platformMenuBar_(QMenuBar * _self_) {
  return _self_->platformMenuBar();
}

extern "C" void bg_QMenuBar_setVisible_bool(QMenuBar * _self_, bool visible) {
  _self_->setVisible(visible);
}

extern "C" void bg_QMenuBar_triggered_QAction_X(QMenuBar * _self_, QAction * action) {
  _self_->triggered(action);
}

extern "C" void bg_QMenuBar_hovered_QAction_X(QMenuBar * _self_, QAction * action) {
  _self_->hovered(action);
}

extern "C" void bg_QMenuBar_changeEvent_QEvent_X(QMenuBar * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_keyPressEvent_QKeyEvent_X(QMenuBar * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(QMenuBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_mousePressEvent_QMouseEvent_X(QMenuBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(QMenuBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_leaveEvent_QEvent_X(QMenuBar * _self_, QEvent * unnamed_arg_0) {
  _self_->leaveEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_paintEvent_QPaintEvent_X(QMenuBar * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_resizeEvent_QResizeEvent_X(QMenuBar * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_actionEvent_QActionEvent_X(QMenuBar * _self_, QActionEvent * unnamed_arg_0) {
  _self_->actionEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_focusOutEvent_QFocusEvent_X(QMenuBar * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusOutEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_focusInEvent_QFocusEvent_X(QMenuBar * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusInEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_timerEvent_QTimerEvent_X(QMenuBar * _self_, QTimerEvent * unnamed_arg_0) {
  _self_->timerEvent(unnamed_arg_0);
}

extern "C" bool bg_QMenuBar_eventFilter_QObject_X_QEvent_X(QMenuBar * _self_, QObject * unnamed_arg_0, QEvent * unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QMenuBar_event_QEvent_X(QMenuBar * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(QMenuBar * _self_, QStyleOptionMenuItem * option, const QAction * action) {
  _self_->initStyleOption(option, action);
}

extern "C" QMetaObject::Connection * bg_QMenuBar_CONNECT_triggered_CrystalProc_void_QAction_X(QMenuBar * _self_, CrystalProc<void, QAction *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenuBar::*)(QAction *))&QMenuBar::triggered, [_proc_](QAction * action){ _proc_(action); }));
}

extern "C" QMetaObject::Connection * bg_QMenuBar_CONNECT_hovered_CrystalProc_void_QAction_X(QMenuBar * _self_, CrystalProc<void, QAction *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenuBar::*)(QAction *))&QMenuBar::hovered, [_proc_](QAction * action){ _proc_(action); }));
}

extern "C" void bg_BgInherit_MenuBar_JUMPTABLE_BgJumptable_MenuBar_R(BgInherit_MenuBar * _self_, const BgJumptable_MenuBar & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Menu {
  CrystalProc<const QMetaObject *> bg_QMenu_metaObject_;
  CrystalProc<void *, const char *> bg_QMenu_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QMenu_sizeHint_;
  CrystalProc<void, QEvent *> bg_QMenu_changeEvent_QEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QMenu_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QMenu_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QMenu_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QMenu_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QMenu_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QEvent *> bg_QMenu_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QMenu_leaveEvent_QEvent_X;
  CrystalProc<void, QHideEvent *> bg_QMenu_hideEvent_QHideEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QMenu_paintEvent_QPaintEvent_X;
  CrystalProc<void, QActionEvent *> bg_QMenu_actionEvent_QActionEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QMenu_timerEvent_QTimerEvent_X;
  CrystalProc<bool, QEvent *> bg_QMenu_event_QEvent_X;
  CrystalProc<bool, bool> bg_QMenu_focusNextPrevChild_bool;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
};
struct BgInherit_Menu : public QMenu {
  using QMenu::QMenu;
  BgJumptable_Menu bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_metaObject_.isValid()) {
      return _self_->bgJump.bg_QMenu_metaObject_();
    } else {
      return QMenu::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QMenu_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QMenu::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QMenu::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QMenu_sizeHint_();
    } else {
      return QMenu::sizeHint();
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMenu::changeEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QMenu::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMenu::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMenu::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMenu::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QMenu::wheelEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMenu::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMenu::leaveEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QMenu::hideEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QMenu::paintEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QMenu::actionEvent(unnamed_arg_0);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QMenu_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QMenu::timerEvent(unnamed_arg_0);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QMenu_event_QEvent_X(unnamed_arg_0);
    } else {
      return QMenu::event(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QMenu_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QMenu_focusNextPrevChild_bool(next);
    } else {
      return QMenu::focusNextPrevChild(next);
    }
  }
  
  int devType() const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QMenu::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QMenu::setVisible(visible);
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QMenu::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QMenu::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QMenu::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QMenu::paintEngine();
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMenu::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QMenu::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QMenu::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QMenu::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QMenu::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QMenu::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QMenu::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QMenu::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QMenu::tabletEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QMenu::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QMenu::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QMenu::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QMenu::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QMenu::showEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QMenu::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QMenu::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QMenu::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QMenu::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QMenu::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_Menu *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QMenu::inputMethodQuery(unnamed_arg_0);
    }
  }
  
};
extern "C" const QMetaObject * bg_QMenu_metaObject_(QMenu * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QMenu_qt_metacast_const_char_X(QMenu * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX(QMenu * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QMenu_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QMenu::tr(s));
}

extern "C" CrystalString bg_QMenu_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QMenu::tr(s, c));
}

extern "C" CrystalString bg_QMenu_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QMenu::tr(s, c, n));
}

extern "C" CrystalString bg_QMenu_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QMenu::trUtf8(s));
}

extern "C" CrystalString bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QMenu::trUtf8(s, c));
}

extern "C" CrystalString bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QMenu::trUtf8(s, c, n));
}

extern "C" QMenu * bg_QMenu__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_Menu(parent);
}

extern "C" QMenu * bg_QMenu__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString title, QWidget * parent) {
  return new (UseGC) BgInherit_Menu(QString::fromUtf8(title.ptr, title.size), parent);
}

extern "C" QAction * bg_QMenu_addAction_const_QString_R(QMenu * _self_, const CrystalString text) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction * bg_QMenu_addAction_const_QIcon_R_const_QString_R(QMenu * _self_, const QIcon & icon, const CrystalString text) {
  return _self_->addAction(icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction * bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X(QMenu * _self_, const CrystalString text, const QObject * receiver, const char * member) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size), receiver, member);
}

extern "C" QAction * bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(QMenu * _self_, const CrystalString text, const QObject * receiver, const char * member, const QKeySequence & shortcut) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size), receiver, member, shortcut);
}

extern "C" QAction * bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(QMenu * _self_, const QIcon & icon, const CrystalString text, const QObject * receiver, const char * member) {
  return _self_->addAction(icon, QString::fromUtf8(text.ptr, text.size), receiver, member);
}

extern "C" QAction * bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(QMenu * _self_, const QIcon & icon, const CrystalString text, const QObject * receiver, const char * member, const QKeySequence & shortcut) {
  return _self_->addAction(icon, QString::fromUtf8(text.ptr, text.size), receiver, member, shortcut);
}

extern "C" QAction * bg_QMenu_addMenu_QMenu_X(QMenu * _self_, QMenu * menu) {
  return _self_->addMenu(menu);
}

extern "C" QMenu * bg_QMenu_addMenu_const_QString_R(QMenu * _self_, const CrystalString title) {
  return _self_->addMenu(QString::fromUtf8(title.ptr, title.size));
}

extern "C" QMenu * bg_QMenu_addMenu_const_QIcon_R_const_QString_R(QMenu * _self_, const QIcon & icon, const CrystalString title) {
  return _self_->addMenu(icon, QString::fromUtf8(title.ptr, title.size));
}

extern "C" QAction * bg_QMenu_addSeparator_(QMenu * _self_) {
  return _self_->addSeparator();
}

extern "C" QAction * bg_QMenu_addSection_const_QString_R(QMenu * _self_, const CrystalString text) {
  return _self_->addSection(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction * bg_QMenu_addSection_const_QIcon_R_const_QString_R(QMenu * _self_, const QIcon & icon, const CrystalString text) {
  return _self_->addSection(icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction * bg_QMenu_insertMenu_QAction_X_QMenu_X(QMenu * _self_, QAction * before, QMenu * menu) {
  return _self_->insertMenu(before, menu);
}

extern "C" QAction * bg_QMenu_insertSeparator_QAction_X(QMenu * _self_, QAction * before) {
  return _self_->insertSeparator(before);
}

extern "C" QAction * bg_QMenu_insertSection_QAction_X_const_QString_R(QMenu * _self_, QAction * before, const CrystalString text) {
  return _self_->insertSection(before, QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction * bg_QMenu_insertSection_QAction_X_const_QIcon_R_const_QString_R(QMenu * _self_, QAction * before, const QIcon & icon, const CrystalString text) {
  return _self_->insertSection(before, icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" bool bg_QMenu_isEmpty_(QMenu * _self_) {
  return _self_->isEmpty();
}

extern "C" void bg_QMenu_clear_(QMenu * _self_) {
  _self_->clear();
}

extern "C" void bg_QMenu_setTearOffEnabled_bool(QMenu * _self_, bool unnamed_arg_0) {
  _self_->setTearOffEnabled(unnamed_arg_0);
}

extern "C" bool bg_QMenu_isTearOffEnabled_(QMenu * _self_) {
  return _self_->isTearOffEnabled();
}

extern "C" bool bg_QMenu_isTearOffMenuVisible_(QMenu * _self_) {
  return _self_->isTearOffMenuVisible();
}

extern "C" void bg_QMenu_hideTearOffMenu_(QMenu * _self_) {
  _self_->hideTearOffMenu();
}

extern "C" void bg_QMenu_setDefaultAction_QAction_X(QMenu * _self_, QAction * unnamed_arg_0) {
  _self_->setDefaultAction(unnamed_arg_0);
}

extern "C" QAction * bg_QMenu_defaultAction_(QMenu * _self_) {
  return _self_->defaultAction();
}

extern "C" void bg_QMenu_setActiveAction_QAction_X(QMenu * _self_, QAction * act) {
  _self_->setActiveAction(act);
}

extern "C" QAction * bg_QMenu_activeAction_(QMenu * _self_) {
  return _self_->activeAction();
}

extern "C" void bg_QMenu_popup_const_QPoint_R_QAction_X(QMenu * _self_, const QPoint pos, QAction * at) {
  _self_->popup(pos, at);
}

extern "C" QAction * bg_QMenu_exec_(QMenu * _self_) {
  return _self_->exec();
}

extern "C" QAction * bg_QMenu_exec_const_QPoint_R_QAction_X(QMenu * _self_, const QPoint pos, QAction * at) {
  return _self_->exec(pos, at);
}

extern "C" QAction * bg_QMenu_exec_STATIC_QList_QAction_X__const_QPoint_R_QAction_X_QWidget_X(Container_QList_QAction_X * actions, const QPoint pos, QAction * at, QWidget * parent) {
  return QMenu::exec(*(actions), pos, at, parent);
}

extern "C" QSize * bg_QMenu_sizeHint_(QMenu * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QRect * bg_QMenu_actionGeometry_QAction_X(QMenu * _self_, QAction * unnamed_arg_0) {
  return new (UseGC) QRect (_self_->actionGeometry(unnamed_arg_0));
}

extern "C" QAction * bg_QMenu_actionAt_const_QPoint_R(QMenu * _self_, const QPoint unnamed_arg_0) {
  return _self_->actionAt(unnamed_arg_0);
}

extern "C" QAction * bg_QMenu_menuAction_(QMenu * _self_) {
  return _self_->menuAction();
}

extern "C" CrystalString bg_QMenu_title_(QMenu * _self_) {
  return qstring_to_crystal(_self_->title());
}

extern "C" void bg_QMenu_setTitle_const_QString_R(QMenu * _self_, const CrystalString title) {
  _self_->setTitle(QString::fromUtf8(title.ptr, title.size));
}

extern "C" QIcon * bg_QMenu_icon_(QMenu * _self_) {
  return new (UseGC) QIcon (_self_->icon());
}

extern "C" void bg_QMenu_setIcon_const_QIcon_R(QMenu * _self_, const QIcon & icon) {
  _self_->setIcon(icon);
}

extern "C" void bg_QMenu_setNoReplayFor_QWidget_X(QMenu * _self_, QWidget * widget) {
  _self_->setNoReplayFor(widget);
}

extern "C" QPlatformMenu * bg_QMenu_platformMenu_(QMenu * _self_) {
  return _self_->platformMenu();
}

extern "C" void bg_QMenu_setPlatformMenu_QPlatformMenu_X(QMenu * _self_, QPlatformMenu * platformMenu) {
  _self_->setPlatformMenu(platformMenu);
}

extern "C" bool bg_QMenu_separatorsCollapsible_(QMenu * _self_) {
  return _self_->separatorsCollapsible();
}

extern "C" void bg_QMenu_setSeparatorsCollapsible_bool(QMenu * _self_, bool collapse) {
  _self_->setSeparatorsCollapsible(collapse);
}

extern "C" bool bg_QMenu_toolTipsVisible_(QMenu * _self_) {
  return _self_->toolTipsVisible();
}

extern "C" void bg_QMenu_setToolTipsVisible_bool(QMenu * _self_, bool visible) {
  _self_->setToolTipsVisible(visible);
}

extern "C" void bg_QMenu_aboutToShow_(QMenu * _self_) {
  _self_->aboutToShow();
}

extern "C" void bg_QMenu_aboutToHide_(QMenu * _self_) {
  _self_->aboutToHide();
}

extern "C" void bg_QMenu_triggered_QAction_X(QMenu * _self_, QAction * action) {
  _self_->triggered(action);
}

extern "C" void bg_QMenu_hovered_QAction_X(QMenu * _self_, QAction * action) {
  _self_->hovered(action);
}

extern "C" int bg_QMenu_columnCount_(QMenu * _self_) {
  return _self_->columnCount();
}

extern "C" void bg_QMenu_changeEvent_QEvent_X(QMenu * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_keyPressEvent_QKeyEvent_X(QMenu * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_mouseReleaseEvent_QMouseEvent_X(QMenu * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_mousePressEvent_QMouseEvent_X(QMenu * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_mouseMoveEvent_QMouseEvent_X(QMenu * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_wheelEvent_QWheelEvent_X(QMenu * _self_, QWheelEvent * unnamed_arg_0) {
  _self_->wheelEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_enterEvent_QEvent_X(QMenu * _self_, QEvent * unnamed_arg_0) {
  _self_->enterEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_leaveEvent_QEvent_X(QMenu * _self_, QEvent * unnamed_arg_0) {
  _self_->leaveEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_hideEvent_QHideEvent_X(QMenu * _self_, QHideEvent * unnamed_arg_0) {
  _self_->hideEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_paintEvent_QPaintEvent_X(QMenu * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_actionEvent_QActionEvent_X(QMenu * _self_, QActionEvent * unnamed_arg_0) {
  _self_->actionEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_timerEvent_QTimerEvent_X(QMenu * _self_, QTimerEvent * unnamed_arg_0) {
  _self_->timerEvent(unnamed_arg_0);
}

extern "C" bool bg_QMenu_event_QEvent_X(QMenu * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QMenu_focusNextPrevChild_bool(QMenu * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QMenu_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(QMenu * _self_, QStyleOptionMenuItem * option, const QAction * action) {
  _self_->initStyleOption(option, action);
}

extern "C" QMenu * bg_QMenu__CONSTRUCT_QMenuPrivate_R_QWidget_X(QMenuPrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_Menu(dd, parent);
}

extern "C" QMetaObject::Connection * bg_QMenu_CONNECT_aboutToShow_CrystalProc_void(QMenu * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenu::*)())&QMenu::aboutToShow, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QMenu_CONNECT_aboutToHide_CrystalProc_void(QMenu * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenu::*)())&QMenu::aboutToHide, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QMenu_CONNECT_triggered_CrystalProc_void_QAction_X(QMenu * _self_, CrystalProc<void, QAction *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenu::*)(QAction *))&QMenu::triggered, [_proc_](QAction * action){ _proc_(action); }));
}

extern "C" QMetaObject::Connection * bg_QMenu_CONNECT_hovered_CrystalProc_void_QAction_X(QMenu * _self_, CrystalProc<void, QAction *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenu::*)(QAction *))&QMenu::hovered, [_proc_](QAction * action){ _proc_(action); }));
}

extern "C" void bg_BgInherit_Menu_JUMPTABLE_BgJumptable_Menu_R(BgInherit_Menu * _self_, const BgJumptable_Menu & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Action {
  CrystalProc<const QMetaObject *> bg_QAction_metaObject_;
  CrystalProc<void *, const char *> bg_QAction_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QAction_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_Action : public QAction {
  using QAction::QAction;
  BgJumptable_Action bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QAction_metaObject_.isValid()) {
      return _self_->bgJump.bg_QAction_metaObject_();
    } else {
      return QAction::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QAction_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QAction_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAction::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QAction::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QAction_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAction_event_QEvent_X(unnamed_arg_0);
    } else {
      return QAction::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QAction::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QAction::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QAction::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QAction::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QAction::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Action *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QAction::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QAction_metaObject_(QAction * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QAction_qt_metacast_const_char_X(QAction * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX(QAction * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QAction_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAction::tr(s));
}

extern "C" CrystalString bg_QAction_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAction::tr(s, c));
}

extern "C" CrystalString bg_QAction_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAction::tr(s, c, n));
}

extern "C" CrystalString bg_QAction_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QAction::trUtf8(s));
}

extern "C" CrystalString bg_QAction_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QAction::trUtf8(s, c));
}

extern "C" CrystalString bg_QAction_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QAction::trUtf8(s, c, n));
}

extern "C" QAction * bg_QAction__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_Action(parent);
}

extern "C" QAction * bg_QAction__CONSTRUCT_const_QString_R_QObject_X(const CrystalString text, QObject * parent) {
  return new (UseGC) BgInherit_Action(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QAction * bg_QAction__CONSTRUCT_const_QIcon_R_const_QString_R_QObject_X(const QIcon & icon, const CrystalString text, QObject * parent) {
  return new (UseGC) BgInherit_Action(icon, QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" void bg_QAction_setActionGroup_QActionGroup_X(QAction * _self_, QActionGroup * group) {
  _self_->setActionGroup(group);
}

extern "C" QActionGroup * bg_QAction_actionGroup_(QAction * _self_) {
  return _self_->actionGroup();
}

extern "C" void bg_QAction_setIcon_const_QIcon_R(QAction * _self_, const QIcon & icon) {
  _self_->setIcon(icon);
}

extern "C" QIcon * bg_QAction_icon_(QAction * _self_) {
  return new (UseGC) QIcon (_self_->icon());
}

extern "C" void bg_QAction_setText_const_QString_R(QAction * _self_, const CrystalString text) {
  _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QAction_text_(QAction * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" void bg_QAction_setIconText_const_QString_R(QAction * _self_, const CrystalString text) {
  _self_->setIconText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QAction_iconText_(QAction * _self_) {
  return qstring_to_crystal(_self_->iconText());
}

extern "C" void bg_QAction_setToolTip_const_QString_R(QAction * _self_, const CrystalString tip) {
  _self_->setToolTip(QString::fromUtf8(tip.ptr, tip.size));
}

extern "C" CrystalString bg_QAction_toolTip_(QAction * _self_) {
  return qstring_to_crystal(_self_->toolTip());
}

extern "C" void bg_QAction_setStatusTip_const_QString_R(QAction * _self_, const CrystalString statusTip) {
  _self_->setStatusTip(QString::fromUtf8(statusTip.ptr, statusTip.size));
}

extern "C" CrystalString bg_QAction_statusTip_(QAction * _self_) {
  return qstring_to_crystal(_self_->statusTip());
}

extern "C" void bg_QAction_setWhatsThis_const_QString_R(QAction * _self_, const CrystalString what) {
  _self_->setWhatsThis(QString::fromUtf8(what.ptr, what.size));
}

extern "C" CrystalString bg_QAction_whatsThis_(QAction * _self_) {
  return qstring_to_crystal(_self_->whatsThis());
}

extern "C" void bg_QAction_setPriority_QAction__Priority(QAction * _self_, QAction::Priority priority) {
  _self_->setPriority(priority);
}

extern "C" QAction::Priority bg_QAction_priority_(QAction * _self_) {
  return _self_->priority();
}

extern "C" QMenu * bg_QAction_menu_(QAction * _self_) {
  return _self_->menu();
}

extern "C" void bg_QAction_setMenu_QMenu_X(QAction * _self_, QMenu * menu) {
  _self_->setMenu(menu);
}

extern "C" void bg_QAction_setSeparator_bool(QAction * _self_, bool b) {
  _self_->setSeparator(b);
}

extern "C" bool bg_QAction_isSeparator_(QAction * _self_) {
  return _self_->isSeparator();
}

extern "C" void bg_QAction_setShortcut_const_QKeySequence_R(QAction * _self_, const QKeySequence & shortcut) {
  _self_->setShortcut(shortcut);
}

extern "C" QKeySequence * bg_QAction_shortcut_(QAction * _self_) {
  return new (UseGC) QKeySequence (_self_->shortcut());
}

extern "C" void bg_QAction_setShortcuts_const_QList_QKeySequence__R(QAction * _self_, const Container_QList_QKeySequence * shortcuts) {
  _self_->setShortcuts(*(shortcuts));
}

extern "C" void bg_QAction_setShortcuts_QKeySequence__StandardKey(QAction * _self_, QKeySequence::StandardKey unnamed_arg_0) {
  _self_->setShortcuts(unnamed_arg_0);
}

extern "C" Container_QList_QKeySequence * bg_QAction_shortcuts_(QAction * _self_) {
  return new (UseGC) Container_QList_QKeySequence (_self_->shortcuts());
}

extern "C" void bg_QAction_setShortcutContext_Qt__ShortcutContext(QAction * _self_, Qt::ShortcutContext context) {
  _self_->setShortcutContext(context);
}

extern "C" Qt::ShortcutContext bg_QAction_shortcutContext_(QAction * _self_) {
  return _self_->shortcutContext();
}

extern "C" void bg_QAction_setAutoRepeat_bool(QAction * _self_, bool unnamed_arg_0) {
  _self_->setAutoRepeat(unnamed_arg_0);
}

extern "C" bool bg_QAction_autoRepeat_(QAction * _self_) {
  return _self_->autoRepeat();
}

extern "C" void bg_QAction_setFont_const_QFont_R(QAction * _self_, const QFont & font) {
  _self_->setFont(font);
}

extern "C" QFont * bg_QAction_font_(QAction * _self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QAction_setCheckable_bool(QAction * _self_, bool unnamed_arg_0) {
  _self_->setCheckable(unnamed_arg_0);
}

extern "C" bool bg_QAction_isCheckable_(QAction * _self_) {
  return _self_->isCheckable();
}

extern "C" CrystalVariant bg_QAction_data_(QAction * _self_) {
  return qvariant_to_crystal(_self_->data());
}

extern "C" void bg_QAction_setData_const_QVariant_R(QAction * _self_, const CrystalVariant var) {
  _self_->setData(crystal_to_qvariant(var));
}

extern "C" bool bg_QAction_isChecked_(QAction * _self_) {
  return _self_->isChecked();
}

extern "C" bool bg_QAction_isEnabled_(QAction * _self_) {
  return _self_->isEnabled();
}

extern "C" bool bg_QAction_isVisible_(QAction * _self_) {
  return _self_->isVisible();
}

extern "C" void bg_QAction_activate_QAction__ActionEvent(QAction * _self_, QAction::ActionEvent event) {
  _self_->activate(event);
}

extern "C" bool bg_QAction_showStatusText_QWidget_X(QAction * _self_, QWidget * widget) {
  return _self_->showStatusText(widget);
}

extern "C" void bg_QAction_setMenuRole_QAction__MenuRole(QAction * _self_, QAction::MenuRole menuRole) {
  _self_->setMenuRole(menuRole);
}

extern "C" QAction::MenuRole bg_QAction_menuRole_(QAction * _self_) {
  return _self_->menuRole();
}

extern "C" void bg_QAction_setIconVisibleInMenu_bool(QAction * _self_, bool visible) {
  _self_->setIconVisibleInMenu(visible);
}

extern "C" bool bg_QAction_isIconVisibleInMenu_(QAction * _self_) {
  return _self_->isIconVisibleInMenu();
}

extern "C" QWidget * bg_QAction_parentWidget_(QAction * _self_) {
  return _self_->parentWidget();
}

extern "C" Container_QList_QWidget_X * bg_QAction_associatedWidgets_(QAction * _self_) {
  return new (UseGC) Container_QList_QWidget_X (_self_->associatedWidgets());
}

extern "C" Container_QList_QGraphicsWidget_X * bg_QAction_associatedGraphicsWidgets_(QAction * _self_) {
  return new (UseGC) Container_QList_QGraphicsWidget_X (_self_->associatedGraphicsWidgets());
}

extern "C" bool bg_QAction_event_QEvent_X(QAction * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" QAction * bg_QAction__CONSTRUCT_QActionPrivate_R_QObject_X(QActionPrivate & dd, QObject * parent) {
  return new (UseGC) BgInherit_Action(dd, parent);
}

extern "C" void bg_QAction_trigger_(QAction * _self_) {
  _self_->trigger();
}

extern "C" void bg_QAction_hover_(QAction * _self_) {
  _self_->hover();
}

extern "C" void bg_QAction_setChecked_bool(QAction * _self_, bool unnamed_arg_0) {
  _self_->setChecked(unnamed_arg_0);
}

extern "C" void bg_QAction_toggle_(QAction * _self_) {
  _self_->toggle();
}

extern "C" void bg_QAction_setEnabled_bool(QAction * _self_, bool unnamed_arg_0) {
  _self_->setEnabled(unnamed_arg_0);
}

extern "C" void bg_QAction_setDisabled_bool(QAction * _self_, bool b) {
  _self_->setDisabled(b);
}

extern "C" void bg_QAction_setVisible_bool(QAction * _self_, bool unnamed_arg_0) {
  _self_->setVisible(unnamed_arg_0);
}

extern "C" void bg_QAction_changed_(QAction * _self_) {
  _self_->changed();
}

extern "C" void bg_QAction_triggered_bool(QAction * _self_, bool checked) {
  _self_->triggered(checked);
}

extern "C" void bg_QAction_hovered_(QAction * _self_) {
  _self_->hovered();
}

extern "C" void bg_QAction_toggled_bool(QAction * _self_, bool unnamed_arg_0) {
  _self_->toggled(unnamed_arg_0);
}

extern "C" QMetaObject::Connection * bg_QAction_CONNECT_changed_CrystalProc_void(QAction * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAction::*)())&QAction::changed, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QAction_CONNECT_triggered_CrystalProc_void_bool(QAction * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAction::*)(bool))&QAction::triggered, [_proc_](bool checked){ _proc_(checked); }));
}

extern "C" QMetaObject::Connection * bg_QAction_CONNECT_hovered_CrystalProc_void(QAction * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAction::*)())&QAction::hovered, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QAction_CONNECT_toggled_CrystalProc_void_bool(QAction * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAction::*)(bool))&QAction::toggled, [_proc_](bool unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" void bg_BgInherit_Action_JUMPTABLE_BgJumptable_Action_R(BgInherit_Action * _self_, const BgJumptable_Action & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_StatusBar {
  CrystalProc<const QMetaObject *> bg_QStatusBar_metaObject_;
  CrystalProc<void *, const char *> bg_QStatusBar_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QShowEvent *> bg_QStatusBar_showEvent_QShowEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QStatusBar_paintEvent_QPaintEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QStatusBar_resizeEvent_QResizeEvent_X;
  CrystalProc<bool, QEvent *> bg_QStatusBar_event_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<void, QEvent *> bg_QWidget_changeEvent_QEvent_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_StatusBar : public QStatusBar {
  using QStatusBar::QStatusBar;
  BgJumptable_StatusBar bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QStatusBar_metaObject_.isValid()) {
      return _self_->bgJump.bg_QStatusBar_metaObject_();
    } else {
      return QStatusBar::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QStatusBar_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QStatusBar_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QStatusBar::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QStatusBar::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QStatusBar_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QStatusBar_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::showEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QStatusBar_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QStatusBar_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::paintEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QStatusBar_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QStatusBar_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::resizeEvent(unnamed_arg_0);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QStatusBar_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QStatusBar_event_QEvent_X(unnamed_arg_0);
    } else {
      return QStatusBar::event(unnamed_arg_0);
    }
  }
  
  int devType() const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QStatusBar::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QStatusBar::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QStatusBar::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QStatusBar::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QStatusBar::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QStatusBar::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QStatusBar::paintEngine();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::moveEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::dropEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QStatusBar::nativeEvent(eventType, message, result);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::changeEvent(unnamed_arg_0);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QStatusBar::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QStatusBar::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QStatusBar::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QStatusBar::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QStatusBar::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_StatusBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QStatusBar::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QStatusBar_metaObject_(QStatusBar * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QStatusBar_qt_metacast_const_char_X(QStatusBar * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX(QStatusBar * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QStatusBar_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QStatusBar::tr(s));
}

extern "C" CrystalString bg_QStatusBar_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QStatusBar::tr(s, c));
}

extern "C" CrystalString bg_QStatusBar_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QStatusBar::tr(s, c, n));
}

extern "C" CrystalString bg_QStatusBar_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QStatusBar::trUtf8(s));
}

extern "C" CrystalString bg_QStatusBar_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QStatusBar::trUtf8(s, c));
}

extern "C" CrystalString bg_QStatusBar_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QStatusBar::trUtf8(s, c, n));
}

extern "C" QStatusBar * bg_QStatusBar__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_StatusBar(parent);
}

extern "C" void bg_QStatusBar_addWidget_QWidget_X_int(QStatusBar * _self_, QWidget * widget, int stretch) {
  _self_->addWidget(widget, stretch);
}

extern "C" int bg_QStatusBar_insertWidget_int_QWidget_X_int(QStatusBar * _self_, int index, QWidget * widget, int stretch) {
  return _self_->insertWidget(index, widget, stretch);
}

extern "C" void bg_QStatusBar_addPermanentWidget_QWidget_X_int(QStatusBar * _self_, QWidget * widget, int stretch) {
  _self_->addPermanentWidget(widget, stretch);
}

extern "C" int bg_QStatusBar_insertPermanentWidget_int_QWidget_X_int(QStatusBar * _self_, int index, QWidget * widget, int stretch) {
  return _self_->insertPermanentWidget(index, widget, stretch);
}

extern "C" void bg_QStatusBar_removeWidget_QWidget_X(QStatusBar * _self_, QWidget * widget) {
  _self_->removeWidget(widget);
}

extern "C" void bg_QStatusBar_setSizeGripEnabled_bool(QStatusBar * _self_, bool unnamed_arg_0) {
  _self_->setSizeGripEnabled(unnamed_arg_0);
}

extern "C" bool bg_QStatusBar_isSizeGripEnabled_(QStatusBar * _self_) {
  return _self_->isSizeGripEnabled();
}

extern "C" CrystalString bg_QStatusBar_currentMessage_(QStatusBar * _self_) {
  return qstring_to_crystal(_self_->currentMessage());
}

extern "C" void bg_QStatusBar_showMessage_const_QString_R_int(QStatusBar * _self_, const CrystalString text, int timeout) {
  _self_->showMessage(QString::fromUtf8(text.ptr, text.size), timeout);
}

extern "C" void bg_QStatusBar_clearMessage_(QStatusBar * _self_) {
  _self_->clearMessage();
}

extern "C" void bg_QStatusBar_messageChanged_const_QString_R(QStatusBar * _self_, const CrystalString text) {
  _self_->messageChanged(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QStatusBar_showEvent_QShowEvent_X(QStatusBar * _self_, QShowEvent * unnamed_arg_0) {
  _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QStatusBar_paintEvent_QPaintEvent_X(QStatusBar * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QStatusBar_resizeEvent_QResizeEvent_X(QStatusBar * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QStatusBar_reformat_(QStatusBar * _self_) {
  _self_->reformat();
}

extern "C" void bg_QStatusBar_hideOrShow_(QStatusBar * _self_) {
  _self_->hideOrShow();
}

extern "C" bool bg_QStatusBar_event_QEvent_X(QStatusBar * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" QMetaObject::Connection * bg_QStatusBar_CONNECT_messageChanged_CrystalProc_void_const_QString_R(QStatusBar * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QStatusBar::*)(const QString &))&QStatusBar::messageChanged, [_proc_](const QString & text){ _proc_(qstring_to_crystal(text)); }));
}

extern "C" void bg_BgInherit_StatusBar_JUMPTABLE_BgJumptable_StatusBar_R(BgInherit_StatusBar * _self_, const BgJumptable_StatusBar & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_MainWindow {
  CrystalProc<const QMetaObject *> bg_QMainWindow_metaObject_;
  CrystalProc<void *, const char *> bg_QMainWindow_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QMenu *> bg_QMainWindow_createPopupMenu_;
  CrystalProc<void, QContextMenuEvent *> bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<bool, QEvent *> bg_QMainWindow_event_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QWidget_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<void, QEvent *> bg_QWidget_changeEvent_QEvent_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_MainWindow : public QMainWindow {
  using QMainWindow::QMainWindow;
  BgJumptable_MainWindow bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QMainWindow_metaObject_.isValid()) {
      return _self_->bgJump.bg_QMainWindow_metaObject_();
    } else {
      return QMainWindow::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QMainWindow_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QMainWindow_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QMainWindow::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QMainWindow::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QMenu * createPopupMenu() override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QMainWindow_createPopupMenu_.isValid()) {
      return _self_->bgJump.bg_QMainWindow_createPopupMenu_();
    } else {
      return QMainWindow::createPopupMenu();
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * event) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      QMainWindow::contextMenuEvent(event);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QMainWindow_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QMainWindow_event_QEvent_X(event);
    } else {
      return QMainWindow::event(event);
    }
  }
  
  int devType() const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QMainWindow::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QMainWindow::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QMainWindow::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QMainWindow::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QMainWindow::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QMainWindow::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QMainWindow::paintEngine();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::leaveEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::paintEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::closeEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QMainWindow::nativeEvent(eventType, message, result);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::changeEvent(unnamed_arg_0);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QMainWindow::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QMainWindow::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QMainWindow::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QMainWindow::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QMainWindow::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_MainWindow *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QMainWindow::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QMainWindow_metaObject_(QMainWindow * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QMainWindow_qt_metacast_const_char_X(QMainWindow * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX(QMainWindow * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QMainWindow_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QMainWindow::tr(s));
}

extern "C" CrystalString bg_QMainWindow_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QMainWindow::tr(s, c));
}

extern "C" CrystalString bg_QMainWindow_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QMainWindow::tr(s, c, n));
}

extern "C" CrystalString bg_QMainWindow_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QMainWindow::trUtf8(s));
}

extern "C" CrystalString bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QMainWindow::trUtf8(s, c));
}

extern "C" CrystalString bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QMainWindow::trUtf8(s, c, n));
}

extern "C" QMainWindow * bg_QMainWindow__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_MainWindow(parent);
}

extern "C" QMainWindow * bg_QMainWindow__CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget * parent, Qt::WindowFlags flags) {
  return new (UseGC) BgInherit_MainWindow(parent, flags);
}

extern "C" QSize * bg_QMainWindow_iconSize_(QMainWindow * _self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" void bg_QMainWindow_setIconSize_const_QSize_R(QMainWindow * _self_, const QSize & iconSize) {
  _self_->setIconSize(iconSize);
}

extern "C" Qt::ToolButtonStyle bg_QMainWindow_toolButtonStyle_(QMainWindow * _self_) {
  return _self_->toolButtonStyle();
}

extern "C" void bg_QMainWindow_setToolButtonStyle_Qt__ToolButtonStyle(QMainWindow * _self_, Qt::ToolButtonStyle toolButtonStyle) {
  _self_->setToolButtonStyle(toolButtonStyle);
}

extern "C" bool bg_QMainWindow_isAnimated_(QMainWindow * _self_) {
  return _self_->isAnimated();
}

extern "C" bool bg_QMainWindow_isDockNestingEnabled_(QMainWindow * _self_) {
  return _self_->isDockNestingEnabled();
}

extern "C" bool bg_QMainWindow_documentMode_(QMainWindow * _self_) {
  return _self_->documentMode();
}

extern "C" void bg_QMainWindow_setDocumentMode_bool(QMainWindow * _self_, bool enabled) {
  _self_->setDocumentMode(enabled);
}

extern "C" QTabWidget::TabShape bg_QMainWindow_tabShape_(QMainWindow * _self_) {
  return _self_->tabShape();
}

extern "C" void bg_QMainWindow_setTabShape_QTabWidget__TabShape(QMainWindow * _self_, QTabWidget::TabShape tabShape) {
  _self_->setTabShape(tabShape);
}

extern "C" QTabWidget::TabPosition bg_QMainWindow_tabPosition_Qt__DockWidgetArea(QMainWindow * _self_, Qt::DockWidgetArea area) {
  return _self_->tabPosition(area);
}

extern "C" void bg_QMainWindow_setTabPosition_Qt__DockWidgetAreas_QTabWidget__TabPosition(QMainWindow * _self_, Qt::DockWidgetAreas areas, QTabWidget::TabPosition tabPosition) {
  _self_->setTabPosition(areas, tabPosition);
}

extern "C" void bg_QMainWindow_setDockOptions_QMainWindow__DockOptions(QMainWindow * _self_, QMainWindow::DockOptions options) {
  _self_->setDockOptions(options);
}

extern "C" QMainWindow::DockOptions bg_QMainWindow_dockOptions_(QMainWindow * _self_) {
  return _self_->dockOptions();
}

extern "C" bool bg_QMainWindow_isSeparator_const_QPoint_R(QMainWindow * _self_, const QPoint pos) {
  return _self_->isSeparator(pos);
}

extern "C" QMenuBar * bg_QMainWindow_menuBar_(QMainWindow * _self_) {
  return _self_->menuBar();
}

extern "C" void bg_QMainWindow_setMenuBar_QMenuBar_X(QMainWindow * _self_, QMenuBar * menubar) {
  _self_->setMenuBar(menubar);
}

extern "C" QWidget * bg_QMainWindow_menuWidget_(QMainWindow * _self_) {
  return _self_->menuWidget();
}

extern "C" void bg_QMainWindow_setMenuWidget_QWidget_X(QMainWindow * _self_, QWidget * menubar) {
  _self_->setMenuWidget(menubar);
}

extern "C" QStatusBar * bg_QMainWindow_statusBar_(QMainWindow * _self_) {
  return _self_->statusBar();
}

extern "C" void bg_QMainWindow_setStatusBar_QStatusBar_X(QMainWindow * _self_, QStatusBar * statusbar) {
  _self_->setStatusBar(statusbar);
}

extern "C" QWidget * bg_QMainWindow_centralWidget_(QMainWindow * _self_) {
  return _self_->centralWidget();
}

extern "C" void bg_QMainWindow_setCentralWidget_QWidget_X(QMainWindow * _self_, QWidget * widget) {
  _self_->setCentralWidget(widget);
}

extern "C" QWidget * bg_QMainWindow_takeCentralWidget_(QMainWindow * _self_) {
  return _self_->takeCentralWidget();
}

extern "C" void bg_QMainWindow_setCorner_Qt__Corner_Qt__DockWidgetArea(QMainWindow * _self_, Qt::Corner corner, Qt::DockWidgetArea area) {
  _self_->setCorner(corner, area);
}

extern "C" Qt::DockWidgetArea bg_QMainWindow_corner_Qt__Corner(QMainWindow * _self_, Qt::Corner corner) {
  return _self_->corner(corner);
}

extern "C" void bg_QMainWindow_addToolBarBreak_Qt__ToolBarArea(QMainWindow * _self_, Qt::ToolBarArea area) {
  _self_->addToolBarBreak(area);
}

extern "C" void bg_QMainWindow_insertToolBarBreak_QToolBar_X(QMainWindow * _self_, QToolBar * before) {
  _self_->insertToolBarBreak(before);
}

extern "C" void bg_QMainWindow_addToolBar_Qt__ToolBarArea_QToolBar_X(QMainWindow * _self_, Qt::ToolBarArea area, QToolBar * toolbar) {
  _self_->addToolBar(area, toolbar);
}

extern "C" void bg_QMainWindow_addToolBar_QToolBar_X(QMainWindow * _self_, QToolBar * toolbar) {
  _self_->addToolBar(toolbar);
}

extern "C" QToolBar * bg_QMainWindow_addToolBar_const_QString_R(QMainWindow * _self_, const CrystalString title) {
  return _self_->addToolBar(QString::fromUtf8(title.ptr, title.size));
}

extern "C" void bg_QMainWindow_insertToolBar_QToolBar_X_QToolBar_X(QMainWindow * _self_, QToolBar * before, QToolBar * toolbar) {
  _self_->insertToolBar(before, toolbar);
}

extern "C" void bg_QMainWindow_removeToolBar_QToolBar_X(QMainWindow * _self_, QToolBar * toolbar) {
  _self_->removeToolBar(toolbar);
}

extern "C" void bg_QMainWindow_removeToolBarBreak_QToolBar_X(QMainWindow * _self_, QToolBar * before) {
  _self_->removeToolBarBreak(before);
}

extern "C" bool bg_QMainWindow_unifiedTitleAndToolBarOnMac_(QMainWindow * _self_) {
  return _self_->unifiedTitleAndToolBarOnMac();
}

extern "C" Qt::ToolBarArea bg_QMainWindow_toolBarArea_QToolBar_X(QMainWindow * _self_, QToolBar * toolbar) {
  return _self_->toolBarArea(toolbar);
}

extern "C" bool bg_QMainWindow_toolBarBreak_QToolBar_X(QMainWindow * _self_, QToolBar * toolbar) {
  return _self_->toolBarBreak(toolbar);
}

extern "C" void bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X(QMainWindow * _self_, Qt::DockWidgetArea area, QDockWidget * dockwidget) {
  _self_->addDockWidget(area, dockwidget);
}

extern "C" void bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X_Qt__Orientation(QMainWindow * _self_, Qt::DockWidgetArea area, QDockWidget * dockwidget, Qt::Orientation orientation) {
  _self_->addDockWidget(area, dockwidget, orientation);
}

extern "C" void bg_QMainWindow_splitDockWidget_QDockWidget_X_QDockWidget_X_Qt__Orientation(QMainWindow * _self_, QDockWidget * after, QDockWidget * dockwidget, Qt::Orientation orientation) {
  _self_->splitDockWidget(after, dockwidget, orientation);
}

extern "C" void bg_QMainWindow_tabifyDockWidget_QDockWidget_X_QDockWidget_X(QMainWindow * _self_, QDockWidget * first, QDockWidget * second) {
  _self_->tabifyDockWidget(first, second);
}

extern "C" Container_QList_QDockWidget_X * bg_QMainWindow_tabifiedDockWidgets_QDockWidget_X(QMainWindow * _self_, QDockWidget * dockwidget) {
  return new (UseGC) Container_QList_QDockWidget_X (_self_->tabifiedDockWidgets(dockwidget));
}

extern "C" void bg_QMainWindow_removeDockWidget_QDockWidget_X(QMainWindow * _self_, QDockWidget * dockwidget) {
  _self_->removeDockWidget(dockwidget);
}

extern "C" bool bg_QMainWindow_restoreDockWidget_QDockWidget_X(QMainWindow * _self_, QDockWidget * dockwidget) {
  return _self_->restoreDockWidget(dockwidget);
}

extern "C" Qt::DockWidgetArea bg_QMainWindow_dockWidgetArea_QDockWidget_X(QMainWindow * _self_, QDockWidget * dockwidget) {
  return _self_->dockWidgetArea(dockwidget);
}

extern "C" void bg_QMainWindow_resizeDocks_const_QList_QDockWidget_X__R_const_QList_int__R_Qt__Orientation(QMainWindow * _self_, const Container_QList_QDockWidget_X * docks, const Container_QList_int * sizes, Qt::Orientation orientation) {
  _self_->resizeDocks(*(docks), *(sizes), orientation);
}

extern "C" QByteArray * bg_QMainWindow_saveState_int(QMainWindow * _self_, int version) {
  return new (UseGC) QByteArray (_self_->saveState(version));
}

extern "C" bool bg_QMainWindow_restoreState_const_QByteArray_R_int(QMainWindow * _self_, const QByteArray & state, int version) {
  return _self_->restoreState(state, version);
}

extern "C" QMenu * bg_QMainWindow_createPopupMenu_(QMainWindow * _self_) {
  return _self_->createPopupMenu();
}

extern "C" void bg_QMainWindow_setAnimated_bool(QMainWindow * _self_, bool enabled) {
  _self_->setAnimated(enabled);
}

extern "C" void bg_QMainWindow_setDockNestingEnabled_bool(QMainWindow * _self_, bool enabled) {
  _self_->setDockNestingEnabled(enabled);
}

extern "C" void bg_QMainWindow_setUnifiedTitleAndToolBarOnMac_bool(QMainWindow * _self_, bool set) {
  _self_->setUnifiedTitleAndToolBarOnMac(set);
}

extern "C" void bg_QMainWindow_iconSizeChanged_const_QSize_R(QMainWindow * _self_, const QSize & iconSize) {
  _self_->iconSizeChanged(iconSize);
}

extern "C" void bg_QMainWindow_toolButtonStyleChanged_Qt__ToolButtonStyle(QMainWindow * _self_, Qt::ToolButtonStyle toolButtonStyle) {
  _self_->toolButtonStyleChanged(toolButtonStyle);
}

extern "C" void bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(QMainWindow * _self_, QContextMenuEvent * event) {
  _self_->contextMenuEvent(event);
}

extern "C" bool bg_QMainWindow_event_QEvent_X(QMainWindow * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" QMetaObject::Connection * bg_QMainWindow_CONNECT_iconSizeChanged_CrystalProc_void_const_QSize_R(QMainWindow * _self_, CrystalProc<void, const QSize *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMainWindow::*)(const QSize &))&QMainWindow::iconSizeChanged, [_proc_](const QSize & iconSize){ _proc_(&(iconSize)); }));
}

extern "C" QMetaObject::Connection * bg_QMainWindow_CONNECT_toolButtonStyleChanged_CrystalProc_void_Qt__ToolButtonStyle(QMainWindow * _self_, CrystalProc<void, Qt::ToolButtonStyle> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMainWindow::*)(Qt::ToolButtonStyle))&QMainWindow::toolButtonStyleChanged, [_proc_](Qt::ToolButtonStyle toolButtonStyle){ _proc_(toolButtonStyle); }));
}

extern "C" void bg_BgInherit_MainWindow_JUMPTABLE_BgJumptable_MainWindow_R(BgInherit_MainWindow * _self_, const BgJumptable_MainWindow & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_DockWidget {
  CrystalProc<const QMetaObject *> bg_QDockWidget_metaObject_;
  CrystalProc<void *, const char *> bg_QDockWidget_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QEvent *> bg_QDockWidget_changeEvent_QEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QDockWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QDockWidget_paintEvent_QPaintEvent_X;
  CrystalProc<bool, QEvent *> bg_QDockWidget_event_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_DockWidget : public QDockWidget {
  using QDockWidget::QDockWidget;
  BgJumptable_DockWidget bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QDockWidget_metaObject_.isValid()) {
      return _self_->bgJump.bg_QDockWidget_metaObject_();
    } else {
      return QDockWidget::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QDockWidget_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QDockWidget_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QDockWidget::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QDockWidget::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void changeEvent(QEvent * event) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QDockWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QDockWidget_changeEvent_QEvent_X(event);
    } else {
      QDockWidget::changeEvent(event);
    }
  }
  
  void closeEvent(QCloseEvent * event) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QDockWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QDockWidget_closeEvent_QCloseEvent_X(event);
    } else {
      QDockWidget::closeEvent(event);
    }
  }
  
  void paintEvent(QPaintEvent * event) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QDockWidget_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QDockWidget_paintEvent_QPaintEvent_X(event);
    } else {
      QDockWidget::paintEvent(event);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QDockWidget_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QDockWidget_event_QEvent_X(event);
    } else {
      return QDockWidget::event(event);
    }
  }
  
  int devType() const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QDockWidget::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QDockWidget::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QDockWidget::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QDockWidget::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QDockWidget::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QDockWidget::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QDockWidget::paintEngine();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::resizeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QDockWidget::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QDockWidget::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QDockWidget::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QDockWidget::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QDockWidget::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QDockWidget::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_DockWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QDockWidget::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QDockWidget_metaObject_(QDockWidget * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QDockWidget_qt_metacast_const_char_X(QDockWidget * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX(QDockWidget * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QDockWidget_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDockWidget::tr(s));
}

extern "C" CrystalString bg_QDockWidget_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDockWidget::tr(s, c));
}

extern "C" CrystalString bg_QDockWidget_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDockWidget::tr(s, c, n));
}

extern "C" CrystalString bg_QDockWidget_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDockWidget::trUtf8(s));
}

extern "C" CrystalString bg_QDockWidget_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDockWidget::trUtf8(s, c));
}

extern "C" CrystalString bg_QDockWidget_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDockWidget::trUtf8(s, c, n));
}

extern "C" QDockWidget * bg_QDockWidget__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString title, QWidget * parent) {
  return new (UseGC) BgInherit_DockWidget(QString::fromUtf8(title.ptr, title.size), parent);
}

extern "C" QDockWidget * bg_QDockWidget__CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(const CrystalString title, QWidget * parent, Qt::WindowFlags flags) {
  return new (UseGC) BgInherit_DockWidget(QString::fromUtf8(title.ptr, title.size), parent, flags);
}

extern "C" QDockWidget * bg_QDockWidget__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_DockWidget(parent);
}

extern "C" QDockWidget * bg_QDockWidget__CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget * parent, Qt::WindowFlags flags) {
  return new (UseGC) BgInherit_DockWidget(parent, flags);
}

extern "C" QWidget * bg_QDockWidget_widget_(QDockWidget * _self_) {
  return _self_->widget();
}

extern "C" void bg_QDockWidget_setWidget_QWidget_X(QDockWidget * _self_, QWidget * widget) {
  _self_->setWidget(widget);
}

extern "C" void bg_QDockWidget_setFeatures_QDockWidget__DockWidgetFeatures(QDockWidget * _self_, QDockWidget::DockWidgetFeatures features) {
  _self_->setFeatures(features);
}

extern "C" QDockWidget::DockWidgetFeatures bg_QDockWidget_features_(QDockWidget * _self_) {
  return _self_->features();
}

extern "C" void bg_QDockWidget_setFloating_bool(QDockWidget * _self_, bool floating) {
  _self_->setFloating(floating);
}

extern "C" bool bg_QDockWidget_isFloating_(QDockWidget * _self_) {
  return _self_->isFloating();
}

extern "C" void bg_QDockWidget_setAllowedAreas_Qt__DockWidgetAreas(QDockWidget * _self_, Qt::DockWidgetAreas areas) {
  _self_->setAllowedAreas(areas);
}

extern "C" Qt::DockWidgetAreas bg_QDockWidget_allowedAreas_(QDockWidget * _self_) {
  return _self_->allowedAreas();
}

extern "C" void bg_QDockWidget_setTitleBarWidget_QWidget_X(QDockWidget * _self_, QWidget * widget) {
  _self_->setTitleBarWidget(widget);
}

extern "C" QWidget * bg_QDockWidget_titleBarWidget_(QDockWidget * _self_) {
  return _self_->titleBarWidget();
}

extern "C" bool bg_QDockWidget_isAreaAllowed_Qt__DockWidgetArea(QDockWidget * _self_, Qt::DockWidgetArea area) {
  return _self_->isAreaAllowed(area);
}

extern "C" QAction * bg_QDockWidget_toggleViewAction_(QDockWidget * _self_) {
  return _self_->toggleViewAction();
}

extern "C" void bg_QDockWidget_featuresChanged_QDockWidget__DockWidgetFeatures(QDockWidget * _self_, QDockWidget::DockWidgetFeatures features) {
  _self_->featuresChanged(features);
}

extern "C" void bg_QDockWidget_topLevelChanged_bool(QDockWidget * _self_, bool topLevel) {
  _self_->topLevelChanged(topLevel);
}

extern "C" void bg_QDockWidget_allowedAreasChanged_Qt__DockWidgetAreas(QDockWidget * _self_, Qt::DockWidgetAreas allowedAreas) {
  _self_->allowedAreasChanged(allowedAreas);
}

extern "C" void bg_QDockWidget_visibilityChanged_bool(QDockWidget * _self_, bool visible) {
  _self_->visibilityChanged(visible);
}

extern "C" void bg_QDockWidget_dockLocationChanged_Qt__DockWidgetArea(QDockWidget * _self_, Qt::DockWidgetArea area) {
  _self_->dockLocationChanged(area);
}

extern "C" void bg_QDockWidget_changeEvent_QEvent_X(QDockWidget * _self_, QEvent * event) {
  _self_->changeEvent(event);
}

extern "C" void bg_QDockWidget_closeEvent_QCloseEvent_X(QDockWidget * _self_, QCloseEvent * event) {
  _self_->closeEvent(event);
}

extern "C" void bg_QDockWidget_paintEvent_QPaintEvent_X(QDockWidget * _self_, QPaintEvent * event) {
  _self_->paintEvent(event);
}

extern "C" bool bg_QDockWidget_event_QEvent_X(QDockWidget * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" void bg_QDockWidget_initStyleOption_QStyleOptionDockWidget_X(QDockWidget * _self_, QStyleOptionDockWidget * option) {
  _self_->initStyleOption(option);
}

extern "C" QMetaObject::Connection * bg_QDockWidget_CONNECT_featuresChanged_CrystalProc_void_QDockWidget__DockWidgetFeatures(QDockWidget * _self_, CrystalProc<void, QDockWidget::DockWidgetFeatures> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDockWidget::*)(QDockWidget::DockWidgetFeatures))&QDockWidget::featuresChanged, [_proc_](QDockWidget::DockWidgetFeatures features){ _proc_(features); }));
}

extern "C" QMetaObject::Connection * bg_QDockWidget_CONNECT_topLevelChanged_CrystalProc_void_bool(QDockWidget * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDockWidget::*)(bool))&QDockWidget::topLevelChanged, [_proc_](bool topLevel){ _proc_(topLevel); }));
}

extern "C" QMetaObject::Connection * bg_QDockWidget_CONNECT_allowedAreasChanged_CrystalProc_void_Qt__DockWidgetAreas(QDockWidget * _self_, CrystalProc<void, Qt::DockWidgetAreas> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDockWidget::*)(Qt::DockWidgetAreas))&QDockWidget::allowedAreasChanged, [_proc_](Qt::DockWidgetAreas allowedAreas){ _proc_(allowedAreas); }));
}

extern "C" QMetaObject::Connection * bg_QDockWidget_CONNECT_visibilityChanged_CrystalProc_void_bool(QDockWidget * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDockWidget::*)(bool))&QDockWidget::visibilityChanged, [_proc_](bool visible){ _proc_(visible); }));
}

extern "C" QMetaObject::Connection * bg_QDockWidget_CONNECT_dockLocationChanged_CrystalProc_void_Qt__DockWidgetArea(QDockWidget * _self_, CrystalProc<void, Qt::DockWidgetArea> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDockWidget::*)(Qt::DockWidgetArea))&QDockWidget::dockLocationChanged, [_proc_](Qt::DockWidgetArea area){ _proc_(area); }));
}

extern "C" void bg_BgInherit_DockWidget_JUMPTABLE_BgJumptable_DockWidget_R(BgInherit_DockWidget * _self_, const BgJumptable_DockWidget & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Dialog {
  CrystalProc<const QMetaObject *> bg_QDialog_metaObject_;
  CrystalProc<void *, const char *> bg_QDialog_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, bool> bg_QDialog_setVisible_bool;
  CrystalProc<QSize &> bg_QDialog_sizeHint_;
  CrystalProc<QSize &> bg_QDialog_minimumSizeHint_;
  CrystalProc<void> bg_QDialog_open_;
  CrystalProc<int> bg_QDialog_exec_;
  CrystalProc<void, int> bg_QDialog_done_int;
  CrystalProc<void> bg_QDialog_accept_;
  CrystalProc<void> bg_QDialog_reject_;
  CrystalProc<void, QKeyEvent *> bg_QDialog_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QDialog_closeEvent_QCloseEvent_X;
  CrystalProc<void, QShowEvent *> bg_QDialog_showEvent_QShowEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QDialog_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QDialog_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QDialog_eventFilter_QObject_X_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<bool, QEvent *> bg_QWidget_event_QEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QWidget_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<void, QEvent *> bg_QWidget_changeEvent_QEvent_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_Dialog : public QDialog {
  using QDialog::QDialog;
  BgJumptable_Dialog bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_metaObject_.isValid()) {
      return _self_->bgJump.bg_QDialog_metaObject_();
    } else {
      return QDialog::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QDialog_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QDialog::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QDialog::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QDialog_setVisible_bool(visible);
    } else {
      QDialog::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QDialog_sizeHint_();
    } else {
      return QDialog::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QDialog_minimumSizeHint_();
    } else {
      return QDialog::minimumSizeHint();
    }
  }
  
  void open() override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_open_.isValid()) {
      _self_->bgJump.bg_QDialog_open_();
    } else {
      QDialog::open();
    }
  }
  
  int exec() override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_exec_.isValid()) {
      return _self_->bgJump.bg_QDialog_exec_();
    } else {
      return QDialog::exec();
    }
  }
  
  void done(int unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_done_int.isValid()) {
      _self_->bgJump.bg_QDialog_done_int(unnamed_arg_0);
    } else {
      QDialog::done(unnamed_arg_0);
    }
  }
  
  void accept() override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_accept_.isValid()) {
      _self_->bgJump.bg_QDialog_accept_();
    } else {
      QDialog::accept();
    }
  }
  
  void reject() override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_reject_.isValid()) {
      _self_->bgJump.bg_QDialog_reject_();
    } else {
      QDialog::reject();
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QDialog::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QDialog::closeEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QDialog::showEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QDialog::resizeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QDialog::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QDialog_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QDialog::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  int devType() const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QDialog::devType();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QDialog::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QDialog::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QDialog::paintEngine();
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QWidget_event_QEvent_X(unnamed_arg_0);
    } else {
      return QDialog::event(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDialog::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDialog::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDialog::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDialog::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QDialog::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QDialog::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QDialog::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QDialog::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDialog::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDialog::leaveEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QDialog::paintEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QDialog::moveEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QDialog::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QDialog::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QDialog::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QDialog::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QDialog::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QDialog::dropEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QDialog::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QDialog::nativeEvent(eventType, message, result);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDialog::changeEvent(unnamed_arg_0);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QDialog::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QDialog::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QDialog::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QDialog::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QDialog::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_Dialog *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QDialog::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QDialog_metaObject_(QDialog * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QDialog_qt_metacast_const_char_X(QDialog * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX(QDialog * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QDialog_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDialog::tr(s));
}

extern "C" CrystalString bg_QDialog_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDialog::tr(s, c));
}

extern "C" CrystalString bg_QDialog_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDialog::tr(s, c, n));
}

extern "C" CrystalString bg_QDialog_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDialog::trUtf8(s));
}

extern "C" CrystalString bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDialog::trUtf8(s, c));
}

extern "C" CrystalString bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDialog::trUtf8(s, c, n));
}

extern "C" QDialog * bg_QDialog__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_Dialog(parent);
}

extern "C" QDialog * bg_QDialog__CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_Dialog(parent, f);
}

extern "C" int bg_QDialog_result_(QDialog * _self_) {
  return _self_->result();
}

extern "C" void bg_QDialog_setVisible_bool(QDialog * _self_, bool visible) {
  _self_->setVisible(visible);
}

extern "C" void bg_QDialog_setOrientation_Qt__Orientation(QDialog * _self_, Qt::Orientation orientation) {
  _self_->setOrientation(orientation);
}

extern "C" Qt::Orientation bg_QDialog_orientation_(QDialog * _self_) {
  return _self_->orientation();
}

extern "C" void bg_QDialog_setExtension_QWidget_X(QDialog * _self_, QWidget * extension) {
  _self_->setExtension(extension);
}

extern "C" QWidget * bg_QDialog_extension_(QDialog * _self_) {
  return _self_->extension();
}

extern "C" QSize * bg_QDialog_sizeHint_(QDialog * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QDialog_minimumSizeHint_(QDialog * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QDialog_setSizeGripEnabled_bool(QDialog * _self_, bool unnamed_arg_0) {
  _self_->setSizeGripEnabled(unnamed_arg_0);
}

extern "C" bool bg_QDialog_isSizeGripEnabled_(QDialog * _self_) {
  return _self_->isSizeGripEnabled();
}

extern "C" void bg_QDialog_setModal_bool(QDialog * _self_, bool modal) {
  _self_->setModal(modal);
}

extern "C" void bg_QDialog_setResult_int(QDialog * _self_, int r) {
  _self_->setResult(r);
}

extern "C" void bg_QDialog_finished_int(QDialog * _self_, int result) {
  _self_->finished(result);
}

extern "C" void bg_QDialog_accepted_(QDialog * _self_) {
  _self_->accepted();
}

extern "C" void bg_QDialog_rejected_(QDialog * _self_) {
  _self_->rejected();
}

extern "C" void bg_QDialog_open_(QDialog * _self_) {
  _self_->open();
}

extern "C" int bg_QDialog_exec_(QDialog * _self_) {
  return _self_->exec();
}

extern "C" void bg_QDialog_done_int(QDialog * _self_, int unnamed_arg_0) {
  _self_->done(unnamed_arg_0);
}

extern "C" void bg_QDialog_accept_(QDialog * _self_) {
  _self_->accept();
}

extern "C" void bg_QDialog_reject_(QDialog * _self_) {
  _self_->reject();
}

extern "C" void bg_QDialog_showExtension_bool(QDialog * _self_, bool unnamed_arg_0) {
  _self_->showExtension(unnamed_arg_0);
}

extern "C" QDialog * bg_QDialog__CONSTRUCT_QDialogPrivate_R_QWidget_X(QDialogPrivate & unnamed_arg_0, QWidget * parent) {
  return new (UseGC) BgInherit_Dialog(unnamed_arg_0, parent);
}

extern "C" QDialog * bg_QDialog__CONSTRUCT_QDialogPrivate_R_QWidget_X_Qt__WindowFlags(QDialogPrivate & unnamed_arg_0, QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_Dialog(unnamed_arg_0, parent, f);
}

extern "C" void bg_QDialog_keyPressEvent_QKeyEvent_X(QDialog * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QDialog_closeEvent_QCloseEvent_X(QDialog * _self_, QCloseEvent * unnamed_arg_0) {
  _self_->closeEvent(unnamed_arg_0);
}

extern "C" void bg_QDialog_showEvent_QShowEvent_X(QDialog * _self_, QShowEvent * unnamed_arg_0) {
  _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QDialog_resizeEvent_QResizeEvent_X(QDialog * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QDialog_contextMenuEvent_QContextMenuEvent_X(QDialog * _self_, QContextMenuEvent * unnamed_arg_0) {
  _self_->contextMenuEvent(unnamed_arg_0);
}

extern "C" bool bg_QDialog_eventFilter_QObject_X_QEvent_X(QDialog * _self_, QObject * unnamed_arg_0, QEvent * unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QDialog_adjustPosition_QWidget_X(QDialog * _self_, QWidget * unnamed_arg_0) {
  _self_->adjustPosition(unnamed_arg_0);
}

extern "C" QMetaObject::Connection * bg_QDialog_CONNECT_finished_CrystalProc_void_int(QDialog * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDialog::*)(int))&QDialog::finished, [_proc_](int result){ _proc_(result); }));
}

extern "C" QMetaObject::Connection * bg_QDialog_CONNECT_accepted_CrystalProc_void(QDialog * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDialog::*)())&QDialog::accepted, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QDialog_CONNECT_rejected_CrystalProc_void(QDialog * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDialog::*)())&QDialog::rejected, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_Dialog_JUMPTABLE_BgJumptable_Dialog_R(BgInherit_Dialog * _self_, const BgJumptable_Dialog & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Label {
  CrystalProc<const QMetaObject *> bg_QLabel_metaObject_;
  CrystalProc<void *, const char *> bg_QLabel_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QLabel_sizeHint_;
  CrystalProc<QSize &> bg_QLabel_minimumSizeHint_;
  CrystalProc<int, int> bg_QLabel_heightForWidth_int;
  CrystalProc<bool, QEvent *> bg_QLabel_event_QEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QLabel_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QLabel_paintEvent_QPaintEvent_X;
  CrystalProc<void, QEvent *> bg_QLabel_changeEvent_QEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QLabel_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QLabel_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QLabel_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QLabel_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QLabel_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QLabel_focusOutEvent_QFocusEvent_X;
  CrystalProc<bool, bool> bg_QLabel_focusNextPrevChild_bool;
};
struct BgInherit_Label : public QLabel {
  using QLabel::QLabel;
  BgJumptable_Label bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_metaObject_.isValid()) {
      return _self_->bgJump.bg_QLabel_metaObject_();
    } else {
      return QLabel::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QLabel_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QLabel::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QLabel::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QLabel_sizeHint_();
    } else {
      return QLabel::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QLabel_minimumSizeHint_();
    } else {
      return QLabel::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QLabel_heightForWidth_int(unnamed_arg_0);
    } else {
      return QLabel::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QLabel_event_QEvent_X(e);
    } else {
      return QLabel::event(e);
    }
  }
  
  void keyPressEvent(QKeyEvent * ev) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_keyPressEvent_QKeyEvent_X(ev);
    } else {
      QLabel::keyPressEvent(ev);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QLabel::paintEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QLabel::changeEvent(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * ev) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_mousePressEvent_QMouseEvent_X(ev);
    } else {
      QLabel::mousePressEvent(ev);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * ev) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_mouseMoveEvent_QMouseEvent_X(ev);
    } else {
      QLabel::mouseMoveEvent(ev);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * ev) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_mouseReleaseEvent_QMouseEvent_X(ev);
    } else {
      QLabel::mouseReleaseEvent(ev);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * ev) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_contextMenuEvent_QContextMenuEvent_X(ev);
    } else {
      QLabel::contextMenuEvent(ev);
    }
  }
  
  void focusInEvent(QFocusEvent * ev) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_focusInEvent_QFocusEvent_X(ev);
    } else {
      QLabel::focusInEvent(ev);
    }
  }
  
  void focusOutEvent(QFocusEvent * ev) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QLabel_focusOutEvent_QFocusEvent_X(ev);
    } else {
      QLabel::focusOutEvent(ev);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_Label *_self_ = this;
    if (_self_->bgJump.bg_QLabel_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QLabel_focusNextPrevChild_bool(next);
    } else {
      return QLabel::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QLabel_metaObject_(QLabel * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QLabel_qt_metacast_const_char_X(QLabel * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX(QLabel * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QLabel_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QLabel::tr(s));
}

extern "C" CrystalString bg_QLabel_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QLabel::tr(s, c));
}

extern "C" CrystalString bg_QLabel_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QLabel::tr(s, c, n));
}

extern "C" CrystalString bg_QLabel_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QLabel::trUtf8(s));
}

extern "C" CrystalString bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QLabel::trUtf8(s, c));
}

extern "C" CrystalString bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QLabel::trUtf8(s, c, n));
}

extern "C" QLabel * bg_QLabel__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_Label(parent);
}

extern "C" QLabel * bg_QLabel__CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_Label(parent, f);
}

extern "C" QLabel * bg_QLabel__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget * parent) {
  return new (UseGC) BgInherit_Label(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QLabel * bg_QLabel__CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(const CrystalString text, QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_Label(QString::fromUtf8(text.ptr, text.size), parent, f);
}

extern "C" CrystalString bg_QLabel_text_(QLabel * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" const QPixmap * bg_QLabel_pixmap_(QLabel * _self_) {
  return _self_->pixmap();
}

extern "C" const QPicture * bg_QLabel_picture_(QLabel * _self_) {
  return _self_->picture();
}

extern "C" QMovie * bg_QLabel_movie_(QLabel * _self_) {
  return _self_->movie();
}

extern "C" Qt::TextFormat bg_QLabel_textFormat_(QLabel * _self_) {
  return _self_->textFormat();
}

extern "C" void bg_QLabel_setTextFormat_Qt__TextFormat(QLabel * _self_, Qt::TextFormat unnamed_arg_0) {
  _self_->setTextFormat(unnamed_arg_0);
}

extern "C" Qt::Alignment bg_QLabel_alignment_(QLabel * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QLabel_setAlignment_Qt__Alignment(QLabel * _self_, Qt::Alignment unnamed_arg_0) {
  _self_->setAlignment(unnamed_arg_0);
}

extern "C" void bg_QLabel_setWordWrap_bool(QLabel * _self_, bool on) {
  _self_->setWordWrap(on);
}

extern "C" bool bg_QLabel_wordWrap_(QLabel * _self_) {
  return _self_->wordWrap();
}

extern "C" int bg_QLabel_indent_(QLabel * _self_) {
  return _self_->indent();
}

extern "C" void bg_QLabel_setIndent_int(QLabel * _self_, int unnamed_arg_0) {
  _self_->setIndent(unnamed_arg_0);
}

extern "C" int bg_QLabel_margin_(QLabel * _self_) {
  return _self_->margin();
}

extern "C" void bg_QLabel_setMargin_int(QLabel * _self_, int unnamed_arg_0) {
  _self_->setMargin(unnamed_arg_0);
}

extern "C" bool bg_QLabel_hasScaledContents_(QLabel * _self_) {
  return _self_->hasScaledContents();
}

extern "C" void bg_QLabel_setScaledContents_bool(QLabel * _self_, bool unnamed_arg_0) {
  _self_->setScaledContents(unnamed_arg_0);
}

extern "C" QSize * bg_QLabel_sizeHint_(QLabel * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QLabel_minimumSizeHint_(QLabel * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QLabel_setBuddy_QWidget_X(QLabel * _self_, QWidget * unnamed_arg_0) {
  _self_->setBuddy(unnamed_arg_0);
}

extern "C" QWidget * bg_QLabel_buddy_(QLabel * _self_) {
  return _self_->buddy();
}

extern "C" int bg_QLabel_heightForWidth_int(QLabel * _self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" bool bg_QLabel_openExternalLinks_(QLabel * _self_) {
  return _self_->openExternalLinks();
}

extern "C" void bg_QLabel_setOpenExternalLinks_bool(QLabel * _self_, bool open) {
  _self_->setOpenExternalLinks(open);
}

extern "C" void bg_QLabel_setTextInteractionFlags_Qt__TextInteractionFlags(QLabel * _self_, Qt::TextInteractionFlags flags) {
  _self_->setTextInteractionFlags(flags);
}

extern "C" Qt::TextInteractionFlags bg_QLabel_textInteractionFlags_(QLabel * _self_) {
  return _self_->textInteractionFlags();
}

extern "C" void bg_QLabel_setSelection_int_int(QLabel * _self_, int unnamed_arg_0, int unnamed_arg_1) {
  _self_->setSelection(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QLabel_hasSelectedText_(QLabel * _self_) {
  return _self_->hasSelectedText();
}

extern "C" CrystalString bg_QLabel_selectedText_(QLabel * _self_) {
  return qstring_to_crystal(_self_->selectedText());
}

extern "C" int bg_QLabel_selectionStart_(QLabel * _self_) {
  return _self_->selectionStart();
}

extern "C" void bg_QLabel_setText_const_QString_R(QLabel * _self_, const CrystalString unnamed_arg_0) {
  _self_->setText(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QLabel_setPixmap_const_QPixmap_R(QLabel * _self_, const QPixmap & unnamed_arg_0) {
  _self_->setPixmap(unnamed_arg_0);
}

extern "C" void bg_QLabel_setPicture_const_QPicture_R(QLabel * _self_, const QPicture & unnamed_arg_0) {
  _self_->setPicture(unnamed_arg_0);
}

extern "C" void bg_QLabel_setMovie_QMovie_X(QLabel * _self_, QMovie * movie) {
  _self_->setMovie(movie);
}

extern "C" void bg_QLabel_setNum_int(QLabel * _self_, int unnamed_arg_0) {
  _self_->setNum(unnamed_arg_0);
}

extern "C" void bg_QLabel_setNum_double(QLabel * _self_, double unnamed_arg_0) {
  _self_->setNum(unnamed_arg_0);
}

extern "C" void bg_QLabel_clear_(QLabel * _self_) {
  _self_->clear();
}

extern "C" void bg_QLabel_linkActivated_const_QString_R(QLabel * _self_, const CrystalString link) {
  _self_->linkActivated(QString::fromUtf8(link.ptr, link.size));
}

extern "C" void bg_QLabel_linkHovered_const_QString_R(QLabel * _self_, const CrystalString link) {
  _self_->linkHovered(QString::fromUtf8(link.ptr, link.size));
}

extern "C" bool bg_QLabel_event_QEvent_X(QLabel * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QLabel_keyPressEvent_QKeyEvent_X(QLabel * _self_, QKeyEvent * ev) {
  _self_->keyPressEvent(ev);
}

extern "C" void bg_QLabel_paintEvent_QPaintEvent_X(QLabel * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QLabel_changeEvent_QEvent_X(QLabel * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QLabel_mousePressEvent_QMouseEvent_X(QLabel * _self_, QMouseEvent * ev) {
  _self_->mousePressEvent(ev);
}

extern "C" void bg_QLabel_mouseMoveEvent_QMouseEvent_X(QLabel * _self_, QMouseEvent * ev) {
  _self_->mouseMoveEvent(ev);
}

extern "C" void bg_QLabel_mouseReleaseEvent_QMouseEvent_X(QLabel * _self_, QMouseEvent * ev) {
  _self_->mouseReleaseEvent(ev);
}

extern "C" void bg_QLabel_contextMenuEvent_QContextMenuEvent_X(QLabel * _self_, QContextMenuEvent * ev) {
  _self_->contextMenuEvent(ev);
}

extern "C" void bg_QLabel_focusInEvent_QFocusEvent_X(QLabel * _self_, QFocusEvent * ev) {
  _self_->focusInEvent(ev);
}

extern "C" void bg_QLabel_focusOutEvent_QFocusEvent_X(QLabel * _self_, QFocusEvent * ev) {
  _self_->focusOutEvent(ev);
}

extern "C" bool bg_QLabel_focusNextPrevChild_bool(QLabel * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" QMetaObject::Connection * bg_QLabel_CONNECT_linkActivated_CrystalProc_void_const_QString_R(QLabel * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLabel::*)(const QString &))&QLabel::linkActivated, [_proc_](const QString & link){ _proc_(qstring_to_crystal(link)); }));
}

extern "C" QMetaObject::Connection * bg_QLabel_CONNECT_linkHovered_CrystalProc_void_const_QString_R(QLabel * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLabel::*)(const QString &))&QLabel::linkHovered, [_proc_](const QString & link){ _proc_(qstring_to_crystal(link)); }));
}

extern "C" void bg_BgInherit_Label_JUMPTABLE_BgJumptable_Label_R(BgInherit_Label * _self_, const BgJumptable_Label & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_LcdNumber {
  CrystalProc<const QMetaObject *> bg_QLCDNumber_metaObject_;
  CrystalProc<void *, const char *> bg_QLCDNumber_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QLCDNumber_sizeHint_;
  CrystalProc<bool, QEvent *> bg_QLCDNumber_event_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QLCDNumber_paintEvent_QPaintEvent_X;
  CrystalProc<void, QEvent *> bg_QFrame_changeEvent_QEvent_X;
};
struct BgInherit_LcdNumber : public QLCDNumber {
  using QLCDNumber::QLCDNumber;
  BgJumptable_LcdNumber bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_LcdNumber *_self_ = this;
    if (_self_->bgJump.bg_QLCDNumber_metaObject_.isValid()) {
      return _self_->bgJump.bg_QLCDNumber_metaObject_();
    } else {
      return QLCDNumber::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_LcdNumber *_self_ = this;
    if (_self_->bgJump.bg_QLCDNumber_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QLCDNumber_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QLCDNumber::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_LcdNumber *_self_ = this;
    if (_self_->bgJump.bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QLCDNumber::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_LcdNumber *_self_ = this;
    if (_self_->bgJump.bg_QLCDNumber_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QLCDNumber_sizeHint_();
    } else {
      return QLCDNumber::sizeHint();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_LcdNumber *_self_ = this;
    if (_self_->bgJump.bg_QLCDNumber_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QLCDNumber_event_QEvent_X(e);
    } else {
      return QLCDNumber::event(e);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_LcdNumber *_self_ = this;
    if (_self_->bgJump.bg_QLCDNumber_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QLCDNumber_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QLCDNumber::paintEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_LcdNumber *_self_ = this;
    if (_self_->bgJump.bg_QFrame_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QFrame_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QLCDNumber::changeEvent(unnamed_arg_0);
    }
  }
  
};
extern "C" const QMetaObject * bg_QLCDNumber_metaObject_(QLCDNumber * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QLCDNumber_qt_metacast_const_char_X(QLCDNumber * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX(QLCDNumber * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QLCDNumber_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QLCDNumber::tr(s));
}

extern "C" CrystalString bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QLCDNumber::tr(s, c));
}

extern "C" CrystalString bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QLCDNumber::tr(s, c, n));
}

extern "C" CrystalString bg_QLCDNumber_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QLCDNumber::trUtf8(s));
}

extern "C" CrystalString bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QLCDNumber::trUtf8(s, c));
}

extern "C" CrystalString bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QLCDNumber::trUtf8(s, c, n));
}

extern "C" QLCDNumber * bg_QLCDNumber__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_LcdNumber(parent);
}

extern "C" QLCDNumber * bg_QLCDNumber__CONSTRUCT_uint_QWidget_X(uint numDigits, QWidget * parent) {
  return new (UseGC) BgInherit_LcdNumber(numDigits, parent);
}

extern "C" bool bg_QLCDNumber_smallDecimalPoint_(QLCDNumber * _self_) {
  return _self_->smallDecimalPoint();
}

extern "C" int bg_QLCDNumber_digitCount_(QLCDNumber * _self_) {
  return _self_->digitCount();
}

extern "C" void bg_QLCDNumber_setDigitCount_int(QLCDNumber * _self_, int nDigits) {
  _self_->setDigitCount(nDigits);
}

extern "C" bool bg_QLCDNumber_checkOverflow_double(QLCDNumber * _self_, double num) {
  return _self_->checkOverflow(num);
}

extern "C" bool bg_QLCDNumber_checkOverflow_int(QLCDNumber * _self_, int num) {
  return _self_->checkOverflow(num);
}

extern "C" QLCDNumber::Mode bg_QLCDNumber_mode_(QLCDNumber * _self_) {
  return _self_->mode();
}

extern "C" void bg_QLCDNumber_setMode_QLCDNumber__Mode(QLCDNumber * _self_, QLCDNumber::Mode unnamed_arg_0) {
  _self_->setMode(unnamed_arg_0);
}

extern "C" QLCDNumber::SegmentStyle bg_QLCDNumber_segmentStyle_(QLCDNumber * _self_) {
  return _self_->segmentStyle();
}

extern "C" void bg_QLCDNumber_setSegmentStyle_QLCDNumber__SegmentStyle(QLCDNumber * _self_, QLCDNumber::SegmentStyle unnamed_arg_0) {
  _self_->setSegmentStyle(unnamed_arg_0);
}

extern "C" double bg_QLCDNumber_value_(QLCDNumber * _self_) {
  return _self_->value();
}

extern "C" int bg_QLCDNumber_intValue_(QLCDNumber * _self_) {
  return _self_->intValue();
}

extern "C" QSize * bg_QLCDNumber_sizeHint_(QLCDNumber * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" void bg_QLCDNumber_display_const_QString_R(QLCDNumber * _self_, const CrystalString str) {
  _self_->display(QString::fromUtf8(str.ptr, str.size));
}

extern "C" void bg_QLCDNumber_display_int(QLCDNumber * _self_, int num) {
  _self_->display(num);
}

extern "C" void bg_QLCDNumber_display_double(QLCDNumber * _self_, double num) {
  _self_->display(num);
}

extern "C" void bg_QLCDNumber_setHexMode_(QLCDNumber * _self_) {
  _self_->setHexMode();
}

extern "C" void bg_QLCDNumber_setDecMode_(QLCDNumber * _self_) {
  _self_->setDecMode();
}

extern "C" void bg_QLCDNumber_setOctMode_(QLCDNumber * _self_) {
  _self_->setOctMode();
}

extern "C" void bg_QLCDNumber_setBinMode_(QLCDNumber * _self_) {
  _self_->setBinMode();
}

extern "C" void bg_QLCDNumber_setSmallDecimalPoint_bool(QLCDNumber * _self_, bool unnamed_arg_0) {
  _self_->setSmallDecimalPoint(unnamed_arg_0);
}

extern "C" void bg_QLCDNumber_overflow_(QLCDNumber * _self_) {
  _self_->overflow();
}

extern "C" bool bg_QLCDNumber_event_QEvent_X(QLCDNumber * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QLCDNumber_paintEvent_QPaintEvent_X(QLCDNumber * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" QMetaObject::Connection * bg_QLCDNumber_CONNECT_overflow_CrystalProc_void(QLCDNumber * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLCDNumber::*)())&QLCDNumber::overflow, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_LcdNumber_JUMPTABLE_BgJumptable_LcdNumber_R(BgInherit_LcdNumber * _self_, const BgJumptable_LcdNumber & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_PushButton {
  CrystalProc<const QMetaObject *> bg_QPushButton_metaObject_;
  CrystalProc<void *, const char *> bg_QPushButton_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QPushButton_sizeHint_;
  CrystalProc<QSize &> bg_QPushButton_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QPushButton_event_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QPushButton_paintEvent_QPaintEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QPushButton_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QPushButton_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QPushButton_focusOutEvent_QFocusEvent_X;
  CrystalProc<bool, const QPoint> bg_QAbstractButton_hitButton_const_QPoint_R;
  CrystalProc<void> bg_QAbstractButton_checkStateSet_;
  CrystalProc<void> bg_QAbstractButton_nextCheckState_;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractButton_changeEvent_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractButton_timerEvent_QTimerEvent_X;
};
struct BgInherit_PushButton : public QPushButton {
  using QPushButton::QPushButton;
  BgJumptable_PushButton bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_metaObject_.isValid()) {
      return _self_->bgJump.bg_QPushButton_metaObject_();
    } else {
      return QPushButton::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QPushButton_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QPushButton::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QPushButton::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QPushButton_sizeHint_();
    } else {
      return QPushButton::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QPushButton_minimumSizeHint_();
    } else {
      return QPushButton::minimumSizeHint();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QPushButton_event_QEvent_X(e);
    } else {
      return QPushButton::event(e);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QPushButton_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QPushButton::paintEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QPushButton_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QPushButton::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QPushButton_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QPushButton::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QPushButton_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QPushButton_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QPushButton::focusOutEvent(unnamed_arg_0);
    }
  }
  
  bool hitButton(const QPoint & pos) const override {
    const BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_hitButton_const_QPoint_R.isValid()) {
      return _self_->bgJump.bg_QAbstractButton_hitButton_const_QPoint_R(pos);
    } else {
      return QPushButton::hitButton(pos);
    }
  }
  
  void checkStateSet() override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_checkStateSet_.isValid()) {
      _self_->bgJump.bg_QAbstractButton_checkStateSet_();
    } else {
      QPushButton::checkStateSet();
    }
  }
  
  void nextCheckState() override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_nextCheckState_.isValid()) {
      _self_->bgJump.bg_QAbstractButton_nextCheckState_();
    } else {
      QPushButton::nextCheckState();
    }
  }
  
  void keyReleaseEvent(QKeyEvent * e) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      QPushButton::keyReleaseEvent(e);
    }
  }
  
  void mousePressEvent(QMouseEvent * e) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(e);
    } else {
      QPushButton::mousePressEvent(e);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * e) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      QPushButton::mouseReleaseEvent(e);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * e) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(e);
    } else {
      QPushButton::mouseMoveEvent(e);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_changeEvent_QEvent_X(e);
    } else {
      QPushButton::changeEvent(e);
    }
  }
  
  void timerEvent(QTimerEvent * e) override {
    BgInherit_PushButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_timerEvent_QTimerEvent_X(e);
    } else {
      QPushButton::timerEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QPushButton_metaObject_(QPushButton * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QPushButton_qt_metacast_const_char_X(QPushButton * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX(QPushButton * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QPushButton_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QPushButton::tr(s));
}

extern "C" CrystalString bg_QPushButton_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QPushButton::tr(s, c));
}

extern "C" CrystalString bg_QPushButton_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QPushButton::tr(s, c, n));
}

extern "C" CrystalString bg_QPushButton_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QPushButton::trUtf8(s));
}

extern "C" CrystalString bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QPushButton::trUtf8(s, c));
}

extern "C" CrystalString bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QPushButton::trUtf8(s, c, n));
}

extern "C" QPushButton * bg_QPushButton__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_PushButton(parent);
}

extern "C" QPushButton * bg_QPushButton__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget * parent) {
  return new (UseGC) BgInherit_PushButton(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QPushButton * bg_QPushButton__CONSTRUCT_const_QIcon_R_const_QString_R_QWidget_X(const QIcon & icon, const CrystalString text, QWidget * parent) {
  return new (UseGC) BgInherit_PushButton(icon, QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QSize * bg_QPushButton_sizeHint_(QPushButton * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QPushButton_minimumSizeHint_(QPushButton * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" bool bg_QPushButton_autoDefault_(QPushButton * _self_) {
  return _self_->autoDefault();
}

extern "C" void bg_QPushButton_setAutoDefault_bool(QPushButton * _self_, bool unnamed_arg_0) {
  _self_->setAutoDefault(unnamed_arg_0);
}

extern "C" bool bg_QPushButton_isDefault_(QPushButton * _self_) {
  return _self_->isDefault();
}

extern "C" void bg_QPushButton_setDefault_bool(QPushButton * _self_, bool unnamed_arg_0) {
  _self_->setDefault(unnamed_arg_0);
}

extern "C" void bg_QPushButton_setMenu_QMenu_X(QPushButton * _self_, QMenu * menu) {
  _self_->setMenu(menu);
}

extern "C" QMenu * bg_QPushButton_menu_(QPushButton * _self_) {
  return _self_->menu();
}

extern "C" void bg_QPushButton_setFlat_bool(QPushButton * _self_, bool unnamed_arg_0) {
  _self_->setFlat(unnamed_arg_0);
}

extern "C" bool bg_QPushButton_isFlat_(QPushButton * _self_) {
  return _self_->isFlat();
}

extern "C" void bg_QPushButton_showMenu_(QPushButton * _self_) {
  _self_->showMenu();
}

extern "C" bool bg_QPushButton_event_QEvent_X(QPushButton * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QPushButton_paintEvent_QPaintEvent_X(QPushButton * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QPushButton_keyPressEvent_QKeyEvent_X(QPushButton * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QPushButton_focusInEvent_QFocusEvent_X(QPushButton * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusInEvent(unnamed_arg_0);
}

extern "C" void bg_QPushButton_focusOutEvent_QFocusEvent_X(QPushButton * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusOutEvent(unnamed_arg_0);
}

extern "C" void bg_QPushButton_initStyleOption_QStyleOptionButton_X(QPushButton * _self_, QStyleOptionButton * option) {
  _self_->initStyleOption(option);
}

extern "C" QPushButton * bg_QPushButton__CONSTRUCT_QPushButtonPrivate_R_QWidget_X(QPushButtonPrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_PushButton(dd, parent);
}

extern "C" void bg_BgInherit_PushButton_JUMPTABLE_BgJumptable_PushButton_R(BgInherit_PushButton * _self_, const BgJumptable_PushButton & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_CheckBox {
  CrystalProc<const QMetaObject *> bg_QCheckBox_metaObject_;
  CrystalProc<void *, const char *> bg_QCheckBox_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QCheckBox_sizeHint_;
  CrystalProc<QSize &> bg_QCheckBox_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QCheckBox_event_QEvent_X;
  CrystalProc<bool, const QPoint> bg_QCheckBox_hitButton_const_QPoint_R;
  CrystalProc<void> bg_QCheckBox_checkStateSet_;
  CrystalProc<void> bg_QCheckBox_nextCheckState_;
  CrystalProc<void, QPaintEvent *> bg_QCheckBox_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QCheckBox_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractButton_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractButton_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractButton_changeEvent_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractButton_timerEvent_QTimerEvent_X;
};
struct BgInherit_CheckBox : public QCheckBox {
  using QCheckBox::QCheckBox;
  BgJumptable_CheckBox bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_metaObject_.isValid()) {
      return _self_->bgJump.bg_QCheckBox_metaObject_();
    } else {
      return QCheckBox::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QCheckBox_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QCheckBox::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QCheckBox::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QCheckBox_sizeHint_();
    } else {
      return QCheckBox::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QCheckBox_minimumSizeHint_();
    } else {
      return QCheckBox::minimumSizeHint();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QCheckBox_event_QEvent_X(e);
    } else {
      return QCheckBox::event(e);
    }
  }
  
  bool hitButton(const QPoint & pos) const override {
    const BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_hitButton_const_QPoint_R.isValid()) {
      return _self_->bgJump.bg_QCheckBox_hitButton_const_QPoint_R(pos);
    } else {
      return QCheckBox::hitButton(pos);
    }
  }
  
  void checkStateSet() override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_checkStateSet_.isValid()) {
      _self_->bgJump.bg_QCheckBox_checkStateSet_();
    } else {
      QCheckBox::checkStateSet();
    }
  }
  
  void nextCheckState() override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_nextCheckState_.isValid()) {
      _self_->bgJump.bg_QCheckBox_nextCheckState_();
    } else {
      QCheckBox::nextCheckState();
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QCheckBox_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QCheckBox::paintEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QCheckBox_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QCheckBox::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(e);
    } else {
      QCheckBox::keyPressEvent(e);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      QCheckBox::keyReleaseEvent(e);
    }
  }
  
  void mousePressEvent(QMouseEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(e);
    } else {
      QCheckBox::mousePressEvent(e);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      QCheckBox::mouseReleaseEvent(e);
    }
  }
  
  void focusInEvent(QFocusEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_focusInEvent_QFocusEvent_X(e);
    } else {
      QCheckBox::focusInEvent(e);
    }
  }
  
  void focusOutEvent(QFocusEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(e);
    } else {
      QCheckBox::focusOutEvent(e);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_changeEvent_QEvent_X(e);
    } else {
      QCheckBox::changeEvent(e);
    }
  }
  
  void timerEvent(QTimerEvent * e) override {
    BgInherit_CheckBox *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_timerEvent_QTimerEvent_X(e);
    } else {
      QCheckBox::timerEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QCheckBox_metaObject_(QCheckBox * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QCheckBox_qt_metacast_const_char_X(QCheckBox * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX(QCheckBox * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QCheckBox_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QCheckBox::tr(s));
}

extern "C" CrystalString bg_QCheckBox_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QCheckBox::tr(s, c));
}

extern "C" CrystalString bg_QCheckBox_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QCheckBox::tr(s, c, n));
}

extern "C" CrystalString bg_QCheckBox_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QCheckBox::trUtf8(s));
}

extern "C" CrystalString bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QCheckBox::trUtf8(s, c));
}

extern "C" CrystalString bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QCheckBox::trUtf8(s, c, n));
}

extern "C" QCheckBox * bg_QCheckBox__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_CheckBox(parent);
}

extern "C" QCheckBox * bg_QCheckBox__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget * parent) {
  return new (UseGC) BgInherit_CheckBox(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QSize * bg_QCheckBox_sizeHint_(QCheckBox * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QCheckBox_minimumSizeHint_(QCheckBox * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QCheckBox_setTristate_bool(QCheckBox * _self_, bool y) {
  _self_->setTristate(y);
}

extern "C" bool bg_QCheckBox_isTristate_(QCheckBox * _self_) {
  return _self_->isTristate();
}

extern "C" Qt::CheckState bg_QCheckBox_checkState_(QCheckBox * _self_) {
  return _self_->checkState();
}

extern "C" void bg_QCheckBox_setCheckState_Qt__CheckState(QCheckBox * _self_, Qt::CheckState state) {
  _self_->setCheckState(state);
}

extern "C" void bg_QCheckBox_stateChanged_int(QCheckBox * _self_, int unnamed_arg_0) {
  _self_->stateChanged(unnamed_arg_0);
}

extern "C" bool bg_QCheckBox_event_QEvent_X(QCheckBox * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" bool bg_QCheckBox_hitButton_const_QPoint_R(QCheckBox * _self_, const QPoint pos) {
  return _self_->hitButton(pos);
}

extern "C" void bg_QCheckBox_checkStateSet_(QCheckBox * _self_) {
  _self_->checkStateSet();
}

extern "C" void bg_QCheckBox_nextCheckState_(QCheckBox * _self_) {
  _self_->nextCheckState();
}

extern "C" void bg_QCheckBox_paintEvent_QPaintEvent_X(QCheckBox * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(QCheckBox * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QCheckBox_initStyleOption_QStyleOptionButton_X(QCheckBox * _self_, QStyleOptionButton * option) {
  _self_->initStyleOption(option);
}

extern "C" QMetaObject::Connection * bg_QCheckBox_CONNECT_stateChanged_CrystalProc_void_int(QCheckBox * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCheckBox::*)(int))&QCheckBox::stateChanged, [_proc_](int unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" void bg_BgInherit_CheckBox_JUMPTABLE_BgJumptable_CheckBox_R(BgInherit_CheckBox * _self_, const BgJumptable_CheckBox & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_RadioButton {
  CrystalProc<const QMetaObject *> bg_QRadioButton_metaObject_;
  CrystalProc<void *, const char *> bg_QRadioButton_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QRadioButton_sizeHint_;
  CrystalProc<QSize &> bg_QRadioButton_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QRadioButton_event_QEvent_X;
  CrystalProc<bool, const QPoint> bg_QRadioButton_hitButton_const_QPoint_R;
  CrystalProc<void, QPaintEvent *> bg_QRadioButton_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QRadioButton_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void> bg_QAbstractButton_checkStateSet_;
  CrystalProc<void> bg_QAbstractButton_nextCheckState_;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractButton_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QAbstractButton_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QAbstractButton_changeEvent_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QAbstractButton_timerEvent_QTimerEvent_X;
};
struct BgInherit_RadioButton : public QRadioButton {
  using QRadioButton::QRadioButton;
  BgJumptable_RadioButton bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_metaObject_.isValid()) {
      return _self_->bgJump.bg_QRadioButton_metaObject_();
    } else {
      return QRadioButton::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QRadioButton_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QRadioButton::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QRadioButton::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QRadioButton_sizeHint_();
    } else {
      return QRadioButton::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QRadioButton_minimumSizeHint_();
    } else {
      return QRadioButton::minimumSizeHint();
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QRadioButton_event_QEvent_X(e);
    } else {
      return QRadioButton::event(e);
    }
  }
  
  bool hitButton(const QPoint & unnamed_arg_0) const override {
    const BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_hitButton_const_QPoint_R.isValid()) {
      return _self_->bgJump.bg_QRadioButton_hitButton_const_QPoint_R(unnamed_arg_0);
    } else {
      return QRadioButton::hitButton(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QRadioButton_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QRadioButton::paintEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QRadioButton_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QRadioButton_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QRadioButton::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void checkStateSet() override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_checkStateSet_.isValid()) {
      _self_->bgJump.bg_QAbstractButton_checkStateSet_();
    } else {
      QRadioButton::checkStateSet();
    }
  }
  
  void nextCheckState() override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_nextCheckState_.isValid()) {
      _self_->bgJump.bg_QAbstractButton_nextCheckState_();
    } else {
      QRadioButton::nextCheckState();
    }
  }
  
  void keyPressEvent(QKeyEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(e);
    } else {
      QRadioButton::keyPressEvent(e);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      QRadioButton::keyReleaseEvent(e);
    }
  }
  
  void mousePressEvent(QMouseEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(e);
    } else {
      QRadioButton::mousePressEvent(e);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      QRadioButton::mouseReleaseEvent(e);
    }
  }
  
  void focusInEvent(QFocusEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_focusInEvent_QFocusEvent_X(e);
    } else {
      QRadioButton::focusInEvent(e);
    }
  }
  
  void focusOutEvent(QFocusEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(e);
    } else {
      QRadioButton::focusOutEvent(e);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_changeEvent_QEvent_X(e);
    } else {
      QRadioButton::changeEvent(e);
    }
  }
  
  void timerEvent(QTimerEvent * e) override {
    BgInherit_RadioButton *_self_ = this;
    if (_self_->bgJump.bg_QAbstractButton_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QAbstractButton_timerEvent_QTimerEvent_X(e);
    } else {
      QRadioButton::timerEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QRadioButton_metaObject_(QRadioButton * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QRadioButton_qt_metacast_const_char_X(QRadioButton * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX(QRadioButton * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QRadioButton_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QRadioButton::tr(s));
}

extern "C" CrystalString bg_QRadioButton_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QRadioButton::tr(s, c));
}

extern "C" CrystalString bg_QRadioButton_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QRadioButton::tr(s, c, n));
}

extern "C" CrystalString bg_QRadioButton_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QRadioButton::trUtf8(s));
}

extern "C" CrystalString bg_QRadioButton_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QRadioButton::trUtf8(s, c));
}

extern "C" CrystalString bg_QRadioButton_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QRadioButton::trUtf8(s, c, n));
}

extern "C" QRadioButton * bg_QRadioButton__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_RadioButton(parent);
}

extern "C" QRadioButton * bg_QRadioButton__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget * parent) {
  return new (UseGC) BgInherit_RadioButton(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QSize * bg_QRadioButton_sizeHint_(QRadioButton * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QRadioButton_minimumSizeHint_(QRadioButton * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" bool bg_QRadioButton_event_QEvent_X(QRadioButton * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" bool bg_QRadioButton_hitButton_const_QPoint_R(QRadioButton * _self_, const QPoint unnamed_arg_0) {
  return _self_->hitButton(unnamed_arg_0);
}

extern "C" void bg_QRadioButton_paintEvent_QPaintEvent_X(QRadioButton * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QRadioButton_mouseMoveEvent_QMouseEvent_X(QRadioButton * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QRadioButton_initStyleOption_QStyleOptionButton_X(QRadioButton * _self_, QStyleOptionButton * button) {
  _self_->initStyleOption(button);
}

extern "C" void bg_BgInherit_RadioButton_JUMPTABLE_BgJumptable_RadioButton_R(BgInherit_RadioButton * _self_, const BgJumptable_RadioButton & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_ButtonGroup {
  CrystalProc<const QMetaObject *> bg_QButtonGroup_metaObject_;
  CrystalProc<void *, const char *> bg_QButtonGroup_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_ButtonGroup : public QButtonGroup {
  using QButtonGroup::QButtonGroup;
  BgJumptable_ButtonGroup bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QButtonGroup_metaObject_.isValid()) {
      return _self_->bgJump.bg_QButtonGroup_metaObject_();
    } else {
      return QButtonGroup::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QButtonGroup_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QButtonGroup_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QButtonGroup::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QButtonGroup::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QButtonGroup::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QButtonGroup::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QButtonGroup::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QButtonGroup::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QButtonGroup::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QButtonGroup::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_ButtonGroup *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QButtonGroup::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QButtonGroup_metaObject_(QButtonGroup * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QButtonGroup_qt_metacast_const_char_X(QButtonGroup * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX(QButtonGroup * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QButtonGroup_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QButtonGroup::tr(s));
}

extern "C" CrystalString bg_QButtonGroup_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QButtonGroup::tr(s, c));
}

extern "C" CrystalString bg_QButtonGroup_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QButtonGroup::tr(s, c, n));
}

extern "C" CrystalString bg_QButtonGroup_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QButtonGroup::trUtf8(s));
}

extern "C" CrystalString bg_QButtonGroup_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QButtonGroup::trUtf8(s, c));
}

extern "C" CrystalString bg_QButtonGroup_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QButtonGroup::trUtf8(s, c, n));
}

extern "C" QButtonGroup * bg_QButtonGroup__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_ButtonGroup(parent);
}

extern "C" void bg_QButtonGroup_setExclusive_bool(QButtonGroup * _self_, bool unnamed_arg_0) {
  _self_->setExclusive(unnamed_arg_0);
}

extern "C" bool bg_QButtonGroup_exclusive_(QButtonGroup * _self_) {
  return _self_->exclusive();
}

extern "C" void bg_QButtonGroup_addButton_QAbstractButton_X_int(QButtonGroup * _self_, QAbstractButton * unnamed_arg_0, int id) {
  _self_->addButton(unnamed_arg_0, id);
}

extern "C" void bg_QButtonGroup_removeButton_QAbstractButton_X(QButtonGroup * _self_, QAbstractButton * unnamed_arg_0) {
  _self_->removeButton(unnamed_arg_0);
}

extern "C" Container_QList_QAbstractButton_X * bg_QButtonGroup_buttons_(QButtonGroup * _self_) {
  return new (UseGC) Container_QList_QAbstractButton_X (_self_->buttons());
}

extern "C" QAbstractButton * bg_QButtonGroup_checkedButton_(QButtonGroup * _self_) {
  return _self_->checkedButton();
}

extern "C" QAbstractButton * bg_QButtonGroup_button_int(QButtonGroup * _self_, int id) {
  return _self_->button(id);
}

extern "C" void bg_QButtonGroup_setId_QAbstractButton_X_int(QButtonGroup * _self_, QAbstractButton * button, int id) {
  _self_->setId(button, id);
}

extern "C" int bg_QButtonGroup_id_QAbstractButton_X(QButtonGroup * _self_, QAbstractButton * button) {
  return _self_->id(button);
}

extern "C" int bg_QButtonGroup_checkedId_(QButtonGroup * _self_) {
  return _self_->checkedId();
}

extern "C" void bg_QButtonGroup_buttonClicked_QAbstractButton_X(QButtonGroup * _self_, QAbstractButton * unnamed_arg_0) {
  _self_->buttonClicked(unnamed_arg_0);
}

extern "C" void bg_QButtonGroup_buttonClicked_int(QButtonGroup * _self_, int unnamed_arg_0) {
  _self_->buttonClicked(unnamed_arg_0);
}

extern "C" void bg_QButtonGroup_buttonPressed_QAbstractButton_X(QButtonGroup * _self_, QAbstractButton * unnamed_arg_0) {
  _self_->buttonPressed(unnamed_arg_0);
}

extern "C" void bg_QButtonGroup_buttonPressed_int(QButtonGroup * _self_, int unnamed_arg_0) {
  _self_->buttonPressed(unnamed_arg_0);
}

extern "C" void bg_QButtonGroup_buttonReleased_QAbstractButton_X(QButtonGroup * _self_, QAbstractButton * unnamed_arg_0) {
  _self_->buttonReleased(unnamed_arg_0);
}

extern "C" void bg_QButtonGroup_buttonReleased_int(QButtonGroup * _self_, int unnamed_arg_0) {
  _self_->buttonReleased(unnamed_arg_0);
}

extern "C" void bg_QButtonGroup_buttonToggled_QAbstractButton_X_bool(QButtonGroup * _self_, QAbstractButton * unnamed_arg_0, bool unnamed_arg_1) {
  _self_->buttonToggled(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QButtonGroup_buttonToggled_int_bool(QButtonGroup * _self_, int unnamed_arg_0, bool unnamed_arg_1) {
  _self_->buttonToggled(unnamed_arg_0, unnamed_arg_1);
}

extern "C" QMetaObject::Connection * bg_QButtonGroup_CONNECT_buttonClicked_CrystalProc_void_QAbstractButton_X(QButtonGroup * _self_, CrystalProc<void, QAbstractButton *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QButtonGroup::*)(QAbstractButton *))&QButtonGroup::buttonClicked, [_proc_](QAbstractButton * unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QButtonGroup_CONNECT_buttonClicked_CrystalProc_void_int(QButtonGroup * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QButtonGroup::*)(int))&QButtonGroup::buttonClicked, [_proc_](int unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QButtonGroup_CONNECT_buttonPressed_CrystalProc_void_QAbstractButton_X(QButtonGroup * _self_, CrystalProc<void, QAbstractButton *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QButtonGroup::*)(QAbstractButton *))&QButtonGroup::buttonPressed, [_proc_](QAbstractButton * unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QButtonGroup_CONNECT_buttonPressed_CrystalProc_void_int(QButtonGroup * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QButtonGroup::*)(int))&QButtonGroup::buttonPressed, [_proc_](int unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QButtonGroup_CONNECT_buttonReleased_CrystalProc_void_QAbstractButton_X(QButtonGroup * _self_, CrystalProc<void, QAbstractButton *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QButtonGroup::*)(QAbstractButton *))&QButtonGroup::buttonReleased, [_proc_](QAbstractButton * unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QButtonGroup_CONNECT_buttonReleased_CrystalProc_void_int(QButtonGroup * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QButtonGroup::*)(int))&QButtonGroup::buttonReleased, [_proc_](int unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QButtonGroup_CONNECT_buttonToggled_CrystalProc_void_QAbstractButton_X_bool(QButtonGroup * _self_, CrystalProc<void, QAbstractButton *, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QButtonGroup::*)(QAbstractButton *, bool))&QButtonGroup::buttonToggled, [_proc_](QAbstractButton * unnamed_arg_0, bool unnamed_arg_1){ _proc_(unnamed_arg_0, unnamed_arg_1); }));
}

extern "C" QMetaObject::Connection * bg_QButtonGroup_CONNECT_buttonToggled_CrystalProc_void_int_bool(QButtonGroup * _self_, CrystalProc<void, int, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QButtonGroup::*)(int, bool))&QButtonGroup::buttonToggled, [_proc_](int unnamed_arg_0, bool unnamed_arg_1){ _proc_(unnamed_arg_0, unnamed_arg_1); }));
}

extern "C" void bg_BgInherit_ButtonGroup_JUMPTABLE_BgJumptable_ButtonGroup_R(BgInherit_ButtonGroup * _self_, const BgJumptable_ButtonGroup & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GroupBox {
  CrystalProc<const QMetaObject *> bg_QGroupBox_metaObject_;
  CrystalProc<void *, const char *> bg_QGroupBox_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QGroupBox_minimumSizeHint_;
  CrystalProc<bool, QEvent *> bg_QGroupBox_event_QEvent_X;
  CrystalProc<void, QChildEvent *> bg_QGroupBox_childEvent_QChildEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QGroupBox_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QGroupBox_paintEvent_QPaintEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGroupBox_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QGroupBox_changeEvent_QEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QGroupBox_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QGroupBox_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_GroupBox : public QGroupBox {
  using QGroupBox::QGroupBox;
  BgJumptable_GroupBox bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGroupBox_metaObject_();
    } else {
      return QGroupBox::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGroupBox_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGroupBox::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGroupBox::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QGroupBox_minimumSizeHint_();
    } else {
      return QGroupBox::minimumSizeHint();
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGroupBox_event_QEvent_X(event);
    } else {
      return QGroupBox::event(event);
    }
  }
  
  void childEvent(QChildEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QGroupBox_childEvent_QChildEvent_X(event);
    } else {
      QGroupBox::childEvent(event);
    }
  }
  
  void resizeEvent(QResizeEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QGroupBox_resizeEvent_QResizeEvent_X(event);
    } else {
      QGroupBox::resizeEvent(event);
    }
  }
  
  void paintEvent(QPaintEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QGroupBox_paintEvent_QPaintEvent_X(event);
    } else {
      QGroupBox::paintEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGroupBox_focusInEvent_QFocusEvent_X(event);
    } else {
      QGroupBox::focusInEvent(event);
    }
  }
  
  void changeEvent(QEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QGroupBox_changeEvent_QEvent_X(event);
    } else {
      QGroupBox::changeEvent(event);
    }
  }
  
  void mousePressEvent(QMouseEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGroupBox_mousePressEvent_QMouseEvent_X(event);
    } else {
      QGroupBox::mousePressEvent(event);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGroupBox_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      QGroupBox::mouseMoveEvent(event);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * event) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      QGroupBox::mouseReleaseEvent(event);
    }
  }
  
  int devType() const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QGroupBox::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QGroupBox::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QGroupBox::sizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QGroupBox::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QGroupBox::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QGroupBox::paintEngine();
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::moveEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QGroupBox::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QGroupBox::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QGroupBox::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QGroupBox::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QGroupBox::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QGroupBox::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_GroupBox *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QGroupBox::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGroupBox_metaObject_(QGroupBox * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGroupBox_qt_metacast_const_char_X(QGroupBox * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX(QGroupBox * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGroupBox_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGroupBox::tr(s));
}

extern "C" CrystalString bg_QGroupBox_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGroupBox::tr(s, c));
}

extern "C" CrystalString bg_QGroupBox_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGroupBox::tr(s, c, n));
}

extern "C" CrystalString bg_QGroupBox_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGroupBox::trUtf8(s));
}

extern "C" CrystalString bg_QGroupBox_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGroupBox::trUtf8(s, c));
}

extern "C" CrystalString bg_QGroupBox_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGroupBox::trUtf8(s, c, n));
}

extern "C" QGroupBox * bg_QGroupBox__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_GroupBox(parent);
}

extern "C" QGroupBox * bg_QGroupBox__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString title, QWidget * parent) {
  return new (UseGC) BgInherit_GroupBox(QString::fromUtf8(title.ptr, title.size), parent);
}

extern "C" CrystalString bg_QGroupBox_title_(QGroupBox * _self_) {
  return qstring_to_crystal(_self_->title());
}

extern "C" void bg_QGroupBox_setTitle_const_QString_R(QGroupBox * _self_, const CrystalString title) {
  _self_->setTitle(QString::fromUtf8(title.ptr, title.size));
}

extern "C" Qt::Alignment bg_QGroupBox_alignment_(QGroupBox * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QGroupBox_setAlignment_int(QGroupBox * _self_, int alignment) {
  _self_->setAlignment(alignment);
}

extern "C" QSize * bg_QGroupBox_minimumSizeHint_(QGroupBox * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" bool bg_QGroupBox_isFlat_(QGroupBox * _self_) {
  return _self_->isFlat();
}

extern "C" void bg_QGroupBox_setFlat_bool(QGroupBox * _self_, bool flat) {
  _self_->setFlat(flat);
}

extern "C" bool bg_QGroupBox_isCheckable_(QGroupBox * _self_) {
  return _self_->isCheckable();
}

extern "C" void bg_QGroupBox_setCheckable_bool(QGroupBox * _self_, bool checkable) {
  _self_->setCheckable(checkable);
}

extern "C" bool bg_QGroupBox_isChecked_(QGroupBox * _self_) {
  return _self_->isChecked();
}

extern "C" void bg_QGroupBox_setChecked_bool(QGroupBox * _self_, bool checked) {
  _self_->setChecked(checked);
}

extern "C" void bg_QGroupBox_clicked_bool(QGroupBox * _self_, bool checked) {
  _self_->clicked(checked);
}

extern "C" void bg_QGroupBox_toggled_bool(QGroupBox * _self_, bool unnamed_arg_0) {
  _self_->toggled(unnamed_arg_0);
}

extern "C" bool bg_QGroupBox_event_QEvent_X(QGroupBox * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" void bg_QGroupBox_childEvent_QChildEvent_X(QGroupBox * _self_, QChildEvent * event) {
  _self_->childEvent(event);
}

extern "C" void bg_QGroupBox_resizeEvent_QResizeEvent_X(QGroupBox * _self_, QResizeEvent * event) {
  _self_->resizeEvent(event);
}

extern "C" void bg_QGroupBox_paintEvent_QPaintEvent_X(QGroupBox * _self_, QPaintEvent * event) {
  _self_->paintEvent(event);
}

extern "C" void bg_QGroupBox_focusInEvent_QFocusEvent_X(QGroupBox * _self_, QFocusEvent * event) {
  _self_->focusInEvent(event);
}

extern "C" void bg_QGroupBox_changeEvent_QEvent_X(QGroupBox * _self_, QEvent * event) {
  _self_->changeEvent(event);
}

extern "C" void bg_QGroupBox_mousePressEvent_QMouseEvent_X(QGroupBox * _self_, QMouseEvent * event) {
  _self_->mousePressEvent(event);
}

extern "C" void bg_QGroupBox_mouseMoveEvent_QMouseEvent_X(QGroupBox * _self_, QMouseEvent * event) {
  _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X(QGroupBox * _self_, QMouseEvent * event) {
  _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGroupBox_initStyleOption_QStyleOptionGroupBox_X(QGroupBox * _self_, QStyleOptionGroupBox * option) {
  _self_->initStyleOption(option);
}

extern "C" QMetaObject::Connection * bg_QGroupBox_CONNECT_clicked_CrystalProc_void_bool(QGroupBox * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGroupBox::*)(bool))&QGroupBox::clicked, [_proc_](bool checked){ _proc_(checked); }));
}

extern "C" QMetaObject::Connection * bg_QGroupBox_CONNECT_toggled_CrystalProc_void_bool(QGroupBox * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGroupBox::*)(bool))&QGroupBox::toggled, [_proc_](bool unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" void bg_BgInherit_GroupBox_JUMPTABLE_BgJumptable_GroupBox_R(BgInherit_GroupBox * _self_, const BgJumptable_GroupBox & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_CoreApplication {
  CrystalProc<const QMetaObject *> bg_QCoreApplication_metaObject_;
  CrystalProc<void *, const char *> bg_QCoreApplication_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QObject *, QEvent *> bg_QCoreApplication_notify_QObject_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QCoreApplication_event_QEvent_X;
  CrystalProc<bool, QEvent *, QObject *, QPostEventList *> bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_CoreApplication : public QCoreApplication {
  using QCoreApplication::QCoreApplication;
  BgJumptable_CoreApplication bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QCoreApplication_metaObject_.isValid()) {
      return _self_->bgJump.bg_QCoreApplication_metaObject_();
    } else {
      return QCoreApplication::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QCoreApplication_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QCoreApplication_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QCoreApplication::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QCoreApplication::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool notify(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QCoreApplication_notify_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QCoreApplication_notify_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QCoreApplication::notify(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QCoreApplication_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QCoreApplication_event_QEvent_X(unnamed_arg_0);
    } else {
      return QCoreApplication::event(unnamed_arg_0);
    }
  }
  
  bool compressEvent(QEvent * unnamed_arg_0, QObject * receiver, QPostEventList * unnamed_arg_2) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X.isValid()) {
      return _self_->bgJump.bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(unnamed_arg_0, receiver, unnamed_arg_2);
    } else {
      return QCoreApplication::compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QCoreApplication::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QCoreApplication::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QCoreApplication::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QCoreApplication::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QCoreApplication::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_CoreApplication *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QCoreApplication::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QCoreApplication_metaObject_(QCoreApplication * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QCoreApplication_qt_metacast_const_char_X(QCoreApplication * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX(QCoreApplication * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QCoreApplication_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QCoreApplication::tr(s));
}

extern "C" CrystalString bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QCoreApplication::tr(s, c));
}

extern "C" CrystalString bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QCoreApplication::tr(s, c, n));
}

extern "C" CrystalString bg_QCoreApplication_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QCoreApplication::trUtf8(s));
}

extern "C" CrystalString bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QCoreApplication::trUtf8(s, c));
}

extern "C" CrystalString bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QCoreApplication::trUtf8(s, c, n));
}

extern "C" QCoreApplication * bg_QCoreApplication__CONSTRUCT_int_R_char_XX_int(int & argc, char ** argv, int unnamed_arg_2) {
  return new (UseGC) BgInherit_CoreApplication(argc, argv, unnamed_arg_2);
}

extern "C" QStringList * bg_QCoreApplication_arguments_STATIC_() {
  return new (UseGC) QStringList (QCoreApplication::arguments());
}

extern "C" void bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute_bool(Qt::ApplicationAttribute attribute, bool on) {
  QCoreApplication::setAttribute(attribute, on);
}

extern "C" bool bg_QCoreApplication_testAttribute_STATIC_Qt__ApplicationAttribute(Qt::ApplicationAttribute attribute) {
  return QCoreApplication::testAttribute(attribute);
}

extern "C" void bg_QCoreApplication_setOrganizationDomain_STATIC_const_QString_R(const CrystalString orgDomain) {
  QCoreApplication::setOrganizationDomain(QString::fromUtf8(orgDomain.ptr, orgDomain.size));
}

extern "C" CrystalString bg_QCoreApplication_organizationDomain_STATIC_() {
  return qstring_to_crystal(QCoreApplication::organizationDomain());
}

extern "C" void bg_QCoreApplication_setOrganizationName_STATIC_const_QString_R(const CrystalString orgName) {
  QCoreApplication::setOrganizationName(QString::fromUtf8(orgName.ptr, orgName.size));
}

extern "C" CrystalString bg_QCoreApplication_organizationName_STATIC_() {
  return qstring_to_crystal(QCoreApplication::organizationName());
}

extern "C" void bg_QCoreApplication_setApplicationName_STATIC_const_QString_R(const CrystalString application) {
  QCoreApplication::setApplicationName(QString::fromUtf8(application.ptr, application.size));
}

extern "C" CrystalString bg_QCoreApplication_applicationName_STATIC_() {
  return qstring_to_crystal(QCoreApplication::applicationName());
}

extern "C" void bg_QCoreApplication_setApplicationVersion_STATIC_const_QString_R(const CrystalString version) {
  QCoreApplication::setApplicationVersion(QString::fromUtf8(version.ptr, version.size));
}

extern "C" CrystalString bg_QCoreApplication_applicationVersion_STATIC_() {
  return qstring_to_crystal(QCoreApplication::applicationVersion());
}

extern "C" void bg_QCoreApplication_setSetuidAllowed_STATIC_bool(bool allow) {
  QCoreApplication::setSetuidAllowed(allow);
}

extern "C" bool bg_QCoreApplication_isSetuidAllowed_STATIC_() {
  return QCoreApplication::isSetuidAllowed();
}

extern "C" QCoreApplication * bg_QCoreApplication_instance_STATIC_() {
  return QCoreApplication::instance();
}

extern "C" int bg_QCoreApplication_exec_STATIC_() {
  return QCoreApplication::exec();
}

extern "C" void bg_QCoreApplication_processEvents_STATIC_() {
  QCoreApplication::processEvents();
}

extern "C" void bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags(QEventLoop::ProcessEventsFlags flags) {
  QCoreApplication::processEvents(flags);
}

extern "C" void bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags_int(QEventLoop::ProcessEventsFlags flags, int maxtime) {
  QCoreApplication::processEvents(flags, maxtime);
}

extern "C" void bg_QCoreApplication_exit_STATIC_int(int retcode) {
  QCoreApplication::exit(retcode);
}

extern "C" bool bg_QCoreApplication_sendEvent_STATIC_QObject_X_QEvent_X(QObject * receiver, QEvent * event) {
  return QCoreApplication::sendEvent(receiver, event);
}

extern "C" void bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X_int(QObject * receiver, QEvent * event, int priority) {
  QCoreApplication::postEvent(receiver, event, priority);
}

extern "C" void bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X_int(QObject * receiver, int event_type) {
  QCoreApplication::sendPostedEvents(receiver, event_type);
}

extern "C" void bg_QCoreApplication_removePostedEvents_STATIC_QObject_X_int(QObject * receiver, int eventType) {
  QCoreApplication::removePostedEvents(receiver, eventType);
}

extern "C" bool bg_QCoreApplication_hasPendingEvents_STATIC_() {
  return QCoreApplication::hasPendingEvents();
}

extern "C" QAbstractEventDispatcher * bg_QCoreApplication_eventDispatcher_STATIC_() {
  return QCoreApplication::eventDispatcher();
}

extern "C" void bg_QCoreApplication_setEventDispatcher_STATIC_QAbstractEventDispatcher_X(QAbstractEventDispatcher * eventDispatcher) {
  QCoreApplication::setEventDispatcher(eventDispatcher);
}

extern "C" bool bg_QCoreApplication_notify_QObject_X_QEvent_X(QCoreApplication * _self_, QObject * unnamed_arg_0, QEvent * unnamed_arg_1) {
  return _self_->notify(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QCoreApplication_startingUp_STATIC_() {
  return QCoreApplication::startingUp();
}

extern "C" bool bg_QCoreApplication_closingDown_STATIC_() {
  return QCoreApplication::closingDown();
}

extern "C" CrystalString bg_QCoreApplication_applicationDirPath_STATIC_() {
  return qstring_to_crystal(QCoreApplication::applicationDirPath());
}

extern "C" CrystalString bg_QCoreApplication_applicationFilePath_STATIC_() {
  return qstring_to_crystal(QCoreApplication::applicationFilePath());
}

extern "C" qint64 bg_QCoreApplication_applicationPid_STATIC_() {
  return QCoreApplication::applicationPid();
}

extern "C" void bg_QCoreApplication_setLibraryPaths_STATIC_const_QStringList_R(const QStringList & unnamed_arg_0) {
  QCoreApplication::setLibraryPaths(unnamed_arg_0);
}

extern "C" QStringList * bg_QCoreApplication_libraryPaths_STATIC_() {
  return new (UseGC) QStringList (QCoreApplication::libraryPaths());
}

extern "C" void bg_QCoreApplication_addLibraryPath_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  QCoreApplication::addLibraryPath(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QCoreApplication_removeLibraryPath_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  QCoreApplication::removeLibraryPath(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" bool bg_QCoreApplication_installTranslator_STATIC_QTranslator_X(QTranslator * messageFile) {
  return QCoreApplication::installTranslator(messageFile);
}

extern "C" bool bg_QCoreApplication_removeTranslator_STATIC_QTranslator_X(QTranslator * messageFile) {
  return QCoreApplication::removeTranslator(messageFile);
}

extern "C" CrystalString bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X(const char * context, const char * key) {
  return qstring_to_crystal(QCoreApplication::translate(context, key));
}

extern "C" CrystalString bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X(const char * context, const char * key, const char * disambiguation) {
  return qstring_to_crystal(QCoreApplication::translate(context, key, disambiguation));
}

extern "C" CrystalString bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X_int(const char * context, const char * key, const char * disambiguation, int n) {
  return qstring_to_crystal(QCoreApplication::translate(context, key, disambiguation, n));
}

extern "C" void bg_QCoreApplication_flush_STATIC_() {
  QCoreApplication::flush();
}

extern "C" void bg_QCoreApplication_installNativeEventFilter_QAbstractNativeEventFilter_X(QCoreApplication * _self_, QAbstractNativeEventFilter * filterObj) {
  _self_->installNativeEventFilter(filterObj);
}

extern "C" void bg_QCoreApplication_removeNativeEventFilter_QAbstractNativeEventFilter_X(QCoreApplication * _self_, QAbstractNativeEventFilter * filterObj) {
  _self_->removeNativeEventFilter(filterObj);
}

extern "C" bool bg_QCoreApplication_isQuitLockEnabled_STATIC_() {
  return QCoreApplication::isQuitLockEnabled();
}

extern "C" void bg_QCoreApplication_setQuitLockEnabled_STATIC_bool(bool enabled) {
  QCoreApplication::setQuitLockEnabled(enabled);
}

extern "C" void bg_QCoreApplication_quit_STATIC_() {
  QCoreApplication::quit();
}

extern "C" void bg_QCoreApplication_organizationNameChanged_(QCoreApplication * _self_) {
  _self_->organizationNameChanged();
}

extern "C" void bg_QCoreApplication_organizationDomainChanged_(QCoreApplication * _self_) {
  _self_->organizationDomainChanged();
}

extern "C" void bg_QCoreApplication_applicationNameChanged_(QCoreApplication * _self_) {
  _self_->applicationNameChanged();
}

extern "C" void bg_QCoreApplication_applicationVersionChanged_(QCoreApplication * _self_) {
  _self_->applicationVersionChanged();
}

extern "C" bool bg_QCoreApplication_event_QEvent_X(QCoreApplication * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(QCoreApplication * _self_, QEvent * unnamed_arg_0, QObject * receiver, QPostEventList * unnamed_arg_2) {
  return _self_->compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
}

extern "C" QCoreApplication * bg_QCoreApplication__CONSTRUCT_QCoreApplicationPrivate_R(QCoreApplicationPrivate & p) {
  return new (UseGC) BgInherit_CoreApplication(p);
}

extern "C" QMetaObject::Connection * bg_QCoreApplication_CONNECT_aboutToQuit_CrystalProc_void(QCoreApplication * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::aboutToQuit, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QCoreApplication_CONNECT_organizationNameChanged_CrystalProc_void(QCoreApplication * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::organizationNameChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QCoreApplication_CONNECT_organizationDomainChanged_CrystalProc_void(QCoreApplication * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::organizationDomainChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QCoreApplication_CONNECT_applicationNameChanged_CrystalProc_void(QCoreApplication * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::applicationNameChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QCoreApplication_CONNECT_applicationVersionChanged_CrystalProc_void(QCoreApplication * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::applicationVersionChanged, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_CoreApplication_JUMPTABLE_BgJumptable_CoreApplication_R(BgInherit_CoreApplication * _self_, const BgJumptable_CoreApplication & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GuiApplication {
  CrystalProc<const QMetaObject *> bg_QGuiApplication_metaObject_;
  CrystalProc<void *, const char *> bg_QGuiApplication_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QObject *, QEvent *> bg_QGuiApplication_notify_QObject_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QGuiApplication_event_QEvent_X;
  CrystalProc<bool, QEvent *, QObject *, QPostEventList *> bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X;
};
struct BgInherit_GuiApplication : public QGuiApplication {
  using QGuiApplication::QGuiApplication;
  BgJumptable_GuiApplication bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GuiApplication *_self_ = this;
    if (_self_->bgJump.bg_QGuiApplication_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGuiApplication_metaObject_();
    } else {
      return QGuiApplication::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GuiApplication *_self_ = this;
    if (_self_->bgJump.bg_QGuiApplication_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGuiApplication_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGuiApplication::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GuiApplication *_self_ = this;
    if (_self_->bgJump.bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGuiApplication::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool notify(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_GuiApplication *_self_ = this;
    if (_self_->bgJump.bg_QGuiApplication_notify_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGuiApplication_notify_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QGuiApplication::notify(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_GuiApplication *_self_ = this;
    if (_self_->bgJump.bg_QGuiApplication_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGuiApplication_event_QEvent_X(unnamed_arg_0);
    } else {
      return QGuiApplication::event(unnamed_arg_0);
    }
  }
  
  bool compressEvent(QEvent * unnamed_arg_0, QObject * receiver, QPostEventList * unnamed_arg_2) override {
    BgInherit_GuiApplication *_self_ = this;
    if (_self_->bgJump.bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X.isValid()) {
      return _self_->bgJump.bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(unnamed_arg_0, receiver, unnamed_arg_2);
    } else {
      return QGuiApplication::compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGuiApplication_metaObject_(QGuiApplication * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGuiApplication_qt_metacast_const_char_X(QGuiApplication * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX(QGuiApplication * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGuiApplication_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGuiApplication::tr(s));
}

extern "C" CrystalString bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGuiApplication::tr(s, c));
}

extern "C" CrystalString bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGuiApplication::tr(s, c, n));
}

extern "C" CrystalString bg_QGuiApplication_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGuiApplication::trUtf8(s));
}

extern "C" CrystalString bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGuiApplication::trUtf8(s, c));
}

extern "C" CrystalString bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGuiApplication::trUtf8(s, c, n));
}

extern "C" QGuiApplication * bg_QGuiApplication__CONSTRUCT_int_R_char_XX_int(int & argc, char ** argv, int unnamed_arg_2) {
  return new (UseGC) BgInherit_GuiApplication(argc, argv, unnamed_arg_2);
}

extern "C" void bg_QGuiApplication_setApplicationDisplayName_STATIC_const_QString_R(const CrystalString name) {
  QGuiApplication::setApplicationDisplayName(QString::fromUtf8(name.ptr, name.size));
}

extern "C" CrystalString bg_QGuiApplication_applicationDisplayName_STATIC_() {
  return qstring_to_crystal(QGuiApplication::applicationDisplayName());
}

extern "C" QWindowList * bg_QGuiApplication_allWindows_STATIC_() {
  return new (UseGC) QWindowList (QGuiApplication::allWindows());
}

extern "C" QWindowList * bg_QGuiApplication_topLevelWindows_STATIC_() {
  return new (UseGC) QWindowList (QGuiApplication::topLevelWindows());
}

extern "C" QWindow * bg_QGuiApplication_topLevelAt_STATIC_const_QPoint_R(const QPoint pos) {
  return QGuiApplication::topLevelAt(pos);
}

extern "C" void bg_QGuiApplication_setWindowIcon_STATIC_const_QIcon_R(const QIcon & icon) {
  QGuiApplication::setWindowIcon(icon);
}

extern "C" QIcon * bg_QGuiApplication_windowIcon_STATIC_() {
  return new (UseGC) QIcon (QGuiApplication::windowIcon());
}

extern "C" CrystalString bg_QGuiApplication_platformName_STATIC_() {
  return qstring_to_crystal(QGuiApplication::platformName());
}

extern "C" QWindow * bg_QGuiApplication_modalWindow_STATIC_() {
  return QGuiApplication::modalWindow();
}

extern "C" QWindow * bg_QGuiApplication_focusWindow_STATIC_() {
  return QGuiApplication::focusWindow();
}

extern "C" QObject * bg_QGuiApplication_focusObject_STATIC_() {
  return QGuiApplication::focusObject();
}

extern "C" QScreen * bg_QGuiApplication_primaryScreen_STATIC_() {
  return QGuiApplication::primaryScreen();
}

extern "C" Container_QList_QScreen_X * bg_QGuiApplication_screens_STATIC_() {
  return new (UseGC) Container_QList_QScreen_X (QGuiApplication::screens());
}

extern "C" qreal bg_QGuiApplication_devicePixelRatio_(QGuiApplication * _self_) {
  return _self_->devicePixelRatio();
}

extern "C" QCursor * bg_QGuiApplication_overrideCursor_STATIC_() {
  return QGuiApplication::overrideCursor();
}

extern "C" void bg_QGuiApplication_setOverrideCursor_STATIC_const_QCursor_R(const QCursor & unnamed_arg_0) {
  QGuiApplication::setOverrideCursor(unnamed_arg_0);
}

extern "C" void bg_QGuiApplication_changeOverrideCursor_STATIC_const_QCursor_R(const QCursor & unnamed_arg_0) {
  QGuiApplication::changeOverrideCursor(unnamed_arg_0);
}

extern "C" void bg_QGuiApplication_restoreOverrideCursor_STATIC_() {
  QGuiApplication::restoreOverrideCursor();
}

extern "C" QFont * bg_QGuiApplication_font_STATIC_() {
  return new (UseGC) QFont (QGuiApplication::font());
}

extern "C" void bg_QGuiApplication_setFont_STATIC_const_QFont_R(const QFont & unnamed_arg_0) {
  QGuiApplication::setFont(unnamed_arg_0);
}

extern "C" QClipboard * bg_QGuiApplication_clipboard_STATIC_() {
  return QGuiApplication::clipboard();
}

extern "C" QPalette * bg_QGuiApplication_palette_STATIC_() {
  return new (UseGC) QPalette (QGuiApplication::palette());
}

extern "C" void bg_QGuiApplication_setPalette_STATIC_const_QPalette_R(const QPalette & pal) {
  QGuiApplication::setPalette(pal);
}

extern "C" Qt::KeyboardModifiers bg_QGuiApplication_keyboardModifiers_STATIC_() {
  return QGuiApplication::keyboardModifiers();
}

extern "C" Qt::KeyboardModifiers bg_QGuiApplication_queryKeyboardModifiers_STATIC_() {
  return QGuiApplication::queryKeyboardModifiers();
}

extern "C" Qt::MouseButtons bg_QGuiApplication_mouseButtons_STATIC_() {
  return QGuiApplication::mouseButtons();
}

extern "C" void bg_QGuiApplication_setLayoutDirection_STATIC_Qt__LayoutDirection(Qt::LayoutDirection direction) {
  QGuiApplication::setLayoutDirection(direction);
}

extern "C" Qt::LayoutDirection bg_QGuiApplication_layoutDirection_STATIC_() {
  return QGuiApplication::layoutDirection();
}

extern "C" bool bg_QGuiApplication_isRightToLeft_STATIC_() {
  return QGuiApplication::isRightToLeft();
}

extern "C" bool bg_QGuiApplication_isLeftToRight_STATIC_() {
  return QGuiApplication::isLeftToRight();
}

extern "C" QStyleHints * bg_QGuiApplication_styleHints_STATIC_() {
  return QGuiApplication::styleHints();
}

extern "C" void bg_QGuiApplication_setDesktopSettingsAware_STATIC_bool(bool on) {
  QGuiApplication::setDesktopSettingsAware(on);
}

extern "C" bool bg_QGuiApplication_desktopSettingsAware_STATIC_() {
  return QGuiApplication::desktopSettingsAware();
}

extern "C" QInputMethod * bg_QGuiApplication_inputMethod_STATIC_() {
  return QGuiApplication::inputMethod();
}

extern "C" QPlatformNativeInterface * bg_QGuiApplication_platformNativeInterface_STATIC_() {
  return QGuiApplication::platformNativeInterface();
}

extern "C" void bg_QGuiApplication_setQuitOnLastWindowClosed_STATIC_bool(bool quit) {
  QGuiApplication::setQuitOnLastWindowClosed(quit);
}

extern "C" bool bg_QGuiApplication_quitOnLastWindowClosed_STATIC_() {
  return QGuiApplication::quitOnLastWindowClosed();
}

extern "C" Qt::ApplicationState bg_QGuiApplication_applicationState_STATIC_() {
  return QGuiApplication::applicationState();
}

extern "C" int bg_QGuiApplication_exec_STATIC_() {
  return QGuiApplication::exec();
}

extern "C" bool bg_QGuiApplication_notify_QObject_X_QEvent_X(QGuiApplication * _self_, QObject * unnamed_arg_0, QEvent * unnamed_arg_1) {
  return _self_->notify(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QGuiApplication_isSessionRestored_(QGuiApplication * _self_) {
  return _self_->isSessionRestored();
}

extern "C" CrystalString bg_QGuiApplication_sessionId_(QGuiApplication * _self_) {
  return qstring_to_crystal(_self_->sessionId());
}

extern "C" CrystalString bg_QGuiApplication_sessionKey_(QGuiApplication * _self_) {
  return qstring_to_crystal(_self_->sessionKey());
}

extern "C" bool bg_QGuiApplication_isSavingSession_(QGuiApplication * _self_) {
  return _self_->isSavingSession();
}

extern "C" bool bg_QGuiApplication_isFallbackSessionManagementEnabled_STATIC_() {
  return QGuiApplication::isFallbackSessionManagementEnabled();
}

extern "C" void bg_QGuiApplication_setFallbackSessionManagementEnabled_STATIC_bool(bool unnamed_arg_0) {
  QGuiApplication::setFallbackSessionManagementEnabled(unnamed_arg_0);
}

extern "C" void bg_QGuiApplication_sync_STATIC_() {
  QGuiApplication::sync();
}

extern "C" void bg_QGuiApplication_fontDatabaseChanged_(QGuiApplication * _self_) {
  _self_->fontDatabaseChanged();
}

extern "C" void bg_QGuiApplication_screenAdded_QScreen_X(QGuiApplication * _self_, QScreen * screen) {
  _self_->screenAdded(screen);
}

extern "C" void bg_QGuiApplication_screenRemoved_QScreen_X(QGuiApplication * _self_, QScreen * screen) {
  _self_->screenRemoved(screen);
}

extern "C" void bg_QGuiApplication_primaryScreenChanged_QScreen_X(QGuiApplication * _self_, QScreen * screen) {
  _self_->primaryScreenChanged(screen);
}

extern "C" void bg_QGuiApplication_lastWindowClosed_(QGuiApplication * _self_) {
  _self_->lastWindowClosed();
}

extern "C" void bg_QGuiApplication_focusObjectChanged_QObject_X(QGuiApplication * _self_, QObject * focusObject) {
  _self_->focusObjectChanged(focusObject);
}

extern "C" void bg_QGuiApplication_focusWindowChanged_QWindow_X(QGuiApplication * _self_, QWindow * focusWindow) {
  _self_->focusWindowChanged(focusWindow);
}

extern "C" void bg_QGuiApplication_applicationStateChanged_Qt__ApplicationState(QGuiApplication * _self_, Qt::ApplicationState state) {
  _self_->applicationStateChanged(state);
}

extern "C" void bg_QGuiApplication_layoutDirectionChanged_Qt__LayoutDirection(QGuiApplication * _self_, Qt::LayoutDirection direction) {
  _self_->layoutDirectionChanged(direction);
}

extern "C" void bg_QGuiApplication_commitDataRequest_QSessionManager_R(QGuiApplication * _self_, QSessionManager & sessionManager) {
  _self_->commitDataRequest(sessionManager);
}

extern "C" void bg_QGuiApplication_saveStateRequest_QSessionManager_R(QGuiApplication * _self_, QSessionManager & sessionManager) {
  _self_->saveStateRequest(sessionManager);
}

extern "C" void bg_QGuiApplication_paletteChanged_const_QPalette_R(QGuiApplication * _self_, const QPalette & pal) {
  _self_->paletteChanged(pal);
}

extern "C" bool bg_QGuiApplication_event_QEvent_X(QGuiApplication * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(QGuiApplication * _self_, QEvent * unnamed_arg_0, QObject * receiver, QPostEventList * unnamed_arg_2) {
  return _self_->compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
}

extern "C" QGuiApplication * bg_QGuiApplication__CONSTRUCT_QGuiApplicationPrivate_R(QGuiApplicationPrivate & p) {
  return new (UseGC) BgInherit_GuiApplication(p);
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_fontDatabaseChanged_CrystalProc_void(QGuiApplication * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)())&QGuiApplication::fontDatabaseChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_screenAdded_CrystalProc_void_QScreen_X(QGuiApplication * _self_, CrystalProc<void, QScreen *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QScreen *))&QGuiApplication::screenAdded, [_proc_](QScreen * screen){ _proc_(screen); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_screenRemoved_CrystalProc_void_QScreen_X(QGuiApplication * _self_, CrystalProc<void, QScreen *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QScreen *))&QGuiApplication::screenRemoved, [_proc_](QScreen * screen){ _proc_(screen); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_primaryScreenChanged_CrystalProc_void_QScreen_X(QGuiApplication * _self_, CrystalProc<void, QScreen *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QScreen *))&QGuiApplication::primaryScreenChanged, [_proc_](QScreen * screen){ _proc_(screen); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_lastWindowClosed_CrystalProc_void(QGuiApplication * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)())&QGuiApplication::lastWindowClosed, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_focusObjectChanged_CrystalProc_void_QObject_X(QGuiApplication * _self_, CrystalProc<void, QObject *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QObject *))&QGuiApplication::focusObjectChanged, [_proc_](QObject * focusObject){ _proc_(focusObject); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_focusWindowChanged_CrystalProc_void_QWindow_X(QGuiApplication * _self_, CrystalProc<void, QWindow *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QWindow *))&QGuiApplication::focusWindowChanged, [_proc_](QWindow * focusWindow){ _proc_(focusWindow); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_applicationStateChanged_CrystalProc_void_Qt__ApplicationState(QGuiApplication * _self_, CrystalProc<void, Qt::ApplicationState> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(Qt::ApplicationState))&QGuiApplication::applicationStateChanged, [_proc_](Qt::ApplicationState state){ _proc_(state); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_layoutDirectionChanged_CrystalProc_void_Qt__LayoutDirection(QGuiApplication * _self_, CrystalProc<void, Qt::LayoutDirection> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(Qt::LayoutDirection))&QGuiApplication::layoutDirectionChanged, [_proc_](Qt::LayoutDirection direction){ _proc_(direction); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_commitDataRequest_CrystalProc_void_QSessionManager_R(QGuiApplication * _self_, CrystalProc<void, QSessionManager &> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QSessionManager &))&QGuiApplication::commitDataRequest, [_proc_](QSessionManager & sessionManager){ _proc_((sessionManager)); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_saveStateRequest_CrystalProc_void_QSessionManager_R(QGuiApplication * _self_, CrystalProc<void, QSessionManager &> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QSessionManager &))&QGuiApplication::saveStateRequest, [_proc_](QSessionManager & sessionManager){ _proc_((sessionManager)); }));
}

extern "C" QMetaObject::Connection * bg_QGuiApplication_CONNECT_paletteChanged_CrystalProc_void_const_QPalette_R(QGuiApplication * _self_, CrystalProc<void, const QPalette *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(const QPalette &))&QGuiApplication::paletteChanged, [_proc_](const QPalette & pal){ _proc_(&(pal)); }));
}

extern "C" void bg_BgInherit_GuiApplication_JUMPTABLE_BgJumptable_GuiApplication_R(BgInherit_GuiApplication * _self_, const BgJumptable_GuiApplication & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Application {
  CrystalProc<const QMetaObject *> bg_QApplication_metaObject_;
  CrystalProc<void *, const char *> bg_QApplication_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QObject *, QEvent *> bg_QApplication_notify_QObject_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QApplication_event_QEvent_X;
  CrystalProc<bool, QEvent *, QObject *, QPostEventList *> bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X;
};
struct BgInherit_Application : public QApplication {
  using QApplication::QApplication;
  BgJumptable_Application bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Application *_self_ = this;
    if (_self_->bgJump.bg_QApplication_metaObject_.isValid()) {
      return _self_->bgJump.bg_QApplication_metaObject_();
    } else {
      return QApplication::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Application *_self_ = this;
    if (_self_->bgJump.bg_QApplication_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QApplication_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QApplication::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Application *_self_ = this;
    if (_self_->bgJump.bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QApplication::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool notify(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Application *_self_ = this;
    if (_self_->bgJump.bg_QApplication_notify_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QApplication_notify_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QApplication::notify(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Application *_self_ = this;
    if (_self_->bgJump.bg_QApplication_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QApplication_event_QEvent_X(unnamed_arg_0);
    } else {
      return QApplication::event(unnamed_arg_0);
    }
  }
  
  bool compressEvent(QEvent * unnamed_arg_0, QObject * receiver, QPostEventList * unnamed_arg_2) override {
    BgInherit_Application *_self_ = this;
    if (_self_->bgJump.bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X.isValid()) {
      return _self_->bgJump.bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(unnamed_arg_0, receiver, unnamed_arg_2);
    } else {
      return QApplication::compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
    }
  }
  
};
extern "C" const QMetaObject * bg_QApplication_metaObject_(QApplication * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QApplication_qt_metacast_const_char_X(QApplication * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX(QApplication * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QApplication_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QApplication::tr(s));
}

extern "C" CrystalString bg_QApplication_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QApplication::tr(s, c));
}

extern "C" CrystalString bg_QApplication_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QApplication::tr(s, c, n));
}

extern "C" CrystalString bg_QApplication_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QApplication::trUtf8(s));
}

extern "C" CrystalString bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QApplication::trUtf8(s, c));
}

extern "C" CrystalString bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QApplication::trUtf8(s, c, n));
}

extern "C" QApplication * bg_QApplication__CONSTRUCT_int_R_char_XX_int(int & argc, char ** argv, int unnamed_arg_2) {
  return new (UseGC) BgInherit_Application(argc, argv, unnamed_arg_2);
}

extern "C" QStyle * bg_QApplication_style_STATIC_() {
  return QApplication::style();
}

extern "C" void bg_QApplication_setStyle_STATIC_QStyle_X(QStyle * unnamed_arg_0) {
  QApplication::setStyle(unnamed_arg_0);
}

extern "C" QStyle * bg_QApplication_setStyle_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  return QApplication::setStyle(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" int bg_QApplication_colorSpec_STATIC_() {
  return QApplication::colorSpec();
}

extern "C" void bg_QApplication_setColorSpec_STATIC_int(int unnamed_arg_0) {
  QApplication::setColorSpec(unnamed_arg_0);
}

extern "C" QPalette * bg_QApplication_palette_STATIC_const_QWidget_X(const QWidget * unnamed_arg_0) {
  return new (UseGC) QPalette (QApplication::palette(unnamed_arg_0));
}

extern "C" QPalette * bg_QApplication_palette_STATIC_const_char_X(const char * className) {
  return new (UseGC) QPalette (QApplication::palette(className));
}

extern "C" void bg_QApplication_setPalette_STATIC_const_QPalette_R(const QPalette & unnamed_arg_0) {
  QApplication::setPalette(unnamed_arg_0);
}

extern "C" void bg_QApplication_setPalette_STATIC_const_QPalette_R_const_char_X(const QPalette & unnamed_arg_0, const char * className) {
  QApplication::setPalette(unnamed_arg_0, className);
}

extern "C" QFont * bg_QApplication_font_STATIC_() {
  return new (UseGC) QFont (QApplication::font());
}

extern "C" QFont * bg_QApplication_font_STATIC_const_QWidget_X(const QWidget * unnamed_arg_0) {
  return new (UseGC) QFont (QApplication::font(unnamed_arg_0));
}

extern "C" QFont * bg_QApplication_font_STATIC_const_char_X(const char * className) {
  return new (UseGC) QFont (QApplication::font(className));
}

extern "C" void bg_QApplication_setFont_STATIC_const_QFont_R(const QFont & unnamed_arg_0) {
  QApplication::setFont(unnamed_arg_0);
}

extern "C" void bg_QApplication_setFont_STATIC_const_QFont_R_const_char_X(const QFont & unnamed_arg_0, const char * className) {
  QApplication::setFont(unnamed_arg_0, className);
}

extern "C" QFontMetrics * bg_QApplication_fontMetrics_STATIC_() {
  return new (UseGC) QFontMetrics (QApplication::fontMetrics());
}

extern "C" void bg_QApplication_setWindowIcon_STATIC_const_QIcon_R(const QIcon & icon) {
  QApplication::setWindowIcon(icon);
}

extern "C" QIcon * bg_QApplication_windowIcon_STATIC_() {
  return new (UseGC) QIcon (QApplication::windowIcon());
}

extern "C" QWidgetList * bg_QApplication_allWidgets_STATIC_() {
  return new (UseGC) QWidgetList (QApplication::allWidgets());
}

extern "C" QWidgetList * bg_QApplication_topLevelWidgets_STATIC_() {
  return new (UseGC) QWidgetList (QApplication::topLevelWidgets());
}

extern "C" QDesktopWidget * bg_QApplication_desktop_STATIC_() {
  return QApplication::desktop();
}

extern "C" QWidget * bg_QApplication_activePopupWidget_STATIC_() {
  return QApplication::activePopupWidget();
}

extern "C" QWidget * bg_QApplication_activeModalWidget_STATIC_() {
  return QApplication::activeModalWidget();
}

extern "C" QWidget * bg_QApplication_focusWidget_STATIC_() {
  return QApplication::focusWidget();
}

extern "C" QWidget * bg_QApplication_activeWindow_STATIC_() {
  return QApplication::activeWindow();
}

extern "C" void bg_QApplication_setActiveWindow_STATIC_QWidget_X(QWidget * act) {
  QApplication::setActiveWindow(act);
}

extern "C" QWidget * bg_QApplication_widgetAt_STATIC_const_QPoint_R(const QPoint p) {
  return QApplication::widgetAt(p);
}

extern "C" QWidget * bg_QApplication_widgetAt_STATIC_int_int(int x, int y) {
  return QApplication::widgetAt(x, y);
}

extern "C" QWidget * bg_QApplication_topLevelAt_STATIC_const_QPoint_R(const QPoint p) {
  return QApplication::topLevelAt(p);
}

extern "C" QWidget * bg_QApplication_topLevelAt_STATIC_int_int(int x, int y) {
  return QApplication::topLevelAt(x, y);
}

extern "C" void bg_QApplication_beep_STATIC_() {
  QApplication::beep();
}

extern "C" void bg_QApplication_alert_STATIC_QWidget_X_int(QWidget * widget, int duration) {
  QApplication::alert(widget, duration);
}

extern "C" void bg_QApplication_setCursorFlashTime_STATIC_int(int unnamed_arg_0) {
  QApplication::setCursorFlashTime(unnamed_arg_0);
}

extern "C" int bg_QApplication_cursorFlashTime_STATIC_() {
  return QApplication::cursorFlashTime();
}

extern "C" void bg_QApplication_setDoubleClickInterval_STATIC_int(int unnamed_arg_0) {
  QApplication::setDoubleClickInterval(unnamed_arg_0);
}

extern "C" int bg_QApplication_doubleClickInterval_STATIC_() {
  return QApplication::doubleClickInterval();
}

extern "C" void bg_QApplication_setKeyboardInputInterval_STATIC_int(int unnamed_arg_0) {
  QApplication::setKeyboardInputInterval(unnamed_arg_0);
}

extern "C" int bg_QApplication_keyboardInputInterval_STATIC_() {
  return QApplication::keyboardInputInterval();
}

extern "C" void bg_QApplication_setWheelScrollLines_STATIC_int(int unnamed_arg_0) {
  QApplication::setWheelScrollLines(unnamed_arg_0);
}

extern "C" int bg_QApplication_wheelScrollLines_STATIC_() {
  return QApplication::wheelScrollLines();
}

extern "C" void bg_QApplication_setGlobalStrut_STATIC_const_QSize_R(const QSize & unnamed_arg_0) {
  QApplication::setGlobalStrut(unnamed_arg_0);
}

extern "C" QSize * bg_QApplication_globalStrut_STATIC_() {
  return new (UseGC) QSize (QApplication::globalStrut());
}

extern "C" void bg_QApplication_setStartDragTime_STATIC_int(int ms) {
  QApplication::setStartDragTime(ms);
}

extern "C" int bg_QApplication_startDragTime_STATIC_() {
  return QApplication::startDragTime();
}

extern "C" void bg_QApplication_setStartDragDistance_STATIC_int(int l) {
  QApplication::setStartDragDistance(l);
}

extern "C" int bg_QApplication_startDragDistance_STATIC_() {
  return QApplication::startDragDistance();
}

extern "C" bool bg_QApplication_isEffectEnabled_STATIC_Qt__UIEffect(Qt::UIEffect unnamed_arg_0) {
  return QApplication::isEffectEnabled(unnamed_arg_0);
}

extern "C" void bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect_bool(Qt::UIEffect unnamed_arg_0, bool enable) {
  QApplication::setEffectEnabled(unnamed_arg_0, enable);
}

extern "C" int bg_QApplication_exec_STATIC_() {
  return QApplication::exec();
}

extern "C" bool bg_QApplication_notify_QObject_X_QEvent_X(QApplication * _self_, QObject * unnamed_arg_0, QEvent * unnamed_arg_1) {
  return _self_->notify(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QApplication_focusChanged_QWidget_X_QWidget_X(QApplication * _self_, QWidget * old, QWidget * now) {
  _self_->focusChanged(old, now);
}

extern "C" CrystalString bg_QApplication_styleSheet_(QApplication * _self_) {
  return qstring_to_crystal(_self_->styleSheet());
}

extern "C" void bg_QApplication_setStyleSheet_const_QString_R(QApplication * _self_, const CrystalString sheet) {
  _self_->setStyleSheet(QString::fromUtf8(sheet.ptr, sheet.size));
}

extern "C" void bg_QApplication_setAutoSipEnabled_const_bool(QApplication * _self_, const bool enabled) {
  _self_->setAutoSipEnabled(enabled);
}

extern "C" bool bg_QApplication_autoSipEnabled_(QApplication * _self_) {
  return _self_->autoSipEnabled();
}

extern "C" void bg_QApplication_closeAllWindows_STATIC_() {
  QApplication::closeAllWindows();
}

extern "C" void bg_QApplication_aboutQt_STATIC_() {
  QApplication::aboutQt();
}

extern "C" bool bg_QApplication_event_QEvent_X(QApplication * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(QApplication * _self_, QEvent * unnamed_arg_0, QObject * receiver, QPostEventList * unnamed_arg_2) {
  return _self_->compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
}

extern "C" QMetaObject::Connection * bg_QApplication_CONNECT_focusChanged_CrystalProc_void_QWidget_X_QWidget_X(QApplication * _self_, CrystalProc<void, QWidget *, QWidget *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QApplication::*)(QWidget *, QWidget *))&QApplication::focusChanged, [_proc_](QWidget * old, QWidget * now){ _proc_(old, now); }));
}

extern "C" void bg_BgInherit_Application_JUMPTABLE_BgJumptable_Application_R(BgInherit_Application * _self_, const BgJumptable_Application & table) {
  _self_->bgJump = (table);
}

extern "C" QImage * bg_QImage__CONSTRUCT_() {
  return new (UseGC) QImage();
}

extern "C" QImage * bg_QImage__CONSTRUCT_const_QSize_R_QImage__Format(const QSize & size, QImage::Format format) {
  return new (UseGC) QImage(size, format);
}

extern "C" QImage * bg_QImage__CONSTRUCT_int_int_QImage__Format(int width, int height, QImage::Format format) {
  return new (UseGC) QImage(width, height, format);
}

extern "C" QImage * bg_QImage__CONSTRUCT_const_char_Xconst_X(const char ** xpm) {
  return new (UseGC) QImage(xpm);
}

extern "C" QImage * bg_QImage__CONSTRUCT_const_QString_R(const CrystalString fileName) {
  return new (UseGC) QImage(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" QImage * bg_QImage__CONSTRUCT_const_QString_R_const_char_X(const CrystalString fileName, const char * format) {
  return new (UseGC) QImage(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" void bg_QImage_swap_QImage_R(QImage * _self_, QImage & other) {
  _self_->swap(other);
}

extern "C" bool bg_QImage_isNull_(QImage * _self_) {
  return _self_->isNull();
}

extern "C" int bg_QImage_devType_(QImage * _self_) {
  return _self_->devType();
}

extern "C" void bg_QImage_detach_(QImage * _self_) {
  _self_->detach();
}

extern "C" bool bg_QImage_isDetached_(QImage * _self_) {
  return _self_->isDetached();
}

extern "C" QImage * bg_QImage_copy_(QImage * _self_) {
  return new (UseGC) QImage (_self_->copy());
}

extern "C" QImage * bg_QImage_copy_const_QRect_R(QImage * _self_, const QRect & rect) {
  return new (UseGC) QImage (_self_->copy(rect));
}

extern "C" QImage * bg_QImage_copy_int_int_int_int(QImage * _self_, int x, int y, int w, int h) {
  return new (UseGC) QImage (_self_->copy(x, y, w, h));
}

extern "C" QImage::Format bg_QImage_format_(QImage * _self_) {
  return _self_->format();
}

extern "C" QImage * bg_QImage_convertToFormat_QImage__Format(QImage * _self_, QImage::Format f) {
  return new (UseGC) QImage (_self_->convertToFormat(f));
}

extern "C" QImage * bg_QImage_convertToFormat_QImage__Format_Qt__ImageConversionFlags(QImage * _self_, QImage::Format f, Qt::ImageConversionFlags flags) {
  return new (UseGC) QImage (_self_->convertToFormat(f, flags));
}

extern "C" QImage * bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R(QImage * _self_, QImage::Format f, const Container_QVector_QRgb * colorTable) {
  return new (UseGC) QImage (_self_->convertToFormat(f, *(colorTable)));
}

extern "C" QImage * bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R_Qt__ImageConversionFlags(QImage * _self_, QImage::Format f, const Container_QVector_QRgb * colorTable, Qt::ImageConversionFlags flags) {
  return new (UseGC) QImage (_self_->convertToFormat(f, *(colorTable), flags));
}

extern "C" int bg_QImage_width_(QImage * _self_) {
  return _self_->width();
}

extern "C" int bg_QImage_height_(QImage * _self_) {
  return _self_->height();
}

extern "C" QSize * bg_QImage_size_(QImage * _self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" QRect * bg_QImage_rect_(QImage * _self_) {
  return new (UseGC) QRect (_self_->rect());
}

extern "C" int bg_QImage_depth_(QImage * _self_) {
  return _self_->depth();
}

extern "C" int bg_QImage_colorCount_(QImage * _self_) {
  return _self_->colorCount();
}

extern "C" int bg_QImage_bitPlaneCount_(QImage * _self_) {
  return _self_->bitPlaneCount();
}

extern "C" QRgb bg_QImage_color_int(QImage * _self_, int i) {
  return _self_->color(i);
}

extern "C" void bg_QImage_setColor_int_QRgb(QImage * _self_, int i, QRgb c) {
  _self_->setColor(i, c);
}

extern "C" void bg_QImage_setColorCount_int(QImage * _self_, int unnamed_arg_0) {
  _self_->setColorCount(unnamed_arg_0);
}

extern "C" bool bg_QImage_allGray_(QImage * _self_) {
  return _self_->allGray();
}

extern "C" bool bg_QImage_isGrayscale_(QImage * _self_) {
  return _self_->isGrayscale();
}

extern "C" uchar * bg_QImage_bits_(QImage * _self_) {
  return _self_->bits();
}

extern "C" const uchar * bg_QImage_constBits_(QImage * _self_) {
  return _self_->constBits();
}

extern "C" int bg_QImage_byteCount_(QImage * _self_) {
  return _self_->byteCount();
}

extern "C" uchar * bg_QImage_scanLine_int(QImage * _self_, int unnamed_arg_0) {
  return _self_->scanLine(unnamed_arg_0);
}

extern "C" const uchar * bg_QImage_constScanLine_int(QImage * _self_, int unnamed_arg_0) {
  return _self_->constScanLine(unnamed_arg_0);
}

extern "C" int bg_QImage_bytesPerLine_(QImage * _self_) {
  return _self_->bytesPerLine();
}

extern "C" bool bg_QImage_valid_int_int(QImage * _self_, int x, int y) {
  return _self_->valid(x, y);
}

extern "C" bool bg_QImage_valid_const_QPoint_R(QImage * _self_, const QPoint pt) {
  return _self_->valid(pt);
}

extern "C" int bg_QImage_pixelIndex_int_int(QImage * _self_, int x, int y) {
  return _self_->pixelIndex(x, y);
}

extern "C" int bg_QImage_pixelIndex_const_QPoint_R(QImage * _self_, const QPoint pt) {
  return _self_->pixelIndex(pt);
}

extern "C" QRgb bg_QImage_pixel_int_int(QImage * _self_, int x, int y) {
  return _self_->pixel(x, y);
}

extern "C" QRgb bg_QImage_pixel_const_QPoint_R(QImage * _self_, const QPoint pt) {
  return _self_->pixel(pt);
}

extern "C" void bg_QImage_setPixel_int_int_uint(QImage * _self_, int x, int y, uint index_or_rgb) {
  _self_->setPixel(x, y, index_or_rgb);
}

extern "C" void bg_QImage_setPixel_const_QPoint_R_uint(QImage * _self_, const QPoint pt, uint index_or_rgb) {
  _self_->setPixel(pt, index_or_rgb);
}

extern "C" QColor * bg_QImage_pixelColor_int_int(QImage * _self_, int x, int y) {
  return new (UseGC) QColor (_self_->pixelColor(x, y));
}

extern "C" QColor * bg_QImage_pixelColor_const_QPoint_R(QImage * _self_, const QPoint pt) {
  return new (UseGC) QColor (_self_->pixelColor(pt));
}

extern "C" void bg_QImage_setPixelColor_int_int_const_QColor_R(QImage * _self_, int x, int y, const QColor & c) {
  _self_->setPixelColor(x, y, c);
}

extern "C" void bg_QImage_setPixelColor_const_QPoint_R_const_QColor_R(QImage * _self_, const QPoint pt, const QColor & c) {
  _self_->setPixelColor(pt, c);
}

extern "C" Container_QVector_QRgb * bg_QImage_colorTable_(QImage * _self_) {
  return new (UseGC) Container_QVector_QRgb (_self_->colorTable());
}

extern "C" void bg_QImage_setColorTable_const_QVector_QRgb_(QImage * _self_, const Container_QVector_QRgb * colors) {
  _self_->setColorTable(*(colors));
}

extern "C" qreal bg_QImage_devicePixelRatio_(QImage * _self_) {
  return _self_->devicePixelRatio();
}

extern "C" void bg_QImage_setDevicePixelRatio_qreal(QImage * _self_, qreal scaleFactor) {
  _self_->setDevicePixelRatio(scaleFactor);
}

extern "C" void bg_QImage_fill_uint(QImage * _self_, uint pixel) {
  _self_->fill(pixel);
}

extern "C" void bg_QImage_fill_const_QColor_R(QImage * _self_, const QColor & color) {
  _self_->fill(color);
}

extern "C" void bg_QImage_fill_Qt__GlobalColor(QImage * _self_, Qt::GlobalColor color) {
  _self_->fill(color);
}

extern "C" bool bg_QImage_hasAlphaChannel_(QImage * _self_) {
  return _self_->hasAlphaChannel();
}

extern "C" void bg_QImage_setAlphaChannel_const_QImage_R(QImage * _self_, const QImage & alphaChannel) {
  _self_->setAlphaChannel(alphaChannel);
}

extern "C" QImage * bg_QImage_alphaChannel_(QImage * _self_) {
  return new (UseGC) QImage (_self_->alphaChannel());
}

extern "C" QImage * bg_QImage_createAlphaMask_(QImage * _self_) {
  return new (UseGC) QImage (_self_->createAlphaMask());
}

extern "C" QImage * bg_QImage_createAlphaMask_Qt__ImageConversionFlags(QImage * _self_, Qt::ImageConversionFlags flags) {
  return new (UseGC) QImage (_self_->createAlphaMask(flags));
}

extern "C" QImage * bg_QImage_createHeuristicMask_bool(QImage * _self_, bool clipTight) {
  return new (UseGC) QImage (_self_->createHeuristicMask(clipTight));
}

extern "C" QImage * bg_QImage_createMaskFromColor_QRgb_Qt__MaskMode(QImage * _self_, QRgb color, Qt::MaskMode mode) {
  return new (UseGC) QImage (_self_->createMaskFromColor(color, mode));
}

extern "C" QImage * bg_QImage_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(QImage * _self_, int w, int h, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->scaled(w, h, aspectMode, mode));
}

extern "C" QImage * bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(QImage * _self_, const QSize & s, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->scaled(s, aspectMode, mode));
}

extern "C" QImage * bg_QImage_scaledToWidth_int_Qt__TransformationMode(QImage * _self_, int w, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->scaledToWidth(w, mode));
}

extern "C" QImage * bg_QImage_scaledToHeight_int_Qt__TransformationMode(QImage * _self_, int h, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->scaledToHeight(h, mode));
}

extern "C" QImage * bg_QImage_transformed_const_QMatrix_R_Qt__TransformationMode(QImage * _self_, const QMatrix & matrix, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->transformed(matrix, mode));
}

extern "C" QMatrix * bg_QImage_trueMatrix_STATIC_const_QMatrix_R_int_int(const QMatrix & unnamed_arg_0, int w, int h) {
  return new (UseGC) QMatrix (QImage::trueMatrix(unnamed_arg_0, w, h));
}

extern "C" QImage * bg_QImage_transformed_const_QTransform_R_Qt__TransformationMode(QImage * _self_, const QTransform & matrix, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->transformed(matrix, mode));
}

extern "C" QTransform * bg_QImage_trueMatrix_STATIC_const_QTransform_R_int_int(const QTransform & unnamed_arg_0, int w, int h) {
  return new (UseGC) QTransform (QImage::trueMatrix(unnamed_arg_0, w, h));
}

extern "C" QImage * bg_QImage_mirrored_bool_bool(QImage * _self_, bool horizontally, bool vertically) {
  return new (UseGC) QImage (_self_->mirrored(horizontally, vertically));
}

extern "C" QImage * bg_QImage_rgbSwapped_(QImage * _self_) {
  return new (UseGC) QImage (_self_->rgbSwapped());
}

extern "C" void bg_QImage_invertPixels_QImage__InvertMode(QImage * _self_, QImage::InvertMode unnamed_arg_0) {
  _self_->invertPixels(unnamed_arg_0);
}

extern "C" bool bg_QImage_load_QIODevice_X_const_char_X(QImage * _self_, QIODevice * device, const char * format) {
  return _self_->load(device, format);
}

extern "C" bool bg_QImage_load_const_QString_R(QImage * _self_, const CrystalString fileName) {
  return _self_->load(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" bool bg_QImage_load_const_QString_R_const_char_X(QImage * _self_, const CrystalString fileName, const char * format) {
  return _self_->load(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" bool bg_QImage_loadFromData_const_uchar_X_int(QImage * _self_, const uchar * buf, int len) {
  return _self_->loadFromData(buf, len);
}

extern "C" bool bg_QImage_loadFromData_const_uchar_X_int_const_char_X(QImage * _self_, const uchar * buf, int len, const char * format) {
  return _self_->loadFromData(buf, len, format);
}

extern "C" bool bg_QImage_loadFromData_const_QByteArray_R(QImage * _self_, const QByteArray & data) {
  return _self_->loadFromData(data);
}

extern "C" bool bg_QImage_loadFromData_const_QByteArray_R_const_char_X(QImage * _self_, const QByteArray & data, const char * aformat) {
  return _self_->loadFromData(data, aformat);
}

extern "C" bool bg_QImage_save_const_QString_R(QImage * _self_, const CrystalString fileName) {
  return _self_->save(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" bool bg_QImage_save_const_QString_R_const_char_X(QImage * _self_, const CrystalString fileName, const char * format) {
  return _self_->save(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" bool bg_QImage_save_const_QString_R_const_char_X_int(QImage * _self_, const CrystalString fileName, const char * format, int quality) {
  return _self_->save(QString::fromUtf8(fileName.ptr, fileName.size), format, quality);
}

extern "C" bool bg_QImage_save_QIODevice_X(QImage * _self_, QIODevice * device) {
  return _self_->save(device);
}

extern "C" bool bg_QImage_save_QIODevice_X_const_char_X(QImage * _self_, QIODevice * device, const char * format) {
  return _self_->save(device, format);
}

extern "C" bool bg_QImage_save_QIODevice_X_const_char_X_int(QImage * _self_, QIODevice * device, const char * format, int quality) {
  return _self_->save(device, format, quality);
}

extern "C" QImage * bg_QImage_fromData_STATIC_const_uchar_X_int(const uchar * data, int size) {
  return new (UseGC) QImage (QImage::fromData(data, size));
}

extern "C" QImage * bg_QImage_fromData_STATIC_const_uchar_X_int_const_char_X(const uchar * data, int size, const char * format) {
  return new (UseGC) QImage (QImage::fromData(data, size, format));
}

extern "C" QImage * bg_QImage_fromData_STATIC_const_QByteArray_R(const QByteArray & data) {
  return new (UseGC) QImage (QImage::fromData(data));
}

extern "C" QImage * bg_QImage_fromData_STATIC_const_QByteArray_R_const_char_X(const QByteArray & data, const char * format) {
  return new (UseGC) QImage (QImage::fromData(data, format));
}

extern "C" qint64 bg_QImage_cacheKey_(QImage * _self_) {
  return _self_->cacheKey();
}

extern "C" QPaintEngine * bg_QImage_paintEngine_(QImage * _self_) {
  return _self_->paintEngine();
}

extern "C" int bg_QImage_dotsPerMeterX_(QImage * _self_) {
  return _self_->dotsPerMeterX();
}

extern "C" int bg_QImage_dotsPerMeterY_(QImage * _self_) {
  return _self_->dotsPerMeterY();
}

extern "C" void bg_QImage_setDotsPerMeterX_int(QImage * _self_, int unnamed_arg_0) {
  _self_->setDotsPerMeterX(unnamed_arg_0);
}

extern "C" void bg_QImage_setDotsPerMeterY_int(QImage * _self_, int unnamed_arg_0) {
  _self_->setDotsPerMeterY(unnamed_arg_0);
}

extern "C" QPoint bg_QImage_offset_(QImage * _self_) {
  return _self_->offset();
}

extern "C" void bg_QImage_setOffset_const_QPoint_R(QImage * _self_, const QPoint unnamed_arg_0) {
  _self_->setOffset(unnamed_arg_0);
}

extern "C" QStringList * bg_QImage_textKeys_(QImage * _self_) {
  return new (UseGC) QStringList (_self_->textKeys());
}

extern "C" CrystalString bg_QImage_text_const_QString_R(QImage * _self_, const CrystalString key) {
  return qstring_to_crystal(_self_->text(QString::fromUtf8(key.ptr, key.size)));
}

extern "C" void bg_QImage_setText_const_QString_R_const_QString_R(QImage * _self_, const CrystalString key, const CrystalString value) {
  _self_->setText(QString::fromUtf8(key.ptr, key.size), QString::fromUtf8(value.ptr, value.size));
}

extern "C" QPixelFormat * bg_QImage_pixelFormat_(QImage * _self_) {
  return new (UseGC) QPixelFormat (_self_->pixelFormat());
}

extern "C" QPixelFormat * bg_QImage_toPixelFormat_STATIC_QImage__Format(QImage::Format format) {
  return new (UseGC) QPixelFormat (QImage::toPixelFormat(format));
}

extern "C" QImage::Format bg_QImage_toImageFormat_STATIC_QPixelFormat(QPixelFormat & format) {
  return QImage::toImageFormat(format);
}

extern "C" int bg_QImage_metric_QPaintDevice__PaintDeviceMetric(QImage * _self_, QPaintDevice::PaintDeviceMetric metric) {
  return _self_->metric(metric);
}

extern "C" QImage * bg_QImage_mirrored_helper_bool_bool(QImage * _self_, bool horizontal, bool vertical) {
  return new (UseGC) QImage (_self_->mirrored_helper(horizontal, vertical));
}

extern "C" QImage * bg_QImage_rgbSwapped_helper_(QImage * _self_) {
  return new (UseGC) QImage (_self_->rgbSwapped_helper());
}

extern "C" void bg_QImage_mirrored_inplace_bool_bool(QImage * _self_, bool horizontal, bool vertical) {
  _self_->mirrored_inplace(horizontal, vertical);
}

extern "C" void bg_QImage_rgbSwapped_inplace_(QImage * _self_) {
  _self_->rgbSwapped_inplace();
}

extern "C" QImage * bg_QImage_convertToFormat_helper_QImage__Format_Qt__ImageConversionFlags(QImage * _self_, QImage::Format format, Qt::ImageConversionFlags flags) {
  return new (UseGC) QImage (_self_->convertToFormat_helper(format, flags));
}

extern "C" bool bg_QImage_convertToFormat_inplace_QImage__Format_Qt__ImageConversionFlags(QImage * _self_, QImage::Format format, Qt::ImageConversionFlags flags) {
  return _self_->convertToFormat_inplace(format, flags);
}

extern "C" QImage * bg_QImage_smoothScaled_int_int(QImage * _self_, int w, int h) {
  return new (UseGC) QImage (_self_->smoothScaled(w, h));
}

extern "C" QPixmap * bg_QPixmap__CONSTRUCT_() {
  return new (UseGC) QPixmap();
}

extern "C" QPixmap * bg_QPixmap__CONSTRUCT_QPlatformPixmap_X(QPlatformPixmap * data) {
  return new (UseGC) QPixmap(data);
}

extern "C" QPixmap * bg_QPixmap__CONSTRUCT_int_int(int w, int h) {
  return new (UseGC) QPixmap(w, h);
}

extern "C" QPixmap * bg_QPixmap__CONSTRUCT_const_QSize_R(const QSize & unnamed_arg_0) {
  return new (UseGC) QPixmap(unnamed_arg_0);
}

extern "C" QPixmap * bg_QPixmap__CONSTRUCT_const_QString_R(const CrystalString fileName) {
  return new (UseGC) QPixmap(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" QPixmap * bg_QPixmap__CONSTRUCT_const_QString_R_const_char_X(const CrystalString fileName, const char * format) {
  return new (UseGC) QPixmap(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" QPixmap * bg_QPixmap__CONSTRUCT_const_QString_R_const_char_X_Qt__ImageConversionFlags(const CrystalString fileName, const char * format, Qt::ImageConversionFlags flags) {
  return new (UseGC) QPixmap(QString::fromUtf8(fileName.ptr, fileName.size), format, flags);
}

extern "C" QPixmap * bg_QPixmap__CONSTRUCT_const_char_Xconst_X(const char ** xpm) {
  return new (UseGC) QPixmap(xpm);
}

extern "C" void bg_QPixmap_swap_QPixmap_R(QPixmap * _self_, QPixmap & other) {
  _self_->swap(other);
}

extern "C" bool bg_QPixmap_isNull_(QPixmap * _self_) {
  return _self_->isNull();
}

extern "C" int bg_QPixmap_devType_(QPixmap * _self_) {
  return _self_->devType();
}

extern "C" int bg_QPixmap_width_(QPixmap * _self_) {
  return _self_->width();
}

extern "C" int bg_QPixmap_height_(QPixmap * _self_) {
  return _self_->height();
}

extern "C" QSize * bg_QPixmap_size_(QPixmap * _self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" QRect * bg_QPixmap_rect_(QPixmap * _self_) {
  return new (UseGC) QRect (_self_->rect());
}

extern "C" int bg_QPixmap_depth_(QPixmap * _self_) {
  return _self_->depth();
}

extern "C" int bg_QPixmap_defaultDepth_STATIC_() {
  return QPixmap::defaultDepth();
}

extern "C" void bg_QPixmap_fill_(QPixmap * _self_) {
  _self_->fill();
}

extern "C" void bg_QPixmap_fill_const_QColor_R(QPixmap * _self_, const QColor & fillColor) {
  _self_->fill(fillColor);
}

extern "C" void bg_QPixmap_fill_const_QPaintDevice_X_const_QPoint_R(QPixmap * _self_, const QPaintDevice * device, const QPoint ofs) {
  _self_->fill(device, ofs);
}

extern "C" void bg_QPixmap_fill_const_QPaintDevice_X_int_int(QPixmap * _self_, const QPaintDevice * device, int xofs, int yofs) {
  _self_->fill(device, xofs, yofs);
}

extern "C" QBitmap * bg_QPixmap_mask_(QPixmap * _self_) {
  return new (UseGC) QBitmap (_self_->mask());
}

extern "C" void bg_QPixmap_setMask_const_QBitmap_R(QPixmap * _self_, const QBitmap & unnamed_arg_0) {
  _self_->setMask(unnamed_arg_0);
}

extern "C" qreal bg_QPixmap_devicePixelRatio_(QPixmap * _self_) {
  return _self_->devicePixelRatio();
}

extern "C" void bg_QPixmap_setDevicePixelRatio_qreal(QPixmap * _self_, qreal scaleFactor) {
  _self_->setDevicePixelRatio(scaleFactor);
}

extern "C" bool bg_QPixmap_hasAlpha_(QPixmap * _self_) {
  return _self_->hasAlpha();
}

extern "C" bool bg_QPixmap_hasAlphaChannel_(QPixmap * _self_) {
  return _self_->hasAlphaChannel();
}

extern "C" QBitmap * bg_QPixmap_createHeuristicMask_bool(QPixmap * _self_, bool clipTight) {
  return new (UseGC) QBitmap (_self_->createHeuristicMask(clipTight));
}

extern "C" QBitmap * bg_QPixmap_createMaskFromColor_const_QColor_R_Qt__MaskMode(QPixmap * _self_, const QColor & maskColor, Qt::MaskMode mode) {
  return new (UseGC) QBitmap (_self_->createMaskFromColor(maskColor, mode));
}

extern "C" QPixmap * bg_QPixmap_grabWindow_STATIC_WId_int_int_int_int(WId unnamed_arg_0, int x, int y, int w, int h) {
  return new (UseGC) QPixmap (QPixmap::grabWindow(unnamed_arg_0, x, y, w, h));
}

extern "C" QPixmap * bg_QPixmap_grabWidget_STATIC_QObject_X_const_QRect_R(QObject * widget, const QRect & rect) {
  return new (UseGC) QPixmap (QPixmap::grabWidget(widget, rect));
}

extern "C" QPixmap * bg_QPixmap_grabWidget_STATIC_QObject_X_int_int_int_int(QObject * widget, int x, int y, int w, int h) {
  return new (UseGC) QPixmap (QPixmap::grabWidget(widget, x, y, w, h));
}

extern "C" QPixmap * bg_QPixmap_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(QPixmap * _self_, int w, int h, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->scaled(w, h, aspectMode, mode));
}

extern "C" QPixmap * bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(QPixmap * _self_, const QSize & s, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->scaled(s, aspectMode, mode));
}

extern "C" QPixmap * bg_QPixmap_scaledToWidth_int_Qt__TransformationMode(QPixmap * _self_, int w, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->scaledToWidth(w, mode));
}

extern "C" QPixmap * bg_QPixmap_scaledToHeight_int_Qt__TransformationMode(QPixmap * _self_, int h, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->scaledToHeight(h, mode));
}

extern "C" QPixmap * bg_QPixmap_transformed_const_QMatrix_R_Qt__TransformationMode(QPixmap * _self_, const QMatrix & unnamed_arg_0, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->transformed(unnamed_arg_0, mode));
}

extern "C" QMatrix * bg_QPixmap_trueMatrix_STATIC_const_QMatrix_R_int_int(const QMatrix & m, int w, int h) {
  return new (UseGC) QMatrix (QPixmap::trueMatrix(m, w, h));
}

extern "C" QPixmap * bg_QPixmap_transformed_const_QTransform_R_Qt__TransformationMode(QPixmap * _self_, const QTransform & unnamed_arg_0, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->transformed(unnamed_arg_0, mode));
}

extern "C" QTransform * bg_QPixmap_trueMatrix_STATIC_const_QTransform_R_int_int(const QTransform & m, int w, int h) {
  return new (UseGC) QTransform (QPixmap::trueMatrix(m, w, h));
}

extern "C" QImage * bg_QPixmap_toImage_(QPixmap * _self_) {
  return new (UseGC) QImage (_self_->toImage());
}

extern "C" QPixmap * bg_QPixmap_fromImage_STATIC_const_QImage_R(const QImage & image) {
  return new (UseGC) QPixmap (QPixmap::fromImage(image));
}

extern "C" QPixmap * bg_QPixmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(const QImage & image, Qt::ImageConversionFlags flags) {
  return new (UseGC) QPixmap (QPixmap::fromImage(image, flags));
}

extern "C" QPixmap * bg_QPixmap_fromImageReader_STATIC_QImageReader_X(QImageReader * imageReader) {
  return new (UseGC) QPixmap (QPixmap::fromImageReader(imageReader));
}

extern "C" QPixmap * bg_QPixmap_fromImageReader_STATIC_QImageReader_X_Qt__ImageConversionFlags(QImageReader * imageReader, Qt::ImageConversionFlags flags) {
  return new (UseGC) QPixmap (QPixmap::fromImageReader(imageReader, flags));
}

extern "C" bool bg_QPixmap_load_const_QString_R(QPixmap * _self_, const CrystalString fileName) {
  return _self_->load(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" bool bg_QPixmap_load_const_QString_R_const_char_X(QPixmap * _self_, const CrystalString fileName, const char * format) {
  return _self_->load(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" bool bg_QPixmap_load_const_QString_R_const_char_X_Qt__ImageConversionFlags(QPixmap * _self_, const CrystalString fileName, const char * format, Qt::ImageConversionFlags flags) {
  return _self_->load(QString::fromUtf8(fileName.ptr, fileName.size), format, flags);
}

extern "C" bool bg_QPixmap_loadFromData_const_uchar_X_uint(QPixmap * _self_, const uchar * buf, uint len) {
  return _self_->loadFromData(buf, len);
}

extern "C" bool bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X(QPixmap * _self_, const uchar * buf, uint len, const char * format) {
  return _self_->loadFromData(buf, len, format);
}

extern "C" bool bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X_Qt__ImageConversionFlags(QPixmap * _self_, const uchar * buf, uint len, const char * format, Qt::ImageConversionFlags flags) {
  return _self_->loadFromData(buf, len, format, flags);
}

extern "C" bool bg_QPixmap_loadFromData_const_QByteArray_R(QPixmap * _self_, const QByteArray & data) {
  return _self_->loadFromData(data);
}

extern "C" bool bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X(QPixmap * _self_, const QByteArray & data, const char * format) {
  return _self_->loadFromData(data, format);
}

extern "C" bool bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X_Qt__ImageConversionFlags(QPixmap * _self_, const QByteArray & data, const char * format, Qt::ImageConversionFlags flags) {
  return _self_->loadFromData(data, format, flags);
}

extern "C" bool bg_QPixmap_save_const_QString_R(QPixmap * _self_, const CrystalString fileName) {
  return _self_->save(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" bool bg_QPixmap_save_const_QString_R_const_char_X(QPixmap * _self_, const CrystalString fileName, const char * format) {
  return _self_->save(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" bool bg_QPixmap_save_const_QString_R_const_char_X_int(QPixmap * _self_, const CrystalString fileName, const char * format, int quality) {
  return _self_->save(QString::fromUtf8(fileName.ptr, fileName.size), format, quality);
}

extern "C" bool bg_QPixmap_save_QIODevice_X(QPixmap * _self_, QIODevice * device) {
  return _self_->save(device);
}

extern "C" bool bg_QPixmap_save_QIODevice_X_const_char_X(QPixmap * _self_, QIODevice * device, const char * format) {
  return _self_->save(device, format);
}

extern "C" bool bg_QPixmap_save_QIODevice_X_const_char_X_int(QPixmap * _self_, QIODevice * device, const char * format, int quality) {
  return _self_->save(device, format, quality);
}

extern "C" bool bg_QPixmap_convertFromImage_const_QImage_R(QPixmap * _self_, const QImage & img) {
  return _self_->convertFromImage(img);
}

extern "C" bool bg_QPixmap_convertFromImage_const_QImage_R_Qt__ImageConversionFlags(QPixmap * _self_, const QImage & img, Qt::ImageConversionFlags flags) {
  return _self_->convertFromImage(img, flags);
}

extern "C" QPixmap * bg_QPixmap_copy_int_int_int_int(QPixmap * _self_, int x, int y, int width, int height) {
  return new (UseGC) QPixmap (_self_->copy(x, y, width, height));
}

extern "C" QPixmap * bg_QPixmap_copy_(QPixmap * _self_) {
  return new (UseGC) QPixmap (_self_->copy());
}

extern "C" QPixmap * bg_QPixmap_copy_const_QRect_R(QPixmap * _self_, const QRect & rect) {
  return new (UseGC) QPixmap (_self_->copy(rect));
}

extern "C" void bg_QPixmap_scroll_int_int_int_int_int_int_QRegion_X(QPixmap * _self_, int dx, int dy, int x, int y, int width, int height, QRegion * exposed) {
  _self_->scroll(dx, dy, x, y, width, height, exposed);
}

extern "C" void bg_QPixmap_scroll_int_int_const_QRect_R_QRegion_X(QPixmap * _self_, int dx, int dy, const QRect & rect, QRegion * exposed) {
  _self_->scroll(dx, dy, rect, exposed);
}

extern "C" qint64 bg_QPixmap_cacheKey_(QPixmap * _self_) {
  return _self_->cacheKey();
}

extern "C" bool bg_QPixmap_isDetached_(QPixmap * _self_) {
  return _self_->isDetached();
}

extern "C" void bg_QPixmap_detach_(QPixmap * _self_) {
  _self_->detach();
}

extern "C" bool bg_QPixmap_isQBitmap_(QPixmap * _self_) {
  return _self_->isQBitmap();
}

extern "C" QPaintEngine * bg_QPixmap_paintEngine_(QPixmap * _self_) {
  return _self_->paintEngine();
}

extern "C" int bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(QPixmap * _self_, QPaintDevice::PaintDeviceMetric unnamed_arg_0) {
  return _self_->metric(unnamed_arg_0);
}

extern "C" QPixmap * bg_QPixmap_fromImageInPlace_STATIC_QImage_R(QImage & image) {
  return new (UseGC) QPixmap (QPixmap::fromImageInPlace(image));
}

extern "C" QPixmap * bg_QPixmap_fromImageInPlace_STATIC_QImage_R_Qt__ImageConversionFlags(QImage & image, Qt::ImageConversionFlags flags) {
  return new (UseGC) QPixmap (QPixmap::fromImageInPlace(image, flags));
}

extern "C" QPlatformPixmap * bg_QPixmap_handle_(QPixmap * _self_) {
  return _self_->handle();
}

extern "C" QIcon * bg_QIcon__CONSTRUCT_() {
  return new (UseGC) QIcon();
}

extern "C" QIcon * bg_QIcon__CONSTRUCT_const_QPixmap_R(const QPixmap & pixmap) {
  return new (UseGC) QIcon(pixmap);
}

extern "C" QIcon * bg_QIcon__CONSTRUCT_const_QString_R(const CrystalString fileName) {
  return new (UseGC) QIcon(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" QIcon * bg_QIcon__CONSTRUCT_QIconEngine_X(QIconEngine * engine) {
  return new (UseGC) QIcon(engine);
}

extern "C" void bg_QIcon_swap_QIcon_R(QIcon * _self_, QIcon & other) {
  _self_->swap(other);
}

extern "C" QPixmap * bg_QIcon_pixmap_const_QSize_R_QIcon__Mode_QIcon__State(QIcon * _self_, const QSize & size, QIcon::Mode mode, QIcon::State state) {
  return new (UseGC) QPixmap (_self_->pixmap(size, mode, state));
}

extern "C" QPixmap * bg_QIcon_pixmap_int_int_QIcon__Mode_QIcon__State(QIcon * _self_, int w, int h, QIcon::Mode mode, QIcon::State state) {
  return new (UseGC) QPixmap (_self_->pixmap(w, h, mode, state));
}

extern "C" QPixmap * bg_QIcon_pixmap_int_QIcon__Mode_QIcon__State(QIcon * _self_, int extent, QIcon::Mode mode, QIcon::State state) {
  return new (UseGC) QPixmap (_self_->pixmap(extent, mode, state));
}

extern "C" QPixmap * bg_QIcon_pixmap_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(QIcon * _self_, QWindow * window, const QSize & size, QIcon::Mode mode, QIcon::State state) {
  return new (UseGC) QPixmap (_self_->pixmap(window, size, mode, state));
}

extern "C" QSize * bg_QIcon_actualSize_const_QSize_R_QIcon__Mode_QIcon__State(QIcon * _self_, const QSize & size, QIcon::Mode mode, QIcon::State state) {
  return new (UseGC) QSize (_self_->actualSize(size, mode, state));
}

extern "C" QSize * bg_QIcon_actualSize_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(QIcon * _self_, QWindow * window, const QSize & size, QIcon::Mode mode, QIcon::State state) {
  return new (UseGC) QSize (_self_->actualSize(window, size, mode, state));
}

extern "C" CrystalString bg_QIcon_name_(QIcon * _self_) {
  return qstring_to_crystal(_self_->name());
}

extern "C" void bg_QIcon_paint_QPainter_X_const_QRect_R(QIcon * _self_, QPainter * painter, const QRect & rect) {
  _self_->paint(painter, rect);
}

extern "C" void bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment(QIcon * _self_, QPainter * painter, const QRect & rect, Qt::Alignment alignment) {
  _self_->paint(painter, rect, alignment);
}

extern "C" void bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode(QIcon * _self_, QPainter * painter, const QRect & rect, Qt::Alignment alignment, QIcon::Mode mode) {
  _self_->paint(painter, rect, alignment, mode);
}

extern "C" void bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode_QIcon__State(QIcon * _self_, QPainter * painter, const QRect & rect, Qt::Alignment alignment, QIcon::Mode mode, QIcon::State state) {
  _self_->paint(painter, rect, alignment, mode, state);
}

extern "C" void bg_QIcon_paint_QPainter_X_int_int_int_int(QIcon * _self_, QPainter * painter, int x, int y, int w, int h) {
  _self_->paint(painter, x, y, w, h);
}

extern "C" void bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment(QIcon * _self_, QPainter * painter, int x, int y, int w, int h, Qt::Alignment alignment) {
  _self_->paint(painter, x, y, w, h, alignment);
}

extern "C" void bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode(QIcon * _self_, QPainter * painter, int x, int y, int w, int h, Qt::Alignment alignment, QIcon::Mode mode) {
  _self_->paint(painter, x, y, w, h, alignment, mode);
}

extern "C" void bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode_QIcon__State(QIcon * _self_, QPainter * painter, int x, int y, int w, int h, Qt::Alignment alignment, QIcon::Mode mode, QIcon::State state) {
  _self_->paint(painter, x, y, w, h, alignment, mode, state);
}

extern "C" bool bg_QIcon_isNull_(QIcon * _self_) {
  return _self_->isNull();
}

extern "C" bool bg_QIcon_isDetached_(QIcon * _self_) {
  return _self_->isDetached();
}

extern "C" void bg_QIcon_detach_(QIcon * _self_) {
  _self_->detach();
}

extern "C" qint64 bg_QIcon_cacheKey_(QIcon * _self_) {
  return _self_->cacheKey();
}

extern "C" void bg_QIcon_addPixmap_const_QPixmap_R_QIcon__Mode_QIcon__State(QIcon * _self_, const QPixmap & pixmap, QIcon::Mode mode, QIcon::State state) {
  _self_->addPixmap(pixmap, mode, state);
}

extern "C" void bg_QIcon_addFile_const_QString_R(QIcon * _self_, const CrystalString fileName) {
  _self_->addFile(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" void bg_QIcon_addFile_const_QString_R_const_QSize_R(QIcon * _self_, const CrystalString fileName, const QSize & size) {
  _self_->addFile(QString::fromUtf8(fileName.ptr, fileName.size), size);
}

extern "C" void bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode(QIcon * _self_, const CrystalString fileName, const QSize & size, QIcon::Mode mode) {
  _self_->addFile(QString::fromUtf8(fileName.ptr, fileName.size), size, mode);
}

extern "C" void bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode_QIcon__State(QIcon * _self_, const CrystalString fileName, const QSize & size, QIcon::Mode mode, QIcon::State state) {
  _self_->addFile(QString::fromUtf8(fileName.ptr, fileName.size), size, mode, state);
}

extern "C" Container_QList_QSize * bg_QIcon_availableSizes_QIcon__Mode_QIcon__State(QIcon * _self_, QIcon::Mode mode, QIcon::State state) {
  return new (UseGC) Container_QList_QSize (_self_->availableSizes(mode, state));
}

extern "C" void bg_QIcon_setIsMask_bool(QIcon * _self_, bool isMask) {
  _self_->setIsMask(isMask);
}

extern "C" bool bg_QIcon_isMask_(QIcon * _self_) {
  return _self_->isMask();
}

extern "C" QIcon * bg_QIcon_fromTheme_STATIC_const_QString_R(const CrystalString name) {
  return new (UseGC) QIcon (QIcon::fromTheme(QString::fromUtf8(name.ptr, name.size)));
}

extern "C" QIcon * bg_QIcon_fromTheme_STATIC_const_QString_R_const_QIcon_R(const CrystalString name, const QIcon & fallback) {
  return new (UseGC) QIcon (QIcon::fromTheme(QString::fromUtf8(name.ptr, name.size), fallback));
}

extern "C" bool bg_QIcon_hasThemeIcon_STATIC_const_QString_R(const CrystalString name) {
  return QIcon::hasThemeIcon(QString::fromUtf8(name.ptr, name.size));
}

extern "C" QStringList * bg_QIcon_themeSearchPaths_STATIC_() {
  return new (UseGC) QStringList (QIcon::themeSearchPaths());
}

extern "C" void bg_QIcon_setThemeSearchPaths_STATIC_const_QStringList_R(const QStringList & searchpath) {
  QIcon::setThemeSearchPaths(searchpath);
}

extern "C" CrystalString bg_QIcon_themeName_STATIC_() {
  return qstring_to_crystal(QIcon::themeName());
}

extern "C" void bg_QIcon_setThemeName_STATIC_const_QString_R(const CrystalString path) {
  QIcon::setThemeName(QString::fromUtf8(path.ptr, path.size));
}

struct BgJumptable_EventLoop {
  CrystalProc<const QMetaObject *> bg_QEventLoop_metaObject_;
  CrystalProc<void *, const char *> bg_QEventLoop_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QEventLoop_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_EventLoop : public QEventLoop {
  using QEventLoop::QEventLoop;
  BgJumptable_EventLoop bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QEventLoop_metaObject_.isValid()) {
      return _self_->bgJump.bg_QEventLoop_metaObject_();
    } else {
      return QEventLoop::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QEventLoop_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QEventLoop_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QEventLoop::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QEventLoop::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QEventLoop_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QEventLoop_event_QEvent_X(event);
    } else {
      return QEventLoop::event(event);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QEventLoop::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QEventLoop::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QEventLoop::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QEventLoop::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QEventLoop::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_EventLoop *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QEventLoop::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QEventLoop_metaObject_(QEventLoop * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QEventLoop_qt_metacast_const_char_X(QEventLoop * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX(QEventLoop * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QEventLoop_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QEventLoop::tr(s));
}

extern "C" CrystalString bg_QEventLoop_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QEventLoop::tr(s, c));
}

extern "C" CrystalString bg_QEventLoop_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QEventLoop::tr(s, c, n));
}

extern "C" CrystalString bg_QEventLoop_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QEventLoop::trUtf8(s));
}

extern "C" CrystalString bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QEventLoop::trUtf8(s, c));
}

extern "C" CrystalString bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QEventLoop::trUtf8(s, c, n));
}

extern "C" QEventLoop * bg_QEventLoop__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_EventLoop(parent);
}

extern "C" bool bg_QEventLoop_processEvents_(QEventLoop * _self_) {
  return _self_->processEvents();
}

extern "C" bool bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags(QEventLoop * _self_, QEventLoop::ProcessEventsFlags flags) {
  return _self_->processEvents(flags);
}

extern "C" void bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags_int(QEventLoop * _self_, QEventLoop::ProcessEventsFlags flags, int maximumTime) {
  _self_->processEvents(flags, maximumTime);
}

extern "C" int bg_QEventLoop_exec_(QEventLoop * _self_) {
  return _self_->exec();
}

extern "C" int bg_QEventLoop_exec_QEventLoop__ProcessEventsFlags(QEventLoop * _self_, QEventLoop::ProcessEventsFlags flags) {
  return _self_->exec(flags);
}

extern "C" void bg_QEventLoop_exit_int(QEventLoop * _self_, int returnCode) {
  _self_->exit(returnCode);
}

extern "C" bool bg_QEventLoop_isRunning_(QEventLoop * _self_) {
  return _self_->isRunning();
}

extern "C" void bg_QEventLoop_wakeUp_(QEventLoop * _self_) {
  _self_->wakeUp();
}

extern "C" bool bg_QEventLoop_event_QEvent_X(QEventLoop * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" void bg_QEventLoop_quit_(QEventLoop * _self_) {
  _self_->quit();
}

extern "C" void bg_BgInherit_EventLoop_JUMPTABLE_BgJumptable_EventLoop_R(BgInherit_EventLoop * _self_, const BgJumptable_EventLoop & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_TabBar {
  CrystalProc<const QMetaObject *> bg_QTabBar_metaObject_;
  CrystalProc<void *, const char *> bg_QTabBar_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QTabBar_sizeHint_;
  CrystalProc<QSize &> bg_QTabBar_minimumSizeHint_;
  CrystalProc<QSize &, int> bg_QTabBar_tabSizeHint_int;
  CrystalProc<QSize &, int> bg_QTabBar_minimumTabSizeHint_int;
  CrystalProc<void, int> bg_QTabBar_tabInserted_int;
  CrystalProc<void, int> bg_QTabBar_tabRemoved_int;
  CrystalProc<void> bg_QTabBar_tabLayoutChange_;
  CrystalProc<bool, QEvent *> bg_QTabBar_event_QEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QTabBar_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QShowEvent *> bg_QTabBar_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QTabBar_hideEvent_QHideEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QTabBar_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QTabBar_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QTabBar_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QTabBar_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QTabBar_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QTabBar_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QEvent *> bg_QTabBar_changeEvent_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QTabBar_timerEvent_QTimerEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_TabBar : public QTabBar {
  using QTabBar::QTabBar;
  BgJumptable_TabBar bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_metaObject_.isValid()) {
      return _self_->bgJump.bg_QTabBar_metaObject_();
    } else {
      return QTabBar::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QTabBar_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QTabBar::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QTabBar::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QTabBar_sizeHint_();
    } else {
      return QTabBar::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QTabBar_minimumSizeHint_();
    } else {
      return QTabBar::minimumSizeHint();
    }
  }
  
  QSize tabSizeHint(int index) const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_tabSizeHint_int.isValid()) {
      return _self_->bgJump.bg_QTabBar_tabSizeHint_int(index);
    } else {
      return QTabBar::tabSizeHint(index);
    }
  }
  
  QSize minimumTabSizeHint(int index) const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_minimumTabSizeHint_int.isValid()) {
      return _self_->bgJump.bg_QTabBar_minimumTabSizeHint_int(index);
    } else {
      return QTabBar::minimumTabSizeHint(index);
    }
  }
  
  void tabInserted(int index) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_tabInserted_int.isValid()) {
      _self_->bgJump.bg_QTabBar_tabInserted_int(index);
    } else {
      QTabBar::tabInserted(index);
    }
  }
  
  void tabRemoved(int index) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_tabRemoved_int.isValid()) {
      _self_->bgJump.bg_QTabBar_tabRemoved_int(index);
    } else {
      QTabBar::tabRemoved(index);
    }
  }
  
  void tabLayoutChange() override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_tabLayoutChange_.isValid()) {
      _self_->bgJump.bg_QTabBar_tabLayoutChange_();
    } else {
      QTabBar::tabLayoutChange();
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QTabBar_event_QEvent_X(unnamed_arg_0);
    } else {
      return QTabBar::event(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QTabBar::resizeEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QTabBar::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QTabBar::hideEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QTabBar::paintEvent(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QTabBar::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QTabBar::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QTabBar::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * event) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_wheelEvent_QWheelEvent_X(event);
    } else {
      QTabBar::wheelEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QTabBar::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QTabBar::changeEvent(unnamed_arg_0);
    }
  }
  
  void timerEvent(QTimerEvent * event) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QTabBar_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QTabBar_timerEvent_QTimerEvent_X(event);
    } else {
      QTabBar::timerEvent(event);
    }
  }
  
  int devType() const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QTabBar::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QTabBar::setVisible(visible);
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QTabBar::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QTabBar::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QTabBar::paintEngine();
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QTabBar::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QTabBar::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QTabBar::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QTabBar::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QTabBar::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QTabBar::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QTabBar::moveEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QTabBar::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QTabBar::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QTabBar::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QTabBar::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QTabBar::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QTabBar::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QTabBar::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QTabBar::dropEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QTabBar::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QTabBar::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QTabBar::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QTabBar::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QTabBar::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QTabBar::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_TabBar *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QTabBar::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QTabBar_metaObject_(QTabBar * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QTabBar_qt_metacast_const_char_X(QTabBar * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX(QTabBar * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QTabBar_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTabBar::tr(s));
}

extern "C" CrystalString bg_QTabBar_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTabBar::tr(s, c));
}

extern "C" CrystalString bg_QTabBar_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTabBar::tr(s, c, n));
}

extern "C" CrystalString bg_QTabBar_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTabBar::trUtf8(s));
}

extern "C" CrystalString bg_QTabBar_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTabBar::trUtf8(s, c));
}

extern "C" CrystalString bg_QTabBar_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTabBar::trUtf8(s, c, n));
}

extern "C" QTabBar * bg_QTabBar__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_TabBar(parent);
}

extern "C" QTabBar::Shape bg_QTabBar_shape_(QTabBar * _self_) {
  return _self_->shape();
}

extern "C" void bg_QTabBar_setShape_QTabBar__Shape(QTabBar * _self_, QTabBar::Shape shape) {
  _self_->setShape(shape);
}

extern "C" int bg_QTabBar_addTab_const_QString_R(QTabBar * _self_, const CrystalString text) {
  return _self_->addTab(QString::fromUtf8(text.ptr, text.size));
}

extern "C" int bg_QTabBar_addTab_const_QIcon_R_const_QString_R(QTabBar * _self_, const QIcon & icon, const CrystalString text) {
  return _self_->addTab(icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" int bg_QTabBar_insertTab_int_const_QString_R(QTabBar * _self_, int index, const CrystalString text) {
  return _self_->insertTab(index, QString::fromUtf8(text.ptr, text.size));
}

extern "C" int bg_QTabBar_insertTab_int_const_QIcon_R_const_QString_R(QTabBar * _self_, int index, const QIcon & icon, const CrystalString text) {
  return _self_->insertTab(index, icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTabBar_removeTab_int(QTabBar * _self_, int index) {
  _self_->removeTab(index);
}

extern "C" void bg_QTabBar_moveTab_int_int(QTabBar * _self_, int from, int to) {
  _self_->moveTab(from, to);
}

extern "C" bool bg_QTabBar_isTabEnabled_int(QTabBar * _self_, int index) {
  return _self_->isTabEnabled(index);
}

extern "C" void bg_QTabBar_setTabEnabled_int_bool(QTabBar * _self_, int index, bool unnamed_arg_1) {
  _self_->setTabEnabled(index, unnamed_arg_1);
}

extern "C" CrystalString bg_QTabBar_tabText_int(QTabBar * _self_, int index) {
  return qstring_to_crystal(_self_->tabText(index));
}

extern "C" void bg_QTabBar_setTabText_int_const_QString_R(QTabBar * _self_, int index, const CrystalString text) {
  _self_->setTabText(index, QString::fromUtf8(text.ptr, text.size));
}

extern "C" QColor * bg_QTabBar_tabTextColor_int(QTabBar * _self_, int index) {
  return new (UseGC) QColor (_self_->tabTextColor(index));
}

extern "C" void bg_QTabBar_setTabTextColor_int_const_QColor_R(QTabBar * _self_, int index, const QColor & color) {
  _self_->setTabTextColor(index, color);
}

extern "C" QIcon * bg_QTabBar_tabIcon_int(QTabBar * _self_, int index) {
  return new (UseGC) QIcon (_self_->tabIcon(index));
}

extern "C" void bg_QTabBar_setTabIcon_int_const_QIcon_R(QTabBar * _self_, int index, const QIcon & icon) {
  _self_->setTabIcon(index, icon);
}

extern "C" Qt::TextElideMode bg_QTabBar_elideMode_(QTabBar * _self_) {
  return _self_->elideMode();
}

extern "C" void bg_QTabBar_setElideMode_Qt__TextElideMode(QTabBar * _self_, Qt::TextElideMode unnamed_arg_0) {
  _self_->setElideMode(unnamed_arg_0);
}

extern "C" void bg_QTabBar_setTabToolTip_int_const_QString_R(QTabBar * _self_, int index, const CrystalString tip) {
  _self_->setTabToolTip(index, QString::fromUtf8(tip.ptr, tip.size));
}

extern "C" CrystalString bg_QTabBar_tabToolTip_int(QTabBar * _self_, int index) {
  return qstring_to_crystal(_self_->tabToolTip(index));
}

extern "C" void bg_QTabBar_setTabWhatsThis_int_const_QString_R(QTabBar * _self_, int index, const CrystalString text) {
  _self_->setTabWhatsThis(index, QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QTabBar_tabWhatsThis_int(QTabBar * _self_, int index) {
  return qstring_to_crystal(_self_->tabWhatsThis(index));
}

extern "C" void bg_QTabBar_setTabData_int_const_QVariant_R(QTabBar * _self_, int index, const CrystalVariant data) {
  _self_->setTabData(index, crystal_to_qvariant(data));
}

extern "C" CrystalVariant bg_QTabBar_tabData_int(QTabBar * _self_, int index) {
  return qvariant_to_crystal(_self_->tabData(index));
}

extern "C" QRect * bg_QTabBar_tabRect_int(QTabBar * _self_, int index) {
  return new (UseGC) QRect (_self_->tabRect(index));
}

extern "C" int bg_QTabBar_tabAt_const_QPoint_R(QTabBar * _self_, const QPoint pos) {
  return _self_->tabAt(pos);
}

extern "C" int bg_QTabBar_currentIndex_(QTabBar * _self_) {
  return _self_->currentIndex();
}

extern "C" int bg_QTabBar_count_(QTabBar * _self_) {
  return _self_->count();
}

extern "C" QSize * bg_QTabBar_sizeHint_(QTabBar * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QTabBar_minimumSizeHint_(QTabBar * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QTabBar_setDrawBase_bool(QTabBar * _self_, bool drawTheBase) {
  _self_->setDrawBase(drawTheBase);
}

extern "C" bool bg_QTabBar_drawBase_(QTabBar * _self_) {
  return _self_->drawBase();
}

extern "C" QSize * bg_QTabBar_iconSize_(QTabBar * _self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" void bg_QTabBar_setIconSize_const_QSize_R(QTabBar * _self_, const QSize & size) {
  _self_->setIconSize(size);
}

extern "C" bool bg_QTabBar_usesScrollButtons_(QTabBar * _self_) {
  return _self_->usesScrollButtons();
}

extern "C" void bg_QTabBar_setUsesScrollButtons_bool(QTabBar * _self_, bool useButtons) {
  _self_->setUsesScrollButtons(useButtons);
}

extern "C" bool bg_QTabBar_tabsClosable_(QTabBar * _self_) {
  return _self_->tabsClosable();
}

extern "C" void bg_QTabBar_setTabsClosable_bool(QTabBar * _self_, bool closable) {
  _self_->setTabsClosable(closable);
}

extern "C" void bg_QTabBar_setTabButton_int_QTabBar__ButtonPosition_QWidget_X(QTabBar * _self_, int index, QTabBar::ButtonPosition position, QWidget * widget) {
  _self_->setTabButton(index, position, widget);
}

extern "C" QWidget * bg_QTabBar_tabButton_int_QTabBar__ButtonPosition(QTabBar * _self_, int index, QTabBar::ButtonPosition position) {
  return _self_->tabButton(index, position);
}

extern "C" QTabBar::SelectionBehavior bg_QTabBar_selectionBehaviorOnRemove_(QTabBar * _self_) {
  return _self_->selectionBehaviorOnRemove();
}

extern "C" void bg_QTabBar_setSelectionBehaviorOnRemove_QTabBar__SelectionBehavior(QTabBar * _self_, QTabBar::SelectionBehavior behavior) {
  _self_->setSelectionBehaviorOnRemove(behavior);
}

extern "C" bool bg_QTabBar_expanding_(QTabBar * _self_) {
  return _self_->expanding();
}

extern "C" void bg_QTabBar_setExpanding_bool(QTabBar * _self_, bool enabled) {
  _self_->setExpanding(enabled);
}

extern "C" bool bg_QTabBar_isMovable_(QTabBar * _self_) {
  return _self_->isMovable();
}

extern "C" void bg_QTabBar_setMovable_bool(QTabBar * _self_, bool movable) {
  _self_->setMovable(movable);
}

extern "C" bool bg_QTabBar_documentMode_(QTabBar * _self_) {
  return _self_->documentMode();
}

extern "C" void bg_QTabBar_setDocumentMode_bool(QTabBar * _self_, bool set) {
  _self_->setDocumentMode(set);
}

extern "C" bool bg_QTabBar_autoHide_(QTabBar * _self_) {
  return _self_->autoHide();
}

extern "C" void bg_QTabBar_setAutoHide_bool(QTabBar * _self_, bool hide) {
  _self_->setAutoHide(hide);
}

extern "C" bool bg_QTabBar_changeCurrentOnDrag_(QTabBar * _self_) {
  return _self_->changeCurrentOnDrag();
}

extern "C" void bg_QTabBar_setChangeCurrentOnDrag_bool(QTabBar * _self_, bool change) {
  _self_->setChangeCurrentOnDrag(change);
}

extern "C" void bg_QTabBar_setCurrentIndex_int(QTabBar * _self_, int index) {
  _self_->setCurrentIndex(index);
}

extern "C" void bg_QTabBar_currentChanged_int(QTabBar * _self_, int index) {
  _self_->currentChanged(index);
}

extern "C" void bg_QTabBar_tabCloseRequested_int(QTabBar * _self_, int index) {
  _self_->tabCloseRequested(index);
}

extern "C" void bg_QTabBar_tabMoved_int_int(QTabBar * _self_, int from, int to) {
  _self_->tabMoved(from, to);
}

extern "C" void bg_QTabBar_tabBarClicked_int(QTabBar * _self_, int index) {
  _self_->tabBarClicked(index);
}

extern "C" void bg_QTabBar_tabBarDoubleClicked_int(QTabBar * _self_, int index) {
  _self_->tabBarDoubleClicked(index);
}

extern "C" QSize * bg_QTabBar_tabSizeHint_int(QTabBar * _self_, int index) {
  return new (UseGC) QSize (_self_->tabSizeHint(index));
}

extern "C" QSize * bg_QTabBar_minimumTabSizeHint_int(QTabBar * _self_, int index) {
  return new (UseGC) QSize (_self_->minimumTabSizeHint(index));
}

extern "C" void bg_QTabBar_tabInserted_int(QTabBar * _self_, int index) {
  _self_->tabInserted(index);
}

extern "C" void bg_QTabBar_tabRemoved_int(QTabBar * _self_, int index) {
  _self_->tabRemoved(index);
}

extern "C" void bg_QTabBar_tabLayoutChange_(QTabBar * _self_) {
  _self_->tabLayoutChange();
}

extern "C" bool bg_QTabBar_event_QEvent_X(QTabBar * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" void bg_QTabBar_resizeEvent_QResizeEvent_X(QTabBar * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_showEvent_QShowEvent_X(QTabBar * _self_, QShowEvent * unnamed_arg_0) {
  _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_hideEvent_QHideEvent_X(QTabBar * _self_, QHideEvent * unnamed_arg_0) {
  _self_->hideEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_paintEvent_QPaintEvent_X(QTabBar * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_mousePressEvent_QMouseEvent_X(QTabBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_mouseMoveEvent_QMouseEvent_X(QTabBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_mouseReleaseEvent_QMouseEvent_X(QTabBar * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_wheelEvent_QWheelEvent_X(QTabBar * _self_, QWheelEvent * event) {
  _self_->wheelEvent(event);
}

extern "C" void bg_QTabBar_keyPressEvent_QKeyEvent_X(QTabBar * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_changeEvent_QEvent_X(QTabBar * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QTabBar_timerEvent_QTimerEvent_X(QTabBar * _self_, QTimerEvent * event) {
  _self_->timerEvent(event);
}

extern "C" void bg_QTabBar_initStyleOption_QStyleOptionTab_X_int(QTabBar * _self_, QStyleOptionTab * option, int tabIndex) {
  _self_->initStyleOption(option, tabIndex);
}

extern "C" QMetaObject::Connection * bg_QTabBar_CONNECT_currentChanged_CrystalProc_void_int(QTabBar * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabBar::*)(int))&QTabBar::currentChanged, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QTabBar_CONNECT_tabCloseRequested_CrystalProc_void_int(QTabBar * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabBar::*)(int))&QTabBar::tabCloseRequested, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QTabBar_CONNECT_tabMoved_CrystalProc_void_int_int(QTabBar * _self_, CrystalProc<void, int, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabBar::*)(int, int))&QTabBar::tabMoved, [_proc_](int from, int to){ _proc_(from, to); }));
}

extern "C" QMetaObject::Connection * bg_QTabBar_CONNECT_tabBarClicked_CrystalProc_void_int(QTabBar * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabBar::*)(int))&QTabBar::tabBarClicked, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QTabBar_CONNECT_tabBarDoubleClicked_CrystalProc_void_int(QTabBar * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabBar::*)(int))&QTabBar::tabBarDoubleClicked, [_proc_](int index){ _proc_(index); }));
}

extern "C" void bg_BgInherit_TabBar_JUMPTABLE_BgJumptable_TabBar_R(BgInherit_TabBar * _self_, const BgJumptable_TabBar & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_TabWidget {
  CrystalProc<const QMetaObject *> bg_QTabWidget_metaObject_;
  CrystalProc<void *, const char *> bg_QTabWidget_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QTabWidget_sizeHint_;
  CrystalProc<QSize &> bg_QTabWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QTabWidget_heightForWidth_int;
  CrystalProc<bool> bg_QTabWidget_hasHeightForWidth_;
  CrystalProc<void, int> bg_QTabWidget_tabInserted_int;
  CrystalProc<void, int> bg_QTabWidget_tabRemoved_int;
  CrystalProc<void, QShowEvent *> bg_QTabWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QTabWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QTabWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QTabWidget_paintEvent_QPaintEvent_X;
  CrystalProc<void, QEvent *> bg_QTabWidget_changeEvent_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QTabWidget_event_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_TabWidget : public QTabWidget {
  using QTabWidget::QTabWidget;
  BgJumptable_TabWidget bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_metaObject_.isValid()) {
      return _self_->bgJump.bg_QTabWidget_metaObject_();
    } else {
      return QTabWidget::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QTabWidget_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QTabWidget::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QTabWidget::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QTabWidget_sizeHint_();
    } else {
      return QTabWidget::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QTabWidget_minimumSizeHint_();
    } else {
      return QTabWidget::minimumSizeHint();
    }
  }
  
  int heightForWidth(int width) const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QTabWidget_heightForWidth_int(width);
    } else {
      return QTabWidget::heightForWidth(width);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QTabWidget_hasHeightForWidth_();
    } else {
      return QTabWidget::hasHeightForWidth();
    }
  }
  
  void tabInserted(int index) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_tabInserted_int.isValid()) {
      _self_->bgJump.bg_QTabWidget_tabInserted_int(index);
    } else {
      QTabWidget::tabInserted(index);
    }
  }
  
  void tabRemoved(int index) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_tabRemoved_int.isValid()) {
      _self_->bgJump.bg_QTabWidget_tabRemoved_int(index);
    } else {
      QTabWidget::tabRemoved(index);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QTabWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::showEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QTabWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::resizeEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QTabWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QTabWidget_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::paintEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QTabWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::changeEvent(unnamed_arg_0);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QTabWidget_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QTabWidget_event_QEvent_X(unnamed_arg_0);
    } else {
      return QTabWidget::event(unnamed_arg_0);
    }
  }
  
  int devType() const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QTabWidget::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QTabWidget::setVisible(visible);
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QTabWidget::paintEngine();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::moveEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::dropEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QTabWidget::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QTabWidget::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QTabWidget::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QTabWidget::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QTabWidget::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QTabWidget::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_TabWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QTabWidget::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QTabWidget_metaObject_(QTabWidget * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QTabWidget_qt_metacast_const_char_X(QTabWidget * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX(QTabWidget * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QTabWidget_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTabWidget::tr(s));
}

extern "C" CrystalString bg_QTabWidget_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTabWidget::tr(s, c));
}

extern "C" CrystalString bg_QTabWidget_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTabWidget::tr(s, c, n));
}

extern "C" CrystalString bg_QTabWidget_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTabWidget::trUtf8(s));
}

extern "C" CrystalString bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTabWidget::trUtf8(s, c));
}

extern "C" CrystalString bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTabWidget::trUtf8(s, c, n));
}

extern "C" QTabWidget * bg_QTabWidget__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_TabWidget(parent);
}

extern "C" int bg_QTabWidget_addTab_QWidget_X_const_QString_R(QTabWidget * _self_, QWidget * widget, const CrystalString unnamed_arg_1) {
  return _self_->addTab(widget, QString::fromUtf8(unnamed_arg_1.ptr, unnamed_arg_1.size));
}

extern "C" int bg_QTabWidget_addTab_QWidget_X_const_QIcon_R_const_QString_R(QTabWidget * _self_, QWidget * widget, const QIcon & icon, const CrystalString label) {
  return _self_->addTab(widget, icon, QString::fromUtf8(label.ptr, label.size));
}

extern "C" int bg_QTabWidget_insertTab_int_QWidget_X_const_QString_R(QTabWidget * _self_, int index, QWidget * widget, const CrystalString unnamed_arg_2) {
  return _self_->insertTab(index, widget, QString::fromUtf8(unnamed_arg_2.ptr, unnamed_arg_2.size));
}

extern "C" int bg_QTabWidget_insertTab_int_QWidget_X_const_QIcon_R_const_QString_R(QTabWidget * _self_, int index, QWidget * widget, const QIcon & icon, const CrystalString label) {
  return _self_->insertTab(index, widget, icon, QString::fromUtf8(label.ptr, label.size));
}

extern "C" void bg_QTabWidget_removeTab_int(QTabWidget * _self_, int index) {
  _self_->removeTab(index);
}

extern "C" bool bg_QTabWidget_isTabEnabled_int(QTabWidget * _self_, int index) {
  return _self_->isTabEnabled(index);
}

extern "C" void bg_QTabWidget_setTabEnabled_int_bool(QTabWidget * _self_, int index, bool unnamed_arg_1) {
  _self_->setTabEnabled(index, unnamed_arg_1);
}

extern "C" CrystalString bg_QTabWidget_tabText_int(QTabWidget * _self_, int index) {
  return qstring_to_crystal(_self_->tabText(index));
}

extern "C" void bg_QTabWidget_setTabText_int_const_QString_R(QTabWidget * _self_, int index, const CrystalString unnamed_arg_1) {
  _self_->setTabText(index, QString::fromUtf8(unnamed_arg_1.ptr, unnamed_arg_1.size));
}

extern "C" QIcon * bg_QTabWidget_tabIcon_int(QTabWidget * _self_, int index) {
  return new (UseGC) QIcon (_self_->tabIcon(index));
}

extern "C" void bg_QTabWidget_setTabIcon_int_const_QIcon_R(QTabWidget * _self_, int index, const QIcon & icon) {
  _self_->setTabIcon(index, icon);
}

extern "C" void bg_QTabWidget_setTabToolTip_int_const_QString_R(QTabWidget * _self_, int index, const CrystalString tip) {
  _self_->setTabToolTip(index, QString::fromUtf8(tip.ptr, tip.size));
}

extern "C" CrystalString bg_QTabWidget_tabToolTip_int(QTabWidget * _self_, int index) {
  return qstring_to_crystal(_self_->tabToolTip(index));
}

extern "C" void bg_QTabWidget_setTabWhatsThis_int_const_QString_R(QTabWidget * _self_, int index, const CrystalString text) {
  _self_->setTabWhatsThis(index, QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QTabWidget_tabWhatsThis_int(QTabWidget * _self_, int index) {
  return qstring_to_crystal(_self_->tabWhatsThis(index));
}

extern "C" int bg_QTabWidget_currentIndex_(QTabWidget * _self_) {
  return _self_->currentIndex();
}

extern "C" QWidget * bg_QTabWidget_currentWidget_(QTabWidget * _self_) {
  return _self_->currentWidget();
}

extern "C" QWidget * bg_QTabWidget_widget_int(QTabWidget * _self_, int index) {
  return _self_->widget(index);
}

extern "C" int bg_QTabWidget_indexOf_QWidget_X(QTabWidget * _self_, QWidget * widget) {
  return _self_->indexOf(widget);
}

extern "C" int bg_QTabWidget_count_(QTabWidget * _self_) {
  return _self_->count();
}

extern "C" QTabWidget::TabPosition bg_QTabWidget_tabPosition_(QTabWidget * _self_) {
  return _self_->tabPosition();
}

extern "C" void bg_QTabWidget_setTabPosition_QTabWidget__TabPosition(QTabWidget * _self_, QTabWidget::TabPosition unnamed_arg_0) {
  _self_->setTabPosition(unnamed_arg_0);
}

extern "C" bool bg_QTabWidget_tabsClosable_(QTabWidget * _self_) {
  return _self_->tabsClosable();
}

extern "C" void bg_QTabWidget_setTabsClosable_bool(QTabWidget * _self_, bool closeable) {
  _self_->setTabsClosable(closeable);
}

extern "C" bool bg_QTabWidget_isMovable_(QTabWidget * _self_) {
  return _self_->isMovable();
}

extern "C" void bg_QTabWidget_setMovable_bool(QTabWidget * _self_, bool movable) {
  _self_->setMovable(movable);
}

extern "C" QTabWidget::TabShape bg_QTabWidget_tabShape_(QTabWidget * _self_) {
  return _self_->tabShape();
}

extern "C" void bg_QTabWidget_setTabShape_QTabWidget__TabShape(QTabWidget * _self_, QTabWidget::TabShape s) {
  _self_->setTabShape(s);
}

extern "C" QSize * bg_QTabWidget_sizeHint_(QTabWidget * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QTabWidget_minimumSizeHint_(QTabWidget * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" int bg_QTabWidget_heightForWidth_int(QTabWidget * _self_, int width) {
  return _self_->heightForWidth(width);
}

extern "C" bool bg_QTabWidget_hasHeightForWidth_(QTabWidget * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" void bg_QTabWidget_setCornerWidget_QWidget_X_Qt__Corner(QTabWidget * _self_, QWidget * w, Qt::Corner corner) {
  _self_->setCornerWidget(w, corner);
}

extern "C" QWidget * bg_QTabWidget_cornerWidget_Qt__Corner(QTabWidget * _self_, Qt::Corner corner) {
  return _self_->cornerWidget(corner);
}

extern "C" Qt::TextElideMode bg_QTabWidget_elideMode_(QTabWidget * _self_) {
  return _self_->elideMode();
}

extern "C" void bg_QTabWidget_setElideMode_Qt__TextElideMode(QTabWidget * _self_, Qt::TextElideMode unnamed_arg_0) {
  _self_->setElideMode(unnamed_arg_0);
}

extern "C" QSize * bg_QTabWidget_iconSize_(QTabWidget * _self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" void bg_QTabWidget_setIconSize_const_QSize_R(QTabWidget * _self_, const QSize & size) {
  _self_->setIconSize(size);
}

extern "C" bool bg_QTabWidget_usesScrollButtons_(QTabWidget * _self_) {
  return _self_->usesScrollButtons();
}

extern "C" void bg_QTabWidget_setUsesScrollButtons_bool(QTabWidget * _self_, bool useButtons) {
  _self_->setUsesScrollButtons(useButtons);
}

extern "C" bool bg_QTabWidget_documentMode_(QTabWidget * _self_) {
  return _self_->documentMode();
}

extern "C" void bg_QTabWidget_setDocumentMode_bool(QTabWidget * _self_, bool set) {
  _self_->setDocumentMode(set);
}

extern "C" bool bg_QTabWidget_tabBarAutoHide_(QTabWidget * _self_) {
  return _self_->tabBarAutoHide();
}

extern "C" void bg_QTabWidget_setTabBarAutoHide_bool(QTabWidget * _self_, bool enabled) {
  _self_->setTabBarAutoHide(enabled);
}

extern "C" void bg_QTabWidget_clear_(QTabWidget * _self_) {
  _self_->clear();
}

extern "C" QTabBar * bg_QTabWidget_tabBar_(QTabWidget * _self_) {
  return _self_->tabBar();
}

extern "C" void bg_QTabWidget_setCurrentIndex_int(QTabWidget * _self_, int index) {
  _self_->setCurrentIndex(index);
}

extern "C" void bg_QTabWidget_setCurrentWidget_QWidget_X(QTabWidget * _self_, QWidget * widget) {
  _self_->setCurrentWidget(widget);
}

extern "C" void bg_QTabWidget_currentChanged_int(QTabWidget * _self_, int index) {
  _self_->currentChanged(index);
}

extern "C" void bg_QTabWidget_tabCloseRequested_int(QTabWidget * _self_, int index) {
  _self_->tabCloseRequested(index);
}

extern "C" void bg_QTabWidget_tabBarClicked_int(QTabWidget * _self_, int index) {
  _self_->tabBarClicked(index);
}

extern "C" void bg_QTabWidget_tabBarDoubleClicked_int(QTabWidget * _self_, int index) {
  _self_->tabBarDoubleClicked(index);
}

extern "C" void bg_QTabWidget_tabInserted_int(QTabWidget * _self_, int index) {
  _self_->tabInserted(index);
}

extern "C" void bg_QTabWidget_tabRemoved_int(QTabWidget * _self_, int index) {
  _self_->tabRemoved(index);
}

extern "C" void bg_QTabWidget_showEvent_QShowEvent_X(QTabWidget * _self_, QShowEvent * unnamed_arg_0) {
  _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_resizeEvent_QResizeEvent_X(QTabWidget * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_keyPressEvent_QKeyEvent_X(QTabWidget * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_paintEvent_QPaintEvent_X(QTabWidget * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_setTabBar_QTabBar_X(QTabWidget * _self_, QTabBar * unnamed_arg_0) {
  _self_->setTabBar(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_changeEvent_QEvent_X(QTabWidget * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" bool bg_QTabWidget_event_QEvent_X(QTabWidget * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_initStyleOption_QStyleOptionTabWidgetFrame_X(QTabWidget * _self_, QStyleOptionTabWidgetFrame * option) {
  _self_->initStyleOption(option);
}

extern "C" QMetaObject::Connection * bg_QTabWidget_CONNECT_currentChanged_CrystalProc_void_int(QTabWidget * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabWidget::*)(int))&QTabWidget::currentChanged, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QTabWidget_CONNECT_tabCloseRequested_CrystalProc_void_int(QTabWidget * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabWidget::*)(int))&QTabWidget::tabCloseRequested, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QTabWidget_CONNECT_tabBarClicked_CrystalProc_void_int(QTabWidget * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabWidget::*)(int))&QTabWidget::tabBarClicked, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QTabWidget_CONNECT_tabBarDoubleClicked_CrystalProc_void_int(QTabWidget * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabWidget::*)(int))&QTabWidget::tabBarDoubleClicked, [_proc_](int index){ _proc_(index); }));
}

extern "C" void bg_BgInherit_TabWidget_JUMPTABLE_BgJumptable_TabWidget_R(BgInherit_TabWidget * _self_, const BgJumptable_TabWidget & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_LayoutItem {
  CrystalProc<QSize &> bg_QLayoutItem_sizeHint_;
  CrystalProc<QSize &> bg_QLayoutItem_minimumSize_;
  CrystalProc<QSize &> bg_QLayoutItem_maximumSize_;
  CrystalProc<Qt::Orientations> bg_QLayoutItem_expandingDirections_;
  CrystalProc<void, const QRect *> bg_QLayoutItem_setGeometry_const_QRect_R;
  CrystalProc<QRect &> bg_QLayoutItem_geometry_;
  CrystalProc<bool> bg_QLayoutItem_isEmpty_;
  CrystalProc<bool> bg_QLayoutItem_hasHeightForWidth_;
  CrystalProc<int, int> bg_QLayoutItem_heightForWidth_int;
  CrystalProc<int, int> bg_QLayoutItem_minimumHeightForWidth_int;
  CrystalProc<void> bg_QLayoutItem_invalidate_;
  CrystalProc<QWidget *> bg_QLayoutItem_widget_;
  CrystalProc<QLayout *> bg_QLayoutItem_layout_;
  CrystalProc<QSpacerItem *> bg_QLayoutItem_spacerItem_;
  CrystalProc<QSizePolicy::ControlTypes> bg_QLayoutItem_controlTypes_;
};
struct BgInherit_LayoutItem : public QLayoutItem {
  using QLayoutItem::QLayoutItem;
  BgJumptable_LayoutItem bgJump;
  QSize sizeHint() const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayoutItem_sizeHint_.isValid())) {
      return _self_->bgJump.bg_QLayoutItem_sizeHint_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayoutItem::sizeHint");
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayoutItem_minimumSize_.isValid())) {
      return _self_->bgJump.bg_QLayoutItem_minimumSize_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayoutItem::minimumSize");
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayoutItem_maximumSize_.isValid())) {
      return _self_->bgJump.bg_QLayoutItem_maximumSize_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayoutItem::maximumSize");
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayoutItem_expandingDirections_.isValid())) {
      return _self_->bgJump.bg_QLayoutItem_expandingDirections_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayoutItem::expandingDirections");
    }
  }
  
  void setGeometry(const QRect & unnamed_arg_0) override {
    BgInherit_LayoutItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayoutItem_setGeometry_const_QRect_R.isValid())) {
      _self_->bgJump.bg_QLayoutItem_setGeometry_const_QRect_R(&(unnamed_arg_0));
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayoutItem::setGeometry");
    }
  }
  
  QRect geometry() const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayoutItem_geometry_.isValid())) {
      return _self_->bgJump.bg_QLayoutItem_geometry_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayoutItem::geometry");
    }
  }
  
  bool isEmpty() const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayoutItem_isEmpty_.isValid())) {
      return _self_->bgJump.bg_QLayoutItem_isEmpty_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayoutItem::isEmpty");
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_hasHeightForWidth_();
    } else {
      return QLayoutItem::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_heightForWidth_int(unnamed_arg_0);
    } else {
      return QLayoutItem::heightForWidth(unnamed_arg_0);
    }
  }
  
  int minimumHeightForWidth(int unnamed_arg_0) const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_minimumHeightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QLayoutItem::minimumHeightForWidth(unnamed_arg_0);
    }
  }
  
  void invalidate() override {
    BgInherit_LayoutItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_invalidate_.isValid()) {
      _self_->bgJump.bg_QLayoutItem_invalidate_();
    } else {
      QLayoutItem::invalidate();
    }
  }
  
  QWidget * widget() override {
    BgInherit_LayoutItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_widget_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_widget_();
    } else {
      return QLayoutItem::widget();
    }
  }
  
  QLayout * layout() override {
    BgInherit_LayoutItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_layout_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_layout_();
    } else {
      return QLayoutItem::layout();
    }
  }
  
  QSpacerItem * spacerItem() override {
    BgInherit_LayoutItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_spacerItem_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_spacerItem_();
    } else {
      return QLayoutItem::spacerItem();
    }
  }
  
  QSizePolicy::ControlTypes controlTypes() const override {
    const BgInherit_LayoutItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_controlTypes_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_controlTypes_();
    } else {
      return QLayoutItem::controlTypes();
    }
  }
  
};
extern "C" QLayoutItem * bg_QLayoutItem__CONSTRUCT_() {
  return new (UseGC) BgInherit_LayoutItem();
}

extern "C" QLayoutItem * bg_QLayoutItem__CONSTRUCT_Qt__Alignment(Qt::Alignment alignment) {
  return new (UseGC) BgInherit_LayoutItem(alignment);
}

extern "C" QSize * bg_QLayoutItem_sizeHint_(QLayoutItem * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QLayoutItem_minimumSize_(QLayoutItem * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QLayoutItem_maximumSize_(QLayoutItem * _self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" Qt::Orientations bg_QLayoutItem_expandingDirections_(QLayoutItem * _self_) {
  return _self_->expandingDirections();
}

extern "C" void bg_QLayoutItem_setGeometry_const_QRect_R(QLayoutItem * _self_, const QRect & unnamed_arg_0) {
  _self_->setGeometry(unnamed_arg_0);
}

extern "C" QRect * bg_QLayoutItem_geometry_(QLayoutItem * _self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" bool bg_QLayoutItem_isEmpty_(QLayoutItem * _self_) {
  return _self_->isEmpty();
}

extern "C" bool bg_QLayoutItem_hasHeightForWidth_(QLayoutItem * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" int bg_QLayoutItem_heightForWidth_int(QLayoutItem * _self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" int bg_QLayoutItem_minimumHeightForWidth_int(QLayoutItem * _self_, int unnamed_arg_0) {
  return _self_->minimumHeightForWidth(unnamed_arg_0);
}

extern "C" void bg_QLayoutItem_invalidate_(QLayoutItem * _self_) {
  _self_->invalidate();
}

extern "C" QWidget * bg_QLayoutItem_widget_(QLayoutItem * _self_) {
  return _self_->widget();
}

extern "C" QLayout * bg_QLayoutItem_layout_(QLayoutItem * _self_) {
  return _self_->layout();
}

extern "C" QSpacerItem * bg_QLayoutItem_spacerItem_(QLayoutItem * _self_) {
  return _self_->spacerItem();
}

extern "C" Qt::Alignment bg_QLayoutItem_alignment_(QLayoutItem * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QLayoutItem_setAlignment_Qt__Alignment(QLayoutItem * _self_, Qt::Alignment a) {
  _self_->setAlignment(a);
}

extern "C" QSizePolicy::ControlTypes bg_QLayoutItem_controlTypes_(QLayoutItem * _self_) {
  return _self_->controlTypes();
}

extern "C" void bg_BgInherit_LayoutItem_JUMPTABLE_BgJumptable_LayoutItem_R(BgInherit_LayoutItem * _self_, const BgJumptable_LayoutItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_SpacerItem {
  CrystalProc<QSize &> bg_QSpacerItem_sizeHint_;
  CrystalProc<QSize &> bg_QSpacerItem_minimumSize_;
  CrystalProc<QSize &> bg_QSpacerItem_maximumSize_;
  CrystalProc<Qt::Orientations> bg_QSpacerItem_expandingDirections_;
  CrystalProc<bool> bg_QSpacerItem_isEmpty_;
  CrystalProc<void, const QRect *> bg_QSpacerItem_setGeometry_const_QRect_R;
  CrystalProc<QRect &> bg_QSpacerItem_geometry_;
  CrystalProc<QSpacerItem *> bg_QSpacerItem_spacerItem_;
  CrystalProc<bool> bg_QLayoutItem_hasHeightForWidth_;
  CrystalProc<int, int> bg_QLayoutItem_heightForWidth_int;
  CrystalProc<int, int> bg_QLayoutItem_minimumHeightForWidth_int;
  CrystalProc<void> bg_QLayoutItem_invalidate_;
  CrystalProc<QWidget *> bg_QLayoutItem_widget_;
  CrystalProc<QLayout *> bg_QLayoutItem_layout_;
  CrystalProc<QSizePolicy::ControlTypes> bg_QLayoutItem_controlTypes_;
};
struct BgInherit_SpacerItem : public QSpacerItem {
  using QSpacerItem::QSpacerItem;
  BgJumptable_SpacerItem bgJump;
  QSize sizeHint() const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QSpacerItem_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QSpacerItem_sizeHint_();
    } else {
      return QSpacerItem::sizeHint();
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QSpacerItem_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QSpacerItem_minimumSize_();
    } else {
      return QSpacerItem::minimumSize();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QSpacerItem_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QSpacerItem_maximumSize_();
    } else {
      return QSpacerItem::maximumSize();
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QSpacerItem_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QSpacerItem_expandingDirections_();
    } else {
      return QSpacerItem::expandingDirections();
    }
  }
  
  bool isEmpty() const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QSpacerItem_isEmpty_.isValid()) {
      return _self_->bgJump.bg_QSpacerItem_isEmpty_();
    } else {
      return QSpacerItem::isEmpty();
    }
  }
  
  void setGeometry(const QRect & unnamed_arg_0) override {
    BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QSpacerItem_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QSpacerItem_setGeometry_const_QRect_R(&(unnamed_arg_0));
    } else {
      QSpacerItem::setGeometry(unnamed_arg_0);
    }
  }
  
  QRect geometry() const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QSpacerItem_geometry_.isValid()) {
      return _self_->bgJump.bg_QSpacerItem_geometry_();
    } else {
      return QSpacerItem::geometry();
    }
  }
  
  QSpacerItem * spacerItem() override {
    BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QSpacerItem_spacerItem_.isValid()) {
      return _self_->bgJump.bg_QSpacerItem_spacerItem_();
    } else {
      return QSpacerItem::spacerItem();
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_hasHeightForWidth_();
    } else {
      return QSpacerItem::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_heightForWidth_int(unnamed_arg_0);
    } else {
      return QSpacerItem::heightForWidth(unnamed_arg_0);
    }
  }
  
  int minimumHeightForWidth(int unnamed_arg_0) const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_minimumHeightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QSpacerItem::minimumHeightForWidth(unnamed_arg_0);
    }
  }
  
  void invalidate() override {
    BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_invalidate_.isValid()) {
      _self_->bgJump.bg_QLayoutItem_invalidate_();
    } else {
      QSpacerItem::invalidate();
    }
  }
  
  QWidget * widget() override {
    BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_widget_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_widget_();
    } else {
      return QSpacerItem::widget();
    }
  }
  
  QLayout * layout() override {
    BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_layout_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_layout_();
    } else {
      return QSpacerItem::layout();
    }
  }
  
  QSizePolicy::ControlTypes controlTypes() const override {
    const BgInherit_SpacerItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_controlTypes_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_controlTypes_();
    } else {
      return QSpacerItem::controlTypes();
    }
  }
  
};
extern "C" QSpacerItem * bg_QSpacerItem__CONSTRUCT_int_int_QSizePolicy__Policy_QSizePolicy__Policy(int w, int h, QSizePolicy::Policy hData, QSizePolicy::Policy vData) {
  return new (UseGC) BgInherit_SpacerItem(w, h, hData, vData);
}

extern "C" void bg_QSpacerItem_changeSize_int_int_QSizePolicy__Policy_QSizePolicy__Policy(QSpacerItem * _self_, int w, int h, QSizePolicy::Policy hData, QSizePolicy::Policy vData) {
  _self_->changeSize(w, h, hData, vData);
}

extern "C" QSize * bg_QSpacerItem_sizeHint_(QSpacerItem * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QSpacerItem_minimumSize_(QSpacerItem * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QSpacerItem_maximumSize_(QSpacerItem * _self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" Qt::Orientations bg_QSpacerItem_expandingDirections_(QSpacerItem * _self_) {
  return _self_->expandingDirections();
}

extern "C" bool bg_QSpacerItem_isEmpty_(QSpacerItem * _self_) {
  return _self_->isEmpty();
}

extern "C" void bg_QSpacerItem_setGeometry_const_QRect_R(QSpacerItem * _self_, const QRect & unnamed_arg_0) {
  _self_->setGeometry(unnamed_arg_0);
}

extern "C" QRect * bg_QSpacerItem_geometry_(QSpacerItem * _self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" QSpacerItem * bg_QSpacerItem_spacerItem_(QSpacerItem * _self_) {
  return _self_->spacerItem();
}

extern "C" QSizePolicy * bg_QSpacerItem_sizePolicy_(QSpacerItem * _self_) {
  return new (UseGC) QSizePolicy (_self_->sizePolicy());
}

extern "C" void bg_BgInherit_SpacerItem_JUMPTABLE_BgJumptable_SpacerItem_R(BgInherit_SpacerItem * _self_, const BgJumptable_SpacerItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_WidgetItem {
  CrystalProc<QSize &> bg_QWidgetItem_sizeHint_;
  CrystalProc<QSize &> bg_QWidgetItem_minimumSize_;
  CrystalProc<QSize &> bg_QWidgetItem_maximumSize_;
  CrystalProc<Qt::Orientations> bg_QWidgetItem_expandingDirections_;
  CrystalProc<bool> bg_QWidgetItem_isEmpty_;
  CrystalProc<void, const QRect *> bg_QWidgetItem_setGeometry_const_QRect_R;
  CrystalProc<QRect &> bg_QWidgetItem_geometry_;
  CrystalProc<QWidget *> bg_QWidgetItem_widget_;
  CrystalProc<bool> bg_QWidgetItem_hasHeightForWidth_;
  CrystalProc<int, int> bg_QWidgetItem_heightForWidth_int;
  CrystalProc<QSizePolicy::ControlTypes> bg_QWidgetItem_controlTypes_;
  CrystalProc<int, int> bg_QLayoutItem_minimumHeightForWidth_int;
  CrystalProc<void> bg_QLayoutItem_invalidate_;
  CrystalProc<QLayout *> bg_QLayoutItem_layout_;
  CrystalProc<QSpacerItem *> bg_QLayoutItem_spacerItem_;
};
struct BgInherit_WidgetItem : public QWidgetItem {
  using QWidgetItem::QWidgetItem;
  BgJumptable_WidgetItem bgJump;
  QSize sizeHint() const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_sizeHint_();
    } else {
      return QWidgetItem::sizeHint();
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_minimumSize_();
    } else {
      return QWidgetItem::minimumSize();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_maximumSize_();
    } else {
      return QWidgetItem::maximumSize();
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_expandingDirections_();
    } else {
      return QWidgetItem::expandingDirections();
    }
  }
  
  bool isEmpty() const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_isEmpty_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_isEmpty_();
    } else {
      return QWidgetItem::isEmpty();
    }
  }
  
  void setGeometry(const QRect & unnamed_arg_0) override {
    BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QWidgetItem_setGeometry_const_QRect_R(&(unnamed_arg_0));
    } else {
      QWidgetItem::setGeometry(unnamed_arg_0);
    }
  }
  
  QRect geometry() const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_geometry_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_geometry_();
    } else {
      return QWidgetItem::geometry();
    }
  }
  
  QWidget * widget() override {
    BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_widget_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_widget_();
    } else {
      return QWidgetItem::widget();
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_hasHeightForWidth_();
    } else {
      return QWidgetItem::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidgetItem::heightForWidth(unnamed_arg_0);
    }
  }
  
  QSizePolicy::ControlTypes controlTypes() const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QWidgetItem_controlTypes_.isValid()) {
      return _self_->bgJump.bg_QWidgetItem_controlTypes_();
    } else {
      return QWidgetItem::controlTypes();
    }
  }
  
  int minimumHeightForWidth(int unnamed_arg_0) const override {
    const BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_minimumHeightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QWidgetItem::minimumHeightForWidth(unnamed_arg_0);
    }
  }
  
  void invalidate() override {
    BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_invalidate_.isValid()) {
      _self_->bgJump.bg_QLayoutItem_invalidate_();
    } else {
      QWidgetItem::invalidate();
    }
  }
  
  QLayout * layout() override {
    BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_layout_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_layout_();
    } else {
      return QWidgetItem::layout();
    }
  }
  
  QSpacerItem * spacerItem() override {
    BgInherit_WidgetItem *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_spacerItem_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_spacerItem_();
    } else {
      return QWidgetItem::spacerItem();
    }
  }
  
};
extern "C" QWidgetItem * bg_QWidgetItem__CONSTRUCT_QWidget_X(QWidget * w) {
  return new (UseGC) BgInherit_WidgetItem(w);
}

extern "C" QSize * bg_QWidgetItem_sizeHint_(QWidgetItem * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QWidgetItem_minimumSize_(QWidgetItem * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QWidgetItem_maximumSize_(QWidgetItem * _self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" Qt::Orientations bg_QWidgetItem_expandingDirections_(QWidgetItem * _self_) {
  return _self_->expandingDirections();
}

extern "C" bool bg_QWidgetItem_isEmpty_(QWidgetItem * _self_) {
  return _self_->isEmpty();
}

extern "C" void bg_QWidgetItem_setGeometry_const_QRect_R(QWidgetItem * _self_, const QRect & unnamed_arg_0) {
  _self_->setGeometry(unnamed_arg_0);
}

extern "C" QRect * bg_QWidgetItem_geometry_(QWidgetItem * _self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" QWidget * bg_QWidgetItem_widget_(QWidgetItem * _self_) {
  return _self_->widget();
}

extern "C" bool bg_QWidgetItem_hasHeightForWidth_(QWidgetItem * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" int bg_QWidgetItem_heightForWidth_int(QWidgetItem * _self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" QSizePolicy::ControlTypes bg_QWidgetItem_controlTypes_(QWidgetItem * _self_) {
  return _self_->controlTypes();
}

extern "C" void bg_BgInherit_WidgetItem_JUMPTABLE_BgJumptable_WidgetItem_R(BgInherit_WidgetItem * _self_, const BgJumptable_WidgetItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Layout {
  CrystalProc<const QMetaObject *> bg_QLayout_metaObject_;
  CrystalProc<void *, const char *> bg_QLayout_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void> bg_QLayout_invalidate_;
  CrystalProc<QRect &> bg_QLayout_geometry_;
  CrystalProc<void, QLayoutItem *> bg_QLayout_addItem_QLayoutItem_X;
  CrystalProc<Qt::Orientations> bg_QLayout_expandingDirections_;
  CrystalProc<QSize &> bg_QLayout_minimumSize_;
  CrystalProc<QSize &> bg_QLayout_maximumSize_;
  CrystalProc<void, const QRect *> bg_QLayout_setGeometry_const_QRect_R;
  CrystalProc<QLayoutItem *, int> bg_QLayout_itemAt_int;
  CrystalProc<QLayoutItem *, int> bg_QLayout_takeAt_int;
  CrystalProc<int, QWidget *> bg_QLayout_indexOf_QWidget_X;
  CrystalProc<int> bg_QLayout_count_;
  CrystalProc<bool> bg_QLayout_isEmpty_;
  CrystalProc<QSizePolicy::ControlTypes> bg_QLayout_controlTypes_;
  CrystalProc<QLayout *> bg_QLayout_layout_;
  CrystalProc<void, QChildEvent *> bg_QLayout_childEvent_QChildEvent_X;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
  CrystalProc<QSize &> bg_QLayoutItem_sizeHint_;
  CrystalProc<bool> bg_QLayoutItem_hasHeightForWidth_;
  CrystalProc<int, int> bg_QLayoutItem_heightForWidth_int;
  CrystalProc<int, int> bg_QLayoutItem_minimumHeightForWidth_int;
  CrystalProc<QWidget *> bg_QLayoutItem_widget_;
  CrystalProc<QSpacerItem *> bg_QLayoutItem_spacerItem_;
};
struct BgInherit_Layout : public QLayout {
  using QLayout::QLayout;
  BgJumptable_Layout bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_metaObject_.isValid()) {
      return _self_->bgJump.bg_QLayout_metaObject_();
    } else {
      return QLayout::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QLayout::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QLayout::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void invalidate() override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_invalidate_.isValid()) {
      _self_->bgJump.bg_QLayout_invalidate_();
    } else {
      QLayout::invalidate();
    }
  }
  
  QRect geometry() const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_geometry_.isValid()) {
      return _self_->bgJump.bg_QLayout_geometry_();
    } else {
      return QLayout::geometry();
    }
  }
  
  void addItem(QLayoutItem * unnamed_arg_0) override {
    BgInherit_Layout *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayout_addItem_QLayoutItem_X.isValid())) {
      _self_->bgJump.bg_QLayout_addItem_QLayoutItem_X(unnamed_arg_0);
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayout::addItem");
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QLayout_expandingDirections_();
    } else {
      return QLayout::expandingDirections();
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QLayout_minimumSize_();
    } else {
      return QLayout::minimumSize();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QLayout_maximumSize_();
    } else {
      return QLayout::maximumSize();
    }
  }
  
  void setGeometry(const QRect & unnamed_arg_0) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QLayout_setGeometry_const_QRect_R(&(unnamed_arg_0));
    } else {
      QLayout::setGeometry(unnamed_arg_0);
    }
  }
  
  QLayoutItem * itemAt(int index) const override {
    const BgInherit_Layout *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayout_itemAt_int.isValid())) {
      return _self_->bgJump.bg_QLayout_itemAt_int(index);
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayout::itemAt");
    }
  }
  
  QLayoutItem * takeAt(int index) override {
    BgInherit_Layout *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayout_takeAt_int.isValid())) {
      return _self_->bgJump.bg_QLayout_takeAt_int(index);
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayout::takeAt");
    }
  }
  
  int indexOf(QWidget * unnamed_arg_0) const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_indexOf_QWidget_X.isValid()) {
      return _self_->bgJump.bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QLayout::indexOf(unnamed_arg_0);
    }
  }
  
  int count() const override {
    const BgInherit_Layout *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayout_count_.isValid())) {
      return _self_->bgJump.bg_QLayout_count_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayout::count");
    }
  }
  
  bool isEmpty() const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_isEmpty_.isValid()) {
      return _self_->bgJump.bg_QLayout_isEmpty_();
    } else {
      return QLayout::isEmpty();
    }
  }
  
  QSizePolicy::ControlTypes controlTypes() const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_controlTypes_.isValid()) {
      return _self_->bgJump.bg_QLayout_controlTypes_();
    } else {
      return QLayout::controlTypes();
    }
  }
  
  QLayout * layout() override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_layout_.isValid()) {
      return _self_->bgJump.bg_QLayout_layout_();
    } else {
      return QLayout::layout();
    }
  }
  
  void childEvent(QChildEvent * e) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      QLayout::childEvent(e);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QLayout::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QLayout::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QLayout::timerEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QLayout::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QLayout::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QLayout::disconnectNotify(signal);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_Layout *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QLayoutItem_sizeHint_.isValid())) {
      return _self_->bgJump.bg_QLayoutItem_sizeHint_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QLayoutItem::sizeHint");
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_hasHeightForWidth_();
    } else {
      return QLayout::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_heightForWidth_int(unnamed_arg_0);
    } else {
      return QLayout::heightForWidth(unnamed_arg_0);
    }
  }
  
  int minimumHeightForWidth(int unnamed_arg_0) const override {
    const BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_minimumHeightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QLayout::minimumHeightForWidth(unnamed_arg_0);
    }
  }
  
  QWidget * widget() override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_widget_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_widget_();
    } else {
      return QLayout::widget();
    }
  }
  
  QSpacerItem * spacerItem() override {
    BgInherit_Layout *_self_ = this;
    if (_self_->bgJump.bg_QLayoutItem_spacerItem_.isValid()) {
      return _self_->bgJump.bg_QLayoutItem_spacerItem_();
    } else {
      return QLayout::spacerItem();
    }
  }
  
};
extern "C" const QMetaObject * bg_QLayout_metaObject_(QLayout * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QLayout_qt_metacast_const_char_X(QLayout * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX(QLayout * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QLayout_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QLayout::tr(s));
}

extern "C" CrystalString bg_QLayout_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QLayout::tr(s, c));
}

extern "C" CrystalString bg_QLayout_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QLayout_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QLayout::trUtf8(s));
}

extern "C" CrystalString bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QLayout::trUtf8(s, c));
}

extern "C" CrystalString bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QLayout::trUtf8(s, c, n));
}

extern "C" QLayout * bg_QLayout__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_Layout(parent);
}

extern "C" QLayout * bg_QLayout__CONSTRUCT_() {
  return new (UseGC) BgInherit_Layout();
}

extern "C" int bg_QLayout_margin_(QLayout * _self_) {
  return _self_->margin();
}

extern "C" int bg_QLayout_spacing_(QLayout * _self_) {
  return _self_->spacing();
}

extern "C" void bg_QLayout_setMargin_int(QLayout * _self_, int unnamed_arg_0) {
  _self_->setMargin(unnamed_arg_0);
}

extern "C" void bg_QLayout_setSpacing_int(QLayout * _self_, int unnamed_arg_0) {
  _self_->setSpacing(unnamed_arg_0);
}

extern "C" void bg_QLayout_setContentsMargins_int_int_int_int(QLayout * _self_, int left, int top, int right, int bottom) {
  _self_->setContentsMargins(left, top, right, bottom);
}

extern "C" void bg_QLayout_setContentsMargins_const_QMargins_R(QLayout * _self_, const QMargins & margins) {
  _self_->setContentsMargins(margins);
}

extern "C" void bg_QLayout_getContentsMargins_int_X_int_X_int_X_int_X(QLayout * _self_, int * left, int * top, int * right, int * bottom) {
  _self_->getContentsMargins(left, top, right, bottom);
}

extern "C" QMargins * bg_QLayout_contentsMargins_(QLayout * _self_) {
  return new (UseGC) QMargins (_self_->contentsMargins());
}

extern "C" QRect * bg_QLayout_contentsRect_(QLayout * _self_) {
  return new (UseGC) QRect (_self_->contentsRect());
}

extern "C" bool bg_QLayout_setAlignment_QWidget_X_Qt__Alignment(QLayout * _self_, QWidget * w, Qt::Alignment alignment) {
  return _self_->setAlignment(w, alignment);
}

extern "C" bool bg_QLayout_setAlignment_QLayout_X_Qt__Alignment(QLayout * _self_, QLayout * l, Qt::Alignment alignment) {
  return _self_->setAlignment(l, alignment);
}

extern "C" void bg_QLayout_setSizeConstraint_QLayout__SizeConstraint(QLayout * _self_, QLayout::SizeConstraint unnamed_arg_0) {
  _self_->setSizeConstraint(unnamed_arg_0);
}

extern "C" QLayout::SizeConstraint bg_QLayout_sizeConstraint_(QLayout * _self_) {
  return _self_->sizeConstraint();
}

extern "C" void bg_QLayout_setMenuBar_QWidget_X(QLayout * _self_, QWidget * w) {
  _self_->setMenuBar(w);
}

extern "C" QWidget * bg_QLayout_menuBar_(QLayout * _self_) {
  return _self_->menuBar();
}

extern "C" QWidget * bg_QLayout_parentWidget_(QLayout * _self_) {
  return _self_->parentWidget();
}

extern "C" void bg_QLayout_invalidate_(QLayout * _self_) {
  _self_->invalidate();
}

extern "C" QRect * bg_QLayout_geometry_(QLayout * _self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" bool bg_QLayout_activate_(QLayout * _self_) {
  return _self_->activate();
}

extern "C" void bg_QLayout_update_(QLayout * _self_) {
  _self_->update();
}

extern "C" void bg_QLayout_addWidget_QWidget_X(QLayout * _self_, QWidget * w) {
  _self_->addWidget(w);
}

extern "C" void bg_QLayout_addItem_QLayoutItem_X(QLayout * _self_, QLayoutItem * unnamed_arg_0) {
  _self_->addItem(unnamed_arg_0);
}

extern "C" void bg_QLayout_removeWidget_QWidget_X(QLayout * _self_, QWidget * w) {
  _self_->removeWidget(w);
}

extern "C" void bg_QLayout_removeItem_QLayoutItem_X(QLayout * _self_, QLayoutItem * unnamed_arg_0) {
  _self_->removeItem(unnamed_arg_0);
}

extern "C" Qt::Orientations bg_QLayout_expandingDirections_(QLayout * _self_) {
  return _self_->expandingDirections();
}

extern "C" QSize * bg_QLayout_minimumSize_(QLayout * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QLayout_maximumSize_(QLayout * _self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" void bg_QLayout_setGeometry_const_QRect_R(QLayout * _self_, const QRect & unnamed_arg_0) {
  _self_->setGeometry(unnamed_arg_0);
}

extern "C" QLayoutItem * bg_QLayout_itemAt_int(QLayout * _self_, int index) {
  return _self_->itemAt(index);
}

extern "C" QLayoutItem * bg_QLayout_takeAt_int(QLayout * _self_, int index) {
  return _self_->takeAt(index);
}

extern "C" int bg_QLayout_indexOf_QWidget_X(QLayout * _self_, QWidget * unnamed_arg_0) {
  return _self_->indexOf(unnamed_arg_0);
}

extern "C" int bg_QLayout_count_(QLayout * _self_) {
  return _self_->count();
}

extern "C" bool bg_QLayout_isEmpty_(QLayout * _self_) {
  return _self_->isEmpty();
}

extern "C" QSizePolicy::ControlTypes bg_QLayout_controlTypes_(QLayout * _self_) {
  return _self_->controlTypes();
}

extern "C" QLayoutItem * bg_QLayout_replaceWidget_QWidget_X_QWidget_X(QLayout * _self_, QWidget * from, QWidget * to) {
  return _self_->replaceWidget(from, to);
}

extern "C" QLayoutItem * bg_QLayout_replaceWidget_QWidget_X_QWidget_X_Qt__FindChildOptions(QLayout * _self_, QWidget * from, QWidget * to, Qt::FindChildOptions options) {
  return _self_->replaceWidget(from, to, options);
}

extern "C" int bg_QLayout_totalHeightForWidth_int(QLayout * _self_, int w) {
  return _self_->totalHeightForWidth(w);
}

extern "C" QSize * bg_QLayout_totalMinimumSize_(QLayout * _self_) {
  return new (UseGC) QSize (_self_->totalMinimumSize());
}

extern "C" QSize * bg_QLayout_totalMaximumSize_(QLayout * _self_) {
  return new (UseGC) QSize (_self_->totalMaximumSize());
}

extern "C" QSize * bg_QLayout_totalSizeHint_(QLayout * _self_) {
  return new (UseGC) QSize (_self_->totalSizeHint());
}

extern "C" QLayout * bg_QLayout_layout_(QLayout * _self_) {
  return _self_->layout();
}

extern "C" void bg_QLayout_setEnabled_bool(QLayout * _self_, bool unnamed_arg_0) {
  _self_->setEnabled(unnamed_arg_0);
}

extern "C" bool bg_QLayout_isEnabled_(QLayout * _self_) {
  return _self_->isEnabled();
}

extern "C" QSize * bg_QLayout_closestAcceptableSize_STATIC_const_QWidget_X_const_QSize_R(const QWidget * w, const QSize & s) {
  return new (UseGC) QSize (QLayout::closestAcceptableSize(w, s));
}

extern "C" void bg_QLayout_widgetEvent_QEvent_X(QLayout * _self_, QEvent * unnamed_arg_0) {
  _self_->widgetEvent(unnamed_arg_0);
}

extern "C" void bg_QLayout_childEvent_QChildEvent_X(QLayout * _self_, QChildEvent * e) {
  _self_->childEvent(e);
}

extern "C" void bg_QLayout_addChildLayout_QLayout_X(QLayout * _self_, QLayout * l) {
  _self_->addChildLayout(l);
}

extern "C" void bg_QLayout_addChildWidget_QWidget_X(QLayout * _self_, QWidget * w) {
  _self_->addChildWidget(w);
}

extern "C" bool bg_QLayout_adoptLayout_QLayout_X(QLayout * _self_, QLayout * layout) {
  return _self_->adoptLayout(layout);
}

extern "C" QRect * bg_QLayout_alignmentRect_const_QRect_R(QLayout * _self_, const QRect & unnamed_arg_0) {
  return new (UseGC) QRect (_self_->alignmentRect(unnamed_arg_0));
}

extern "C" QLayout * bg_QLayout__CONSTRUCT_QLayoutPrivate_R_QLayout_X_QWidget_X(QLayoutPrivate & d, QLayout * unnamed_arg_1, QWidget * unnamed_arg_2) {
  return new (UseGC) BgInherit_Layout(d, unnamed_arg_1, unnamed_arg_2);
}

extern "C" QLayoutItem * bg_QLayout_AS_LayoutItem_(QLayout * _self_) {
  return static_cast<QLayoutItem *>(_self_);
}

extern "C" void bg_BgInherit_Layout_JUMPTABLE_BgJumptable_Layout_R(BgInherit_Layout * _self_, const BgJumptable_Layout & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_BoxLayout {
  CrystalProc<const QMetaObject *> bg_QBoxLayout_metaObject_;
  CrystalProc<void *, const char *> bg_QBoxLayout_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QLayoutItem *> bg_QBoxLayout_addItem_QLayoutItem_X;
  CrystalProc<QSize &> bg_QBoxLayout_sizeHint_;
  CrystalProc<QSize &> bg_QBoxLayout_minimumSize_;
  CrystalProc<QSize &> bg_QBoxLayout_maximumSize_;
  CrystalProc<bool> bg_QBoxLayout_hasHeightForWidth_;
  CrystalProc<int, int> bg_QBoxLayout_heightForWidth_int;
  CrystalProc<int, int> bg_QBoxLayout_minimumHeightForWidth_int;
  CrystalProc<Qt::Orientations> bg_QBoxLayout_expandingDirections_;
  CrystalProc<void> bg_QBoxLayout_invalidate_;
  CrystalProc<QLayoutItem *, int> bg_QBoxLayout_itemAt_int;
  CrystalProc<QLayoutItem *, int> bg_QBoxLayout_takeAt_int;
  CrystalProc<int> bg_QBoxLayout_count_;
  CrystalProc<void, const QRect *> bg_QBoxLayout_setGeometry_const_QRect_R;
  CrystalProc<QRect &> bg_QLayout_geometry_;
  CrystalProc<int, QWidget *> bg_QLayout_indexOf_QWidget_X;
  CrystalProc<bool> bg_QLayout_isEmpty_;
  CrystalProc<QSizePolicy::ControlTypes> bg_QLayout_controlTypes_;
  CrystalProc<QLayout *> bg_QLayout_layout_;
  CrystalProc<void, QChildEvent *> bg_QLayout_childEvent_QChildEvent_X;
};
struct BgInherit_BoxLayout : public QBoxLayout {
  using QBoxLayout::QBoxLayout;
  BgJumptable_BoxLayout bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_metaObject_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_metaObject_();
    } else {
      return QBoxLayout::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QBoxLayout::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QBoxLayout::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void addItem(QLayoutItem * unnamed_arg_0) override {
    BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_addItem_QLayoutItem_X.isValid()) {
      _self_->bgJump.bg_QBoxLayout_addItem_QLayoutItem_X(unnamed_arg_0);
    } else {
      QBoxLayout::addItem(unnamed_arg_0);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_sizeHint_();
    } else {
      return QBoxLayout::sizeHint();
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_minimumSize_();
    } else {
      return QBoxLayout::minimumSize();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_maximumSize_();
    } else {
      return QBoxLayout::maximumSize();
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_hasHeightForWidth_();
    } else {
      return QBoxLayout::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_heightForWidth_int(unnamed_arg_0);
    } else {
      return QBoxLayout::heightForWidth(unnamed_arg_0);
    }
  }
  
  int minimumHeightForWidth(int unnamed_arg_0) const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_minimumHeightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QBoxLayout::minimumHeightForWidth(unnamed_arg_0);
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_expandingDirections_();
    } else {
      return QBoxLayout::expandingDirections();
    }
  }
  
  void invalidate() override {
    BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_invalidate_.isValid()) {
      _self_->bgJump.bg_QBoxLayout_invalidate_();
    } else {
      QBoxLayout::invalidate();
    }
  }
  
  QLayoutItem * itemAt(int unnamed_arg_0) const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_itemAt_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_itemAt_int(unnamed_arg_0);
    } else {
      return QBoxLayout::itemAt(unnamed_arg_0);
    }
  }
  
  QLayoutItem * takeAt(int unnamed_arg_0) override {
    BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_takeAt_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_takeAt_int(unnamed_arg_0);
    } else {
      return QBoxLayout::takeAt(unnamed_arg_0);
    }
  }
  
  int count() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_count_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_count_();
    } else {
      return QBoxLayout::count();
    }
  }
  
  void setGeometry(const QRect & unnamed_arg_0) override {
    BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QBoxLayout_setGeometry_const_QRect_R(&(unnamed_arg_0));
    } else {
      QBoxLayout::setGeometry(unnamed_arg_0);
    }
  }
  
  QRect geometry() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_geometry_.isValid()) {
      return _self_->bgJump.bg_QLayout_geometry_();
    } else {
      return QBoxLayout::geometry();
    }
  }
  
  int indexOf(QWidget * unnamed_arg_0) const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_indexOf_QWidget_X.isValid()) {
      return _self_->bgJump.bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QBoxLayout::indexOf(unnamed_arg_0);
    }
  }
  
  bool isEmpty() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_isEmpty_.isValid()) {
      return _self_->bgJump.bg_QLayout_isEmpty_();
    } else {
      return QBoxLayout::isEmpty();
    }
  }
  
  QSizePolicy::ControlTypes controlTypes() const override {
    const BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_controlTypes_.isValid()) {
      return _self_->bgJump.bg_QLayout_controlTypes_();
    } else {
      return QBoxLayout::controlTypes();
    }
  }
  
  QLayout * layout() override {
    BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_layout_.isValid()) {
      return _self_->bgJump.bg_QLayout_layout_();
    } else {
      return QBoxLayout::layout();
    }
  }
  
  void childEvent(QChildEvent * e) override {
    BgInherit_BoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      QBoxLayout::childEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QBoxLayout_metaObject_(QBoxLayout * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QBoxLayout_qt_metacast_const_char_X(QBoxLayout * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(QBoxLayout * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QBoxLayout_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QBoxLayout::tr(s));
}

extern "C" CrystalString bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QBoxLayout::tr(s, c));
}

extern "C" CrystalString bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QBoxLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QBoxLayout_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QBoxLayout::trUtf8(s));
}

extern "C" CrystalString bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QBoxLayout::trUtf8(s, c));
}

extern "C" CrystalString bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QBoxLayout::trUtf8(s, c, n));
}

extern "C" QBoxLayout * bg_QBoxLayout__CONSTRUCT_QBoxLayout__Direction_QWidget_X(QBoxLayout::Direction unnamed_arg_0, QWidget * parent) {
  return new (UseGC) BgInherit_BoxLayout(unnamed_arg_0, parent);
}

extern "C" QBoxLayout::Direction bg_QBoxLayout_direction_(QBoxLayout * _self_) {
  return _self_->direction();
}

extern "C" void bg_QBoxLayout_setDirection_QBoxLayout__Direction(QBoxLayout * _self_, QBoxLayout::Direction unnamed_arg_0) {
  _self_->setDirection(unnamed_arg_0);
}

extern "C" void bg_QBoxLayout_addSpacing_int(QBoxLayout * _self_, int size) {
  _self_->addSpacing(size);
}

extern "C" void bg_QBoxLayout_addStretch_int(QBoxLayout * _self_, int stretch) {
  _self_->addStretch(stretch);
}

extern "C" void bg_QBoxLayout_addSpacerItem_QSpacerItem_X(QBoxLayout * _self_, QSpacerItem * spacerItem) {
  _self_->addSpacerItem(spacerItem);
}

extern "C" void bg_QBoxLayout_addWidget_QWidget_X_int(QBoxLayout * _self_, QWidget * unnamed_arg_0, int stretch) {
  _self_->addWidget(unnamed_arg_0, stretch);
}

extern "C" void bg_QBoxLayout_addWidget_QWidget_X_int_Qt__Alignment(QBoxLayout * _self_, QWidget * unnamed_arg_0, int stretch, Qt::Alignment alignment) {
  _self_->addWidget(unnamed_arg_0, stretch, alignment);
}

extern "C" void bg_QBoxLayout_addLayout_QLayout_X_int(QBoxLayout * _self_, QLayout * layout, int stretch) {
  _self_->addLayout(layout, stretch);
}

extern "C" void bg_QBoxLayout_addStrut_int(QBoxLayout * _self_, int unnamed_arg_0) {
  _self_->addStrut(unnamed_arg_0);
}

extern "C" void bg_QBoxLayout_addItem_QLayoutItem_X(QBoxLayout * _self_, QLayoutItem * unnamed_arg_0) {
  _self_->addItem(unnamed_arg_0);
}

extern "C" void bg_QBoxLayout_insertSpacing_int_int(QBoxLayout * _self_, int index, int size) {
  _self_->insertSpacing(index, size);
}

extern "C" void bg_QBoxLayout_insertStretch_int_int(QBoxLayout * _self_, int index, int stretch) {
  _self_->insertStretch(index, stretch);
}

extern "C" void bg_QBoxLayout_insertSpacerItem_int_QSpacerItem_X(QBoxLayout * _self_, int index, QSpacerItem * spacerItem) {
  _self_->insertSpacerItem(index, spacerItem);
}

extern "C" void bg_QBoxLayout_insertWidget_int_QWidget_X_int(QBoxLayout * _self_, int index, QWidget * widget, int stretch) {
  _self_->insertWidget(index, widget, stretch);
}

extern "C" void bg_QBoxLayout_insertWidget_int_QWidget_X_int_Qt__Alignment(QBoxLayout * _self_, int index, QWidget * widget, int stretch, Qt::Alignment alignment) {
  _self_->insertWidget(index, widget, stretch, alignment);
}

extern "C" void bg_QBoxLayout_insertLayout_int_QLayout_X_int(QBoxLayout * _self_, int index, QLayout * layout, int stretch) {
  _self_->insertLayout(index, layout, stretch);
}

extern "C" void bg_QBoxLayout_insertItem_int_QLayoutItem_X(QBoxLayout * _self_, int index, QLayoutItem * unnamed_arg_1) {
  _self_->insertItem(index, unnamed_arg_1);
}

extern "C" int bg_QBoxLayout_spacing_(QBoxLayout * _self_) {
  return _self_->spacing();
}

extern "C" void bg_QBoxLayout_setSpacing_int(QBoxLayout * _self_, int spacing) {
  _self_->setSpacing(spacing);
}

extern "C" bool bg_QBoxLayout_setStretchFactor_QWidget_X_int(QBoxLayout * _self_, QWidget * w, int stretch) {
  return _self_->setStretchFactor(w, stretch);
}

extern "C" bool bg_QBoxLayout_setStretchFactor_QLayout_X_int(QBoxLayout * _self_, QLayout * l, int stretch) {
  return _self_->setStretchFactor(l, stretch);
}

extern "C" void bg_QBoxLayout_setStretch_int_int(QBoxLayout * _self_, int index, int stretch) {
  _self_->setStretch(index, stretch);
}

extern "C" int bg_QBoxLayout_stretch_int(QBoxLayout * _self_, int index) {
  return _self_->stretch(index);
}

extern "C" QSize * bg_QBoxLayout_sizeHint_(QBoxLayout * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QBoxLayout_minimumSize_(QBoxLayout * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QBoxLayout_maximumSize_(QBoxLayout * _self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" bool bg_QBoxLayout_hasHeightForWidth_(QBoxLayout * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" int bg_QBoxLayout_heightForWidth_int(QBoxLayout * _self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" int bg_QBoxLayout_minimumHeightForWidth_int(QBoxLayout * _self_, int unnamed_arg_0) {
  return _self_->minimumHeightForWidth(unnamed_arg_0);
}

extern "C" Qt::Orientations bg_QBoxLayout_expandingDirections_(QBoxLayout * _self_) {
  return _self_->expandingDirections();
}

extern "C" void bg_QBoxLayout_invalidate_(QBoxLayout * _self_) {
  _self_->invalidate();
}

extern "C" QLayoutItem * bg_QBoxLayout_itemAt_int(QBoxLayout * _self_, int unnamed_arg_0) {
  return _self_->itemAt(unnamed_arg_0);
}

extern "C" QLayoutItem * bg_QBoxLayout_takeAt_int(QBoxLayout * _self_, int unnamed_arg_0) {
  return _self_->takeAt(unnamed_arg_0);
}

extern "C" int bg_QBoxLayout_count_(QBoxLayout * _self_) {
  return _self_->count();
}

extern "C" void bg_QBoxLayout_setGeometry_const_QRect_R(QBoxLayout * _self_, const QRect & unnamed_arg_0) {
  _self_->setGeometry(unnamed_arg_0);
}

extern "C" void bg_BgInherit_BoxLayout_JUMPTABLE_BgJumptable_BoxLayout_R(BgInherit_BoxLayout * _self_, const BgJumptable_BoxLayout & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_HBoxLayout {
  CrystalProc<const QMetaObject *> bg_QHBoxLayout_metaObject_;
  CrystalProc<void *, const char *> bg_QHBoxLayout_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QLayoutItem *> bg_QBoxLayout_addItem_QLayoutItem_X;
  CrystalProc<QSize &> bg_QBoxLayout_sizeHint_;
  CrystalProc<QSize &> bg_QBoxLayout_minimumSize_;
  CrystalProc<QSize &> bg_QBoxLayout_maximumSize_;
  CrystalProc<bool> bg_QBoxLayout_hasHeightForWidth_;
  CrystalProc<int, int> bg_QBoxLayout_heightForWidth_int;
  CrystalProc<int, int> bg_QBoxLayout_minimumHeightForWidth_int;
  CrystalProc<Qt::Orientations> bg_QBoxLayout_expandingDirections_;
  CrystalProc<void> bg_QBoxLayout_invalidate_;
  CrystalProc<QLayoutItem *, int> bg_QBoxLayout_itemAt_int;
  CrystalProc<QLayoutItem *, int> bg_QBoxLayout_takeAt_int;
  CrystalProc<int> bg_QBoxLayout_count_;
  CrystalProc<void, const QRect *> bg_QBoxLayout_setGeometry_const_QRect_R;
};
struct BgInherit_HBoxLayout : public QHBoxLayout {
  using QHBoxLayout::QHBoxLayout;
  BgJumptable_HBoxLayout bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QHBoxLayout_metaObject_.isValid()) {
      return _self_->bgJump.bg_QHBoxLayout_metaObject_();
    } else {
      return QHBoxLayout::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QHBoxLayout_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QHBoxLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QHBoxLayout::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QHBoxLayout::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void addItem(QLayoutItem * unnamed_arg_0) override {
    BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_addItem_QLayoutItem_X.isValid()) {
      _self_->bgJump.bg_QBoxLayout_addItem_QLayoutItem_X(unnamed_arg_0);
    } else {
      QHBoxLayout::addItem(unnamed_arg_0);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_sizeHint_();
    } else {
      return QHBoxLayout::sizeHint();
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_minimumSize_();
    } else {
      return QHBoxLayout::minimumSize();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_maximumSize_();
    } else {
      return QHBoxLayout::maximumSize();
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_hasHeightForWidth_();
    } else {
      return QHBoxLayout::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_heightForWidth_int(unnamed_arg_0);
    } else {
      return QHBoxLayout::heightForWidth(unnamed_arg_0);
    }
  }
  
  int minimumHeightForWidth(int unnamed_arg_0) const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_minimumHeightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QHBoxLayout::minimumHeightForWidth(unnamed_arg_0);
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_expandingDirections_();
    } else {
      return QHBoxLayout::expandingDirections();
    }
  }
  
  void invalidate() override {
    BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_invalidate_.isValid()) {
      _self_->bgJump.bg_QBoxLayout_invalidate_();
    } else {
      QHBoxLayout::invalidate();
    }
  }
  
  QLayoutItem * itemAt(int unnamed_arg_0) const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_itemAt_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_itemAt_int(unnamed_arg_0);
    } else {
      return QHBoxLayout::itemAt(unnamed_arg_0);
    }
  }
  
  QLayoutItem * takeAt(int unnamed_arg_0) override {
    BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_takeAt_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_takeAt_int(unnamed_arg_0);
    } else {
      return QHBoxLayout::takeAt(unnamed_arg_0);
    }
  }
  
  int count() const override {
    const BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_count_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_count_();
    } else {
      return QHBoxLayout::count();
    }
  }
  
  void setGeometry(const QRect & unnamed_arg_0) override {
    BgInherit_HBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QBoxLayout_setGeometry_const_QRect_R(&(unnamed_arg_0));
    } else {
      QHBoxLayout::setGeometry(unnamed_arg_0);
    }
  }
  
};
extern "C" const QMetaObject * bg_QHBoxLayout_metaObject_(QHBoxLayout * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QHBoxLayout_qt_metacast_const_char_X(QHBoxLayout * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(QHBoxLayout * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QHBoxLayout_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QHBoxLayout::tr(s));
}

extern "C" CrystalString bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QHBoxLayout::tr(s, c));
}

extern "C" CrystalString bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QHBoxLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QHBoxLayout_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QHBoxLayout::trUtf8(s));
}

extern "C" CrystalString bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QHBoxLayout::trUtf8(s, c));
}

extern "C" CrystalString bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QHBoxLayout::trUtf8(s, c, n));
}

extern "C" QHBoxLayout * bg_QHBoxLayout__CONSTRUCT_() {
  return new (UseGC) BgInherit_HBoxLayout();
}

extern "C" QHBoxLayout * bg_QHBoxLayout__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_HBoxLayout(parent);
}

extern "C" void bg_BgInherit_HBoxLayout_JUMPTABLE_BgJumptable_HBoxLayout_R(BgInherit_HBoxLayout * _self_, const BgJumptable_HBoxLayout & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_VBoxLayout {
  CrystalProc<const QMetaObject *> bg_QVBoxLayout_metaObject_;
  CrystalProc<void *, const char *> bg_QVBoxLayout_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QLayoutItem *> bg_QBoxLayout_addItem_QLayoutItem_X;
  CrystalProc<QSize &> bg_QBoxLayout_sizeHint_;
  CrystalProc<QSize &> bg_QBoxLayout_minimumSize_;
  CrystalProc<QSize &> bg_QBoxLayout_maximumSize_;
  CrystalProc<bool> bg_QBoxLayout_hasHeightForWidth_;
  CrystalProc<int, int> bg_QBoxLayout_heightForWidth_int;
  CrystalProc<int, int> bg_QBoxLayout_minimumHeightForWidth_int;
  CrystalProc<Qt::Orientations> bg_QBoxLayout_expandingDirections_;
  CrystalProc<void> bg_QBoxLayout_invalidate_;
  CrystalProc<QLayoutItem *, int> bg_QBoxLayout_itemAt_int;
  CrystalProc<QLayoutItem *, int> bg_QBoxLayout_takeAt_int;
  CrystalProc<int> bg_QBoxLayout_count_;
  CrystalProc<void, const QRect *> bg_QBoxLayout_setGeometry_const_QRect_R;
};
struct BgInherit_VBoxLayout : public QVBoxLayout {
  using QVBoxLayout::QVBoxLayout;
  BgJumptable_VBoxLayout bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QVBoxLayout_metaObject_.isValid()) {
      return _self_->bgJump.bg_QVBoxLayout_metaObject_();
    } else {
      return QVBoxLayout::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QVBoxLayout_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QVBoxLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QVBoxLayout::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QVBoxLayout::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void addItem(QLayoutItem * unnamed_arg_0) override {
    BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_addItem_QLayoutItem_X.isValid()) {
      _self_->bgJump.bg_QBoxLayout_addItem_QLayoutItem_X(unnamed_arg_0);
    } else {
      QVBoxLayout::addItem(unnamed_arg_0);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_sizeHint_();
    } else {
      return QVBoxLayout::sizeHint();
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_minimumSize_();
    } else {
      return QVBoxLayout::minimumSize();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_maximumSize_();
    } else {
      return QVBoxLayout::maximumSize();
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_hasHeightForWidth_();
    } else {
      return QVBoxLayout::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_heightForWidth_int(unnamed_arg_0);
    } else {
      return QVBoxLayout::heightForWidth(unnamed_arg_0);
    }
  }
  
  int minimumHeightForWidth(int unnamed_arg_0) const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_minimumHeightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QVBoxLayout::minimumHeightForWidth(unnamed_arg_0);
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_expandingDirections_();
    } else {
      return QVBoxLayout::expandingDirections();
    }
  }
  
  void invalidate() override {
    BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_invalidate_.isValid()) {
      _self_->bgJump.bg_QBoxLayout_invalidate_();
    } else {
      QVBoxLayout::invalidate();
    }
  }
  
  QLayoutItem * itemAt(int unnamed_arg_0) const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_itemAt_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_itemAt_int(unnamed_arg_0);
    } else {
      return QVBoxLayout::itemAt(unnamed_arg_0);
    }
  }
  
  QLayoutItem * takeAt(int unnamed_arg_0) override {
    BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_takeAt_int.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_takeAt_int(unnamed_arg_0);
    } else {
      return QVBoxLayout::takeAt(unnamed_arg_0);
    }
  }
  
  int count() const override {
    const BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_count_.isValid()) {
      return _self_->bgJump.bg_QBoxLayout_count_();
    } else {
      return QVBoxLayout::count();
    }
  }
  
  void setGeometry(const QRect & unnamed_arg_0) override {
    BgInherit_VBoxLayout *_self_ = this;
    if (_self_->bgJump.bg_QBoxLayout_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QBoxLayout_setGeometry_const_QRect_R(&(unnamed_arg_0));
    } else {
      QVBoxLayout::setGeometry(unnamed_arg_0);
    }
  }
  
};
extern "C" const QMetaObject * bg_QVBoxLayout_metaObject_(QVBoxLayout * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QVBoxLayout_qt_metacast_const_char_X(QVBoxLayout * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(QVBoxLayout * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QVBoxLayout_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QVBoxLayout::tr(s));
}

extern "C" CrystalString bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QVBoxLayout::tr(s, c));
}

extern "C" CrystalString bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QVBoxLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QVBoxLayout_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QVBoxLayout::trUtf8(s));
}

extern "C" CrystalString bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QVBoxLayout::trUtf8(s, c));
}

extern "C" CrystalString bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QVBoxLayout::trUtf8(s, c, n));
}

extern "C" QVBoxLayout * bg_QVBoxLayout__CONSTRUCT_() {
  return new (UseGC) BgInherit_VBoxLayout();
}

extern "C" QVBoxLayout * bg_QVBoxLayout__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_VBoxLayout(parent);
}

extern "C" void bg_BgInherit_VBoxLayout_JUMPTABLE_BgJumptable_VBoxLayout_R(BgInherit_VBoxLayout * _self_, const BgJumptable_VBoxLayout & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GridLayout {
  CrystalProc<const QMetaObject *> bg_QGridLayout_metaObject_;
  CrystalProc<void *, const char *> bg_QGridLayout_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QGridLayout_sizeHint_;
  CrystalProc<QSize &> bg_QGridLayout_minimumSize_;
  CrystalProc<QSize &> bg_QGridLayout_maximumSize_;
  CrystalProc<bool> bg_QGridLayout_hasHeightForWidth_;
  CrystalProc<int, int> bg_QGridLayout_heightForWidth_int;
  CrystalProc<int, int> bg_QGridLayout_minimumHeightForWidth_int;
  CrystalProc<Qt::Orientations> bg_QGridLayout_expandingDirections_;
  CrystalProc<void> bg_QGridLayout_invalidate_;
  CrystalProc<QLayoutItem *, int> bg_QGridLayout_itemAt_int;
  CrystalProc<QLayoutItem *, int> bg_QGridLayout_takeAt_int;
  CrystalProc<int> bg_QGridLayout_count_;
  CrystalProc<void, const QRect *> bg_QGridLayout_setGeometry_const_QRect_R;
  CrystalProc<void, QLayoutItem *> bg_QGridLayout_addItem_QLayoutItem_X;
  CrystalProc<QRect &> bg_QLayout_geometry_;
  CrystalProc<int, QWidget *> bg_QLayout_indexOf_QWidget_X;
  CrystalProc<bool> bg_QLayout_isEmpty_;
  CrystalProc<QSizePolicy::ControlTypes> bg_QLayout_controlTypes_;
  CrystalProc<QLayout *> bg_QLayout_layout_;
  CrystalProc<void, QChildEvent *> bg_QLayout_childEvent_QChildEvent_X;
};
struct BgInherit_GridLayout : public QGridLayout {
  using QGridLayout::QGridLayout;
  BgJumptable_GridLayout bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGridLayout_metaObject_();
    } else {
      return QGridLayout::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGridLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGridLayout::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGridLayout::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QGridLayout_sizeHint_();
    } else {
      return QGridLayout::sizeHint();
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QGridLayout_minimumSize_();
    } else {
      return QGridLayout::minimumSize();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QGridLayout_maximumSize_();
    } else {
      return QGridLayout::maximumSize();
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QGridLayout_hasHeightForWidth_();
    } else {
      return QGridLayout::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QGridLayout_heightForWidth_int(unnamed_arg_0);
    } else {
      return QGridLayout::heightForWidth(unnamed_arg_0);
    }
  }
  
  int minimumHeightForWidth(int unnamed_arg_0) const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_minimumHeightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QGridLayout_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QGridLayout::minimumHeightForWidth(unnamed_arg_0);
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QGridLayout_expandingDirections_();
    } else {
      return QGridLayout::expandingDirections();
    }
  }
  
  void invalidate() override {
    BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_invalidate_.isValid()) {
      _self_->bgJump.bg_QGridLayout_invalidate_();
    } else {
      QGridLayout::invalidate();
    }
  }
  
  QLayoutItem * itemAt(int index) const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_itemAt_int.isValid()) {
      return _self_->bgJump.bg_QGridLayout_itemAt_int(index);
    } else {
      return QGridLayout::itemAt(index);
    }
  }
  
  QLayoutItem * takeAt(int index) override {
    BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_takeAt_int.isValid()) {
      return _self_->bgJump.bg_QGridLayout_takeAt_int(index);
    } else {
      return QGridLayout::takeAt(index);
    }
  }
  
  int count() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_count_.isValid()) {
      return _self_->bgJump.bg_QGridLayout_count_();
    } else {
      return QGridLayout::count();
    }
  }
  
  void setGeometry(const QRect & unnamed_arg_0) override {
    BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QGridLayout_setGeometry_const_QRect_R(&(unnamed_arg_0));
    } else {
      QGridLayout::setGeometry(unnamed_arg_0);
    }
  }
  
  void addItem(QLayoutItem * unnamed_arg_0) override {
    BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QGridLayout_addItem_QLayoutItem_X.isValid()) {
      _self_->bgJump.bg_QGridLayout_addItem_QLayoutItem_X(unnamed_arg_0);
    } else {
      QGridLayout::addItem(unnamed_arg_0);
    }
  }
  
  QRect geometry() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_geometry_.isValid()) {
      return _self_->bgJump.bg_QLayout_geometry_();
    } else {
      return QGridLayout::geometry();
    }
  }
  
  int indexOf(QWidget * unnamed_arg_0) const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_indexOf_QWidget_X.isValid()) {
      return _self_->bgJump.bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QGridLayout::indexOf(unnamed_arg_0);
    }
  }
  
  bool isEmpty() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_isEmpty_.isValid()) {
      return _self_->bgJump.bg_QLayout_isEmpty_();
    } else {
      return QGridLayout::isEmpty();
    }
  }
  
  QSizePolicy::ControlTypes controlTypes() const override {
    const BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_controlTypes_.isValid()) {
      return _self_->bgJump.bg_QLayout_controlTypes_();
    } else {
      return QGridLayout::controlTypes();
    }
  }
  
  QLayout * layout() override {
    BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_layout_.isValid()) {
      return _self_->bgJump.bg_QLayout_layout_();
    } else {
      return QGridLayout::layout();
    }
  }
  
  void childEvent(QChildEvent * e) override {
    BgInherit_GridLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      QGridLayout::childEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGridLayout_metaObject_(QGridLayout * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGridLayout_qt_metacast_const_char_X(QGridLayout * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX(QGridLayout * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGridLayout_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGridLayout::tr(s));
}

extern "C" CrystalString bg_QGridLayout_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGridLayout::tr(s, c));
}

extern "C" CrystalString bg_QGridLayout_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGridLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QGridLayout_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGridLayout::trUtf8(s));
}

extern "C" CrystalString bg_QGridLayout_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGridLayout::trUtf8(s, c));
}

extern "C" CrystalString bg_QGridLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGridLayout::trUtf8(s, c, n));
}

extern "C" QGridLayout * bg_QGridLayout__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_GridLayout(parent);
}

extern "C" QGridLayout * bg_QGridLayout__CONSTRUCT_() {
  return new (UseGC) BgInherit_GridLayout();
}

extern "C" QSize * bg_QGridLayout_sizeHint_(QGridLayout * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QGridLayout_minimumSize_(QGridLayout * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QGridLayout_maximumSize_(QGridLayout * _self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" void bg_QGridLayout_setHorizontalSpacing_int(QGridLayout * _self_, int spacing) {
  _self_->setHorizontalSpacing(spacing);
}

extern "C" int bg_QGridLayout_horizontalSpacing_(QGridLayout * _self_) {
  return _self_->horizontalSpacing();
}

extern "C" void bg_QGridLayout_setVerticalSpacing_int(QGridLayout * _self_, int spacing) {
  _self_->setVerticalSpacing(spacing);
}

extern "C" int bg_QGridLayout_verticalSpacing_(QGridLayout * _self_) {
  return _self_->verticalSpacing();
}

extern "C" void bg_QGridLayout_setSpacing_int(QGridLayout * _self_, int spacing) {
  _self_->setSpacing(spacing);
}

extern "C" int bg_QGridLayout_spacing_(QGridLayout * _self_) {
  return _self_->spacing();
}

extern "C" void bg_QGridLayout_setRowStretch_int_int(QGridLayout * _self_, int row, int stretch) {
  _self_->setRowStretch(row, stretch);
}

extern "C" void bg_QGridLayout_setColumnStretch_int_int(QGridLayout * _self_, int column, int stretch) {
  _self_->setColumnStretch(column, stretch);
}

extern "C" int bg_QGridLayout_rowStretch_int(QGridLayout * _self_, int row) {
  return _self_->rowStretch(row);
}

extern "C" int bg_QGridLayout_columnStretch_int(QGridLayout * _self_, int column) {
  return _self_->columnStretch(column);
}

extern "C" void bg_QGridLayout_setRowMinimumHeight_int_int(QGridLayout * _self_, int row, int minSize) {
  _self_->setRowMinimumHeight(row, minSize);
}

extern "C" void bg_QGridLayout_setColumnMinimumWidth_int_int(QGridLayout * _self_, int column, int minSize) {
  _self_->setColumnMinimumWidth(column, minSize);
}

extern "C" int bg_QGridLayout_rowMinimumHeight_int(QGridLayout * _self_, int row) {
  return _self_->rowMinimumHeight(row);
}

extern "C" int bg_QGridLayout_columnMinimumWidth_int(QGridLayout * _self_, int column) {
  return _self_->columnMinimumWidth(column);
}

extern "C" int bg_QGridLayout_columnCount_(QGridLayout * _self_) {
  return _self_->columnCount();
}

extern "C" int bg_QGridLayout_rowCount_(QGridLayout * _self_) {
  return _self_->rowCount();
}

extern "C" QRect * bg_QGridLayout_cellRect_int_int(QGridLayout * _self_, int row, int column) {
  return new (UseGC) QRect (_self_->cellRect(row, column));
}

extern "C" bool bg_QGridLayout_hasHeightForWidth_(QGridLayout * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" int bg_QGridLayout_heightForWidth_int(QGridLayout * _self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" int bg_QGridLayout_minimumHeightForWidth_int(QGridLayout * _self_, int unnamed_arg_0) {
  return _self_->minimumHeightForWidth(unnamed_arg_0);
}

extern "C" Qt::Orientations bg_QGridLayout_expandingDirections_(QGridLayout * _self_) {
  return _self_->expandingDirections();
}

extern "C" void bg_QGridLayout_invalidate_(QGridLayout * _self_) {
  _self_->invalidate();
}

extern "C" void bg_QGridLayout_addWidget_QWidget_X(QGridLayout * _self_, QWidget * w) {
  _self_->addWidget(w);
}

extern "C" void bg_QGridLayout_addWidget_QWidget_X_int_int(QGridLayout * _self_, QWidget * unnamed_arg_0, int row, int column) {
  _self_->addWidget(unnamed_arg_0, row, column);
}

extern "C" void bg_QGridLayout_addWidget_QWidget_X_int_int_Qt__Alignment(QGridLayout * _self_, QWidget * unnamed_arg_0, int row, int column, Qt::Alignment unnamed_arg_3) {
  _self_->addWidget(unnamed_arg_0, row, column, unnamed_arg_3);
}

extern "C" void bg_QGridLayout_addWidget_QWidget_X_int_int_int_int(QGridLayout * _self_, QWidget * unnamed_arg_0, int row, int column, int rowSpan, int columnSpan) {
  _self_->addWidget(unnamed_arg_0, row, column, rowSpan, columnSpan);
}

extern "C" void bg_QGridLayout_addWidget_QWidget_X_int_int_int_int_Qt__Alignment(QGridLayout * _self_, QWidget * unnamed_arg_0, int row, int column, int rowSpan, int columnSpan, Qt::Alignment unnamed_arg_5) {
  _self_->addWidget(unnamed_arg_0, row, column, rowSpan, columnSpan, unnamed_arg_5);
}

extern "C" void bg_QGridLayout_addLayout_QLayout_X_int_int(QGridLayout * _self_, QLayout * unnamed_arg_0, int row, int column) {
  _self_->addLayout(unnamed_arg_0, row, column);
}

extern "C" void bg_QGridLayout_addLayout_QLayout_X_int_int_Qt__Alignment(QGridLayout * _self_, QLayout * unnamed_arg_0, int row, int column, Qt::Alignment unnamed_arg_3) {
  _self_->addLayout(unnamed_arg_0, row, column, unnamed_arg_3);
}

extern "C" void bg_QGridLayout_addLayout_QLayout_X_int_int_int_int(QGridLayout * _self_, QLayout * unnamed_arg_0, int row, int column, int rowSpan, int columnSpan) {
  _self_->addLayout(unnamed_arg_0, row, column, rowSpan, columnSpan);
}

extern "C" void bg_QGridLayout_addLayout_QLayout_X_int_int_int_int_Qt__Alignment(QGridLayout * _self_, QLayout * unnamed_arg_0, int row, int column, int rowSpan, int columnSpan, Qt::Alignment unnamed_arg_5) {
  _self_->addLayout(unnamed_arg_0, row, column, rowSpan, columnSpan, unnamed_arg_5);
}

extern "C" void bg_QGridLayout_setOriginCorner_Qt__Corner(QGridLayout * _self_, Qt::Corner unnamed_arg_0) {
  _self_->setOriginCorner(unnamed_arg_0);
}

extern "C" Qt::Corner bg_QGridLayout_originCorner_(QGridLayout * _self_) {
  return _self_->originCorner();
}

extern "C" QLayoutItem * bg_QGridLayout_itemAt_int(QGridLayout * _self_, int index) {
  return _self_->itemAt(index);
}

extern "C" QLayoutItem * bg_QGridLayout_itemAtPosition_int_int(QGridLayout * _self_, int row, int column) {
  return _self_->itemAtPosition(row, column);
}

extern "C" QLayoutItem * bg_QGridLayout_takeAt_int(QGridLayout * _self_, int index) {
  return _self_->takeAt(index);
}

extern "C" int bg_QGridLayout_count_(QGridLayout * _self_) {
  return _self_->count();
}

extern "C" void bg_QGridLayout_setGeometry_const_QRect_R(QGridLayout * _self_, const QRect & unnamed_arg_0) {
  _self_->setGeometry(unnamed_arg_0);
}

extern "C" void bg_QGridLayout_addItem_QLayoutItem_X_int_int_int_int(QGridLayout * _self_, QLayoutItem * item, int row, int column, int rowSpan, int columnSpan) {
  _self_->addItem(item, row, column, rowSpan, columnSpan);
}

extern "C" void bg_QGridLayout_addItem_QLayoutItem_X_int_int_int_int_Qt__Alignment(QGridLayout * _self_, QLayoutItem * item, int row, int column, int rowSpan, int columnSpan, Qt::Alignment unnamed_arg_5) {
  _self_->addItem(item, row, column, rowSpan, columnSpan, unnamed_arg_5);
}

extern "C" void bg_QGridLayout_setDefaultPositioning_int_Qt__Orientation(QGridLayout * _self_, int n, Qt::Orientation orient) {
  _self_->setDefaultPositioning(n, orient);
}

extern "C" void bg_QGridLayout_getItemPosition_int_int_X_int_X_int_X_int_X(QGridLayout * _self_, int idx, int * row, int * column, int * rowSpan, int * columnSpan) {
  _self_->getItemPosition(idx, row, column, rowSpan, columnSpan);
}

extern "C" void bg_QGridLayout_addItem_QLayoutItem_X(QGridLayout * _self_, QLayoutItem * unnamed_arg_0) {
  _self_->addItem(unnamed_arg_0);
}

extern "C" void bg_BgInherit_GridLayout_JUMPTABLE_BgJumptable_GridLayout_R(BgInherit_GridLayout * _self_, const BgJumptable_GridLayout & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_StackedLayout {
  CrystalProc<const QMetaObject *> bg_QStackedLayout_metaObject_;
  CrystalProc<void *, const char *> bg_QStackedLayout_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<int> bg_QStackedLayout_count_;
  CrystalProc<void, QLayoutItem *> bg_QStackedLayout_addItem_QLayoutItem_X;
  CrystalProc<QSize &> bg_QStackedLayout_sizeHint_;
  CrystalProc<QSize &> bg_QStackedLayout_minimumSize_;
  CrystalProc<QLayoutItem *, int> bg_QStackedLayout_itemAt_int;
  CrystalProc<QLayoutItem *, int> bg_QStackedLayout_takeAt_int;
  CrystalProc<void, const QRect *> bg_QStackedLayout_setGeometry_const_QRect_R;
  CrystalProc<bool> bg_QStackedLayout_hasHeightForWidth_;
  CrystalProc<int, int> bg_QStackedLayout_heightForWidth_int;
  CrystalProc<void> bg_QLayout_invalidate_;
  CrystalProc<QRect &> bg_QLayout_geometry_;
  CrystalProc<Qt::Orientations> bg_QLayout_expandingDirections_;
  CrystalProc<QSize &> bg_QLayout_maximumSize_;
  CrystalProc<int, QWidget *> bg_QLayout_indexOf_QWidget_X;
  CrystalProc<bool> bg_QLayout_isEmpty_;
  CrystalProc<QSizePolicy::ControlTypes> bg_QLayout_controlTypes_;
  CrystalProc<QLayout *> bg_QLayout_layout_;
  CrystalProc<void, QChildEvent *> bg_QLayout_childEvent_QChildEvent_X;
};
struct BgInherit_StackedLayout : public QStackedLayout {
  using QStackedLayout::QStackedLayout;
  BgJumptable_StackedLayout bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_metaObject_.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_metaObject_();
    } else {
      return QStackedLayout::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QStackedLayout::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QStackedLayout::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  int count() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_count_.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_count_();
    } else {
      return QStackedLayout::count();
    }
  }
  
  void addItem(QLayoutItem * item) override {
    BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_addItem_QLayoutItem_X.isValid()) {
      _self_->bgJump.bg_QStackedLayout_addItem_QLayoutItem_X(item);
    } else {
      QStackedLayout::addItem(item);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_sizeHint_();
    } else {
      return QStackedLayout::sizeHint();
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_minimumSize_();
    } else {
      return QStackedLayout::minimumSize();
    }
  }
  
  QLayoutItem * itemAt(int unnamed_arg_0) const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_itemAt_int.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_itemAt_int(unnamed_arg_0);
    } else {
      return QStackedLayout::itemAt(unnamed_arg_0);
    }
  }
  
  QLayoutItem * takeAt(int unnamed_arg_0) override {
    BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_takeAt_int.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_takeAt_int(unnamed_arg_0);
    } else {
      return QStackedLayout::takeAt(unnamed_arg_0);
    }
  }
  
  void setGeometry(const QRect & rect) override {
    BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QStackedLayout_setGeometry_const_QRect_R(&(rect));
    } else {
      QStackedLayout::setGeometry(rect);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_hasHeightForWidth_();
    } else {
      return QStackedLayout::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int width) const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QStackedLayout_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QStackedLayout_heightForWidth_int(width);
    } else {
      return QStackedLayout::heightForWidth(width);
    }
  }
  
  void invalidate() override {
    BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_invalidate_.isValid()) {
      _self_->bgJump.bg_QLayout_invalidate_();
    } else {
      QStackedLayout::invalidate();
    }
  }
  
  QRect geometry() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_geometry_.isValid()) {
      return _self_->bgJump.bg_QLayout_geometry_();
    } else {
      return QStackedLayout::geometry();
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QLayout_expandingDirections_();
    } else {
      return QStackedLayout::expandingDirections();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QLayout_maximumSize_();
    } else {
      return QStackedLayout::maximumSize();
    }
  }
  
  int indexOf(QWidget * unnamed_arg_0) const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_indexOf_QWidget_X.isValid()) {
      return _self_->bgJump.bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QStackedLayout::indexOf(unnamed_arg_0);
    }
  }
  
  bool isEmpty() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_isEmpty_.isValid()) {
      return _self_->bgJump.bg_QLayout_isEmpty_();
    } else {
      return QStackedLayout::isEmpty();
    }
  }
  
  QSizePolicy::ControlTypes controlTypes() const override {
    const BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_controlTypes_.isValid()) {
      return _self_->bgJump.bg_QLayout_controlTypes_();
    } else {
      return QStackedLayout::controlTypes();
    }
  }
  
  QLayout * layout() override {
    BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_layout_.isValid()) {
      return _self_->bgJump.bg_QLayout_layout_();
    } else {
      return QStackedLayout::layout();
    }
  }
  
  void childEvent(QChildEvent * e) override {
    BgInherit_StackedLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      QStackedLayout::childEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QStackedLayout_metaObject_(QStackedLayout * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QStackedLayout_qt_metacast_const_char_X(QStackedLayout * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX(QStackedLayout * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QStackedLayout_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QStackedLayout::tr(s));
}

extern "C" CrystalString bg_QStackedLayout_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QStackedLayout::tr(s, c));
}

extern "C" CrystalString bg_QStackedLayout_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QStackedLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QStackedLayout_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QStackedLayout::trUtf8(s));
}

extern "C" CrystalString bg_QStackedLayout_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QStackedLayout::trUtf8(s, c));
}

extern "C" CrystalString bg_QStackedLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QStackedLayout::trUtf8(s, c, n));
}

extern "C" QStackedLayout * bg_QStackedLayout__CONSTRUCT_() {
  return new (UseGC) BgInherit_StackedLayout();
}

extern "C" QStackedLayout * bg_QStackedLayout__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_StackedLayout(parent);
}

extern "C" QStackedLayout * bg_QStackedLayout__CONSTRUCT_QLayout_X(QLayout * parentLayout) {
  return new (UseGC) BgInherit_StackedLayout(parentLayout);
}

extern "C" int bg_QStackedLayout_addWidget_QWidget_X(QStackedLayout * _self_, QWidget * w) {
  return _self_->addWidget(w);
}

extern "C" int bg_QStackedLayout_insertWidget_int_QWidget_X(QStackedLayout * _self_, int index, QWidget * w) {
  return _self_->insertWidget(index, w);
}

extern "C" QWidget * bg_QStackedLayout_currentWidget_(QStackedLayout * _self_) {
  return _self_->currentWidget();
}

extern "C" int bg_QStackedLayout_currentIndex_(QStackedLayout * _self_) {
  return _self_->currentIndex();
}

extern "C" QWidget * bg_QStackedLayout_widget_int(QStackedLayout * _self_, int unnamed_arg_0) {
  return _self_->widget(unnamed_arg_0);
}

extern "C" int bg_QStackedLayout_count_(QStackedLayout * _self_) {
  return _self_->count();
}

extern "C" QStackedLayout::StackingMode bg_QStackedLayout_stackingMode_(QStackedLayout * _self_) {
  return _self_->stackingMode();
}

extern "C" void bg_QStackedLayout_setStackingMode_QStackedLayout__StackingMode(QStackedLayout * _self_, QStackedLayout::StackingMode stackingMode) {
  _self_->setStackingMode(stackingMode);
}

extern "C" void bg_QStackedLayout_addItem_QLayoutItem_X(QStackedLayout * _self_, QLayoutItem * item) {
  _self_->addItem(item);
}

extern "C" QSize * bg_QStackedLayout_sizeHint_(QStackedLayout * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QStackedLayout_minimumSize_(QStackedLayout * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QLayoutItem * bg_QStackedLayout_itemAt_int(QStackedLayout * _self_, int unnamed_arg_0) {
  return _self_->itemAt(unnamed_arg_0);
}

extern "C" QLayoutItem * bg_QStackedLayout_takeAt_int(QStackedLayout * _self_, int unnamed_arg_0) {
  return _self_->takeAt(unnamed_arg_0);
}

extern "C" void bg_QStackedLayout_setGeometry_const_QRect_R(QStackedLayout * _self_, const QRect & rect) {
  _self_->setGeometry(rect);
}

extern "C" bool bg_QStackedLayout_hasHeightForWidth_(QStackedLayout * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" int bg_QStackedLayout_heightForWidth_int(QStackedLayout * _self_, int width) {
  return _self_->heightForWidth(width);
}

extern "C" void bg_QStackedLayout_widgetRemoved_int(QStackedLayout * _self_, int index) {
  _self_->widgetRemoved(index);
}

extern "C" void bg_QStackedLayout_currentChanged_int(QStackedLayout * _self_, int index) {
  _self_->currentChanged(index);
}

extern "C" void bg_QStackedLayout_setCurrentIndex_int(QStackedLayout * _self_, int index) {
  _self_->setCurrentIndex(index);
}

extern "C" void bg_QStackedLayout_setCurrentWidget_QWidget_X(QStackedLayout * _self_, QWidget * w) {
  _self_->setCurrentWidget(w);
}

extern "C" QMetaObject::Connection * bg_QStackedLayout_CONNECT_widgetRemoved_CrystalProc_void_int(QStackedLayout * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QStackedLayout::*)(int))&QStackedLayout::widgetRemoved, [_proc_](int index){ _proc_(index); }));
}

extern "C" QMetaObject::Connection * bg_QStackedLayout_CONNECT_currentChanged_CrystalProc_void_int(QStackedLayout * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QStackedLayout::*)(int))&QStackedLayout::currentChanged, [_proc_](int index){ _proc_(index); }));
}

extern "C" void bg_BgInherit_StackedLayout_JUMPTABLE_BgJumptable_StackedLayout_R(BgInherit_StackedLayout * _self_, const BgJumptable_StackedLayout & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_FormLayout {
  CrystalProc<const QMetaObject *> bg_QFormLayout_metaObject_;
  CrystalProc<void *, const char *> bg_QFormLayout_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QFormLayout_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QLayoutItem *> bg_QFormLayout_addItem_QLayoutItem_X;
  CrystalProc<QLayoutItem *, int> bg_QFormLayout_itemAt_int;
  CrystalProc<QLayoutItem *, int> bg_QFormLayout_takeAt_int;
  CrystalProc<void, const QRect *> bg_QFormLayout_setGeometry_const_QRect_R;
  CrystalProc<QSize &> bg_QFormLayout_minimumSize_;
  CrystalProc<QSize &> bg_QFormLayout_sizeHint_;
  CrystalProc<void> bg_QFormLayout_invalidate_;
  CrystalProc<bool> bg_QFormLayout_hasHeightForWidth_;
  CrystalProc<int, int> bg_QFormLayout_heightForWidth_int;
  CrystalProc<Qt::Orientations> bg_QFormLayout_expandingDirections_;
  CrystalProc<int> bg_QFormLayout_count_;
  CrystalProc<QRect &> bg_QLayout_geometry_;
  CrystalProc<QSize &> bg_QLayout_maximumSize_;
  CrystalProc<int, QWidget *> bg_QLayout_indexOf_QWidget_X;
  CrystalProc<bool> bg_QLayout_isEmpty_;
  CrystalProc<QSizePolicy::ControlTypes> bg_QLayout_controlTypes_;
  CrystalProc<QLayout *> bg_QLayout_layout_;
  CrystalProc<void, QChildEvent *> bg_QLayout_childEvent_QChildEvent_X;
};
struct BgInherit_FormLayout : public QFormLayout {
  using QFormLayout::QFormLayout;
  BgJumptable_FormLayout bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_metaObject_.isValid()) {
      return _self_->bgJump.bg_QFormLayout_metaObject_();
    } else {
      return QFormLayout::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QFormLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QFormLayout::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QFormLayout_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QFormLayout::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void addItem(QLayoutItem * item) override {
    BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_addItem_QLayoutItem_X.isValid()) {
      _self_->bgJump.bg_QFormLayout_addItem_QLayoutItem_X(item);
    } else {
      QFormLayout::addItem(item);
    }
  }
  
  QLayoutItem * itemAt(int index) const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_itemAt_int.isValid()) {
      return _self_->bgJump.bg_QFormLayout_itemAt_int(index);
    } else {
      return QFormLayout::itemAt(index);
    }
  }
  
  QLayoutItem * takeAt(int index) override {
    BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_takeAt_int.isValid()) {
      return _self_->bgJump.bg_QFormLayout_takeAt_int(index);
    } else {
      return QFormLayout::takeAt(index);
    }
  }
  
  void setGeometry(const QRect & rect) override {
    BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_setGeometry_const_QRect_R.isValid()) {
      _self_->bgJump.bg_QFormLayout_setGeometry_const_QRect_R(&(rect));
    } else {
      QFormLayout::setGeometry(rect);
    }
  }
  
  QSize minimumSize() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_minimumSize_.isValid()) {
      return _self_->bgJump.bg_QFormLayout_minimumSize_();
    } else {
      return QFormLayout::minimumSize();
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QFormLayout_sizeHint_();
    } else {
      return QFormLayout::sizeHint();
    }
  }
  
  void invalidate() override {
    BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_invalidate_.isValid()) {
      _self_->bgJump.bg_QFormLayout_invalidate_();
    } else {
      QFormLayout::invalidate();
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QFormLayout_hasHeightForWidth_();
    } else {
      return QFormLayout::hasHeightForWidth();
    }
  }
  
  int heightForWidth(int width) const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QFormLayout_heightForWidth_int(width);
    } else {
      return QFormLayout::heightForWidth(width);
    }
  }
  
  Qt::Orientations expandingDirections() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_expandingDirections_.isValid()) {
      return _self_->bgJump.bg_QFormLayout_expandingDirections_();
    } else {
      return QFormLayout::expandingDirections();
    }
  }
  
  int count() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QFormLayout_count_.isValid()) {
      return _self_->bgJump.bg_QFormLayout_count_();
    } else {
      return QFormLayout::count();
    }
  }
  
  QRect geometry() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_geometry_.isValid()) {
      return _self_->bgJump.bg_QLayout_geometry_();
    } else {
      return QFormLayout::geometry();
    }
  }
  
  QSize maximumSize() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_maximumSize_.isValid()) {
      return _self_->bgJump.bg_QLayout_maximumSize_();
    } else {
      return QFormLayout::maximumSize();
    }
  }
  
  int indexOf(QWidget * unnamed_arg_0) const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_indexOf_QWidget_X.isValid()) {
      return _self_->bgJump.bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QFormLayout::indexOf(unnamed_arg_0);
    }
  }
  
  bool isEmpty() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_isEmpty_.isValid()) {
      return _self_->bgJump.bg_QLayout_isEmpty_();
    } else {
      return QFormLayout::isEmpty();
    }
  }
  
  QSizePolicy::ControlTypes controlTypes() const override {
    const BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_controlTypes_.isValid()) {
      return _self_->bgJump.bg_QLayout_controlTypes_();
    } else {
      return QFormLayout::controlTypes();
    }
  }
  
  QLayout * layout() override {
    BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_layout_.isValid()) {
      return _self_->bgJump.bg_QLayout_layout_();
    } else {
      return QFormLayout::layout();
    }
  }
  
  void childEvent(QChildEvent * e) override {
    BgInherit_FormLayout *_self_ = this;
    if (_self_->bgJump.bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      QFormLayout::childEvent(e);
    }
  }
  
};
extern "C" const QMetaObject * bg_QFormLayout_metaObject_(QFormLayout * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QFormLayout_qt_metacast_const_char_X(QFormLayout * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QFormLayout_qt_metacall_QMetaObject__Call_int_void_XX(QFormLayout * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QFormLayout_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QFormLayout::tr(s));
}

extern "C" CrystalString bg_QFormLayout_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QFormLayout::tr(s, c));
}

extern "C" CrystalString bg_QFormLayout_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QFormLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QFormLayout_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QFormLayout::trUtf8(s));
}

extern "C" CrystalString bg_QFormLayout_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QFormLayout::trUtf8(s, c));
}

extern "C" CrystalString bg_QFormLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QFormLayout::trUtf8(s, c, n));
}

extern "C" QFormLayout * bg_QFormLayout__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_FormLayout(parent);
}

extern "C" void bg_QFormLayout_setFieldGrowthPolicy_QFormLayout__FieldGrowthPolicy(QFormLayout * _self_, QFormLayout::FieldGrowthPolicy policy) {
  _self_->setFieldGrowthPolicy(policy);
}

extern "C" QFormLayout::FieldGrowthPolicy bg_QFormLayout_fieldGrowthPolicy_(QFormLayout * _self_) {
  return _self_->fieldGrowthPolicy();
}

extern "C" void bg_QFormLayout_setRowWrapPolicy_QFormLayout__RowWrapPolicy(QFormLayout * _self_, QFormLayout::RowWrapPolicy policy) {
  _self_->setRowWrapPolicy(policy);
}

extern "C" QFormLayout::RowWrapPolicy bg_QFormLayout_rowWrapPolicy_(QFormLayout * _self_) {
  return _self_->rowWrapPolicy();
}

extern "C" void bg_QFormLayout_setLabelAlignment_Qt__Alignment(QFormLayout * _self_, Qt::Alignment alignment) {
  _self_->setLabelAlignment(alignment);
}

extern "C" Qt::Alignment bg_QFormLayout_labelAlignment_(QFormLayout * _self_) {
  return _self_->labelAlignment();
}

extern "C" void bg_QFormLayout_setFormAlignment_Qt__Alignment(QFormLayout * _self_, Qt::Alignment alignment) {
  _self_->setFormAlignment(alignment);
}

extern "C" Qt::Alignment bg_QFormLayout_formAlignment_(QFormLayout * _self_) {
  return _self_->formAlignment();
}

extern "C" void bg_QFormLayout_setHorizontalSpacing_int(QFormLayout * _self_, int spacing) {
  _self_->setHorizontalSpacing(spacing);
}

extern "C" int bg_QFormLayout_horizontalSpacing_(QFormLayout * _self_) {
  return _self_->horizontalSpacing();
}

extern "C" void bg_QFormLayout_setVerticalSpacing_int(QFormLayout * _self_, int spacing) {
  _self_->setVerticalSpacing(spacing);
}

extern "C" int bg_QFormLayout_verticalSpacing_(QFormLayout * _self_) {
  return _self_->verticalSpacing();
}

extern "C" int bg_QFormLayout_spacing_(QFormLayout * _self_) {
  return _self_->spacing();
}

extern "C" void bg_QFormLayout_setSpacing_int(QFormLayout * _self_, int unnamed_arg_0) {
  _self_->setSpacing(unnamed_arg_0);
}

extern "C" void bg_QFormLayout_addRow_QWidget_X_QWidget_X(QFormLayout * _self_, QWidget * label, QWidget * field) {
  _self_->addRow(label, field);
}

extern "C" void bg_QFormLayout_addRow_QWidget_X_QLayout_X(QFormLayout * _self_, QWidget * label, QLayout * field) {
  _self_->addRow(label, field);
}

extern "C" void bg_QFormLayout_addRow_const_QString_R_QWidget_X(QFormLayout * _self_, const CrystalString labelText, QWidget * field) {
  _self_->addRow(QString::fromUtf8(labelText.ptr, labelText.size), field);
}

extern "C" void bg_QFormLayout_addRow_const_QString_R_QLayout_X(QFormLayout * _self_, const CrystalString labelText, QLayout * field) {
  _self_->addRow(QString::fromUtf8(labelText.ptr, labelText.size), field);
}

extern "C" void bg_QFormLayout_addRow_QWidget_X(QFormLayout * _self_, QWidget * widget) {
  _self_->addRow(widget);
}

extern "C" void bg_QFormLayout_addRow_QLayout_X(QFormLayout * _self_, QLayout * layout) {
  _self_->addRow(layout);
}

extern "C" void bg_QFormLayout_insertRow_int_QWidget_X_QWidget_X(QFormLayout * _self_, int row, QWidget * label, QWidget * field) {
  _self_->insertRow(row, label, field);
}

extern "C" void bg_QFormLayout_insertRow_int_QWidget_X_QLayout_X(QFormLayout * _self_, int row, QWidget * label, QLayout * field) {
  _self_->insertRow(row, label, field);
}

extern "C" void bg_QFormLayout_insertRow_int_const_QString_R_QWidget_X(QFormLayout * _self_, int row, const CrystalString labelText, QWidget * field) {
  _self_->insertRow(row, QString::fromUtf8(labelText.ptr, labelText.size), field);
}

extern "C" void bg_QFormLayout_insertRow_int_const_QString_R_QLayout_X(QFormLayout * _self_, int row, const CrystalString labelText, QLayout * field) {
  _self_->insertRow(row, QString::fromUtf8(labelText.ptr, labelText.size), field);
}

extern "C" void bg_QFormLayout_insertRow_int_QWidget_X(QFormLayout * _self_, int row, QWidget * widget) {
  _self_->insertRow(row, widget);
}

extern "C" void bg_QFormLayout_insertRow_int_QLayout_X(QFormLayout * _self_, int row, QLayout * layout) {
  _self_->insertRow(row, layout);
}

extern "C" void bg_QFormLayout_setItem_int_QFormLayout__ItemRole_QLayoutItem_X(QFormLayout * _self_, int row, QFormLayout::ItemRole role, QLayoutItem * item) {
  _self_->setItem(row, role, item);
}

extern "C" void bg_QFormLayout_setWidget_int_QFormLayout__ItemRole_QWidget_X(QFormLayout * _self_, int row, QFormLayout::ItemRole role, QWidget * widget) {
  _self_->setWidget(row, role, widget);
}

extern "C" void bg_QFormLayout_setLayout_int_QFormLayout__ItemRole_QLayout_X(QFormLayout * _self_, int row, QFormLayout::ItemRole role, QLayout * layout) {
  _self_->setLayout(row, role, layout);
}

extern "C" QLayoutItem * bg_QFormLayout_itemAt_int_QFormLayout__ItemRole(QFormLayout * _self_, int row, QFormLayout::ItemRole role) {
  return _self_->itemAt(row, role);
}

extern "C" void bg_QFormLayout_getItemPosition_int_int_X_QFormLayout__ItemRole_X(QFormLayout * _self_, int index, int * rowPtr, QFormLayout::ItemRole * rolePtr) {
  _self_->getItemPosition(index, rowPtr, rolePtr);
}

extern "C" void bg_QFormLayout_getWidgetPosition_QWidget_X_int_X_QFormLayout__ItemRole_X(QFormLayout * _self_, QWidget * widget, int * rowPtr, QFormLayout::ItemRole * rolePtr) {
  _self_->getWidgetPosition(widget, rowPtr, rolePtr);
}

extern "C" void bg_QFormLayout_getLayoutPosition_QLayout_X_int_X_QFormLayout__ItemRole_X(QFormLayout * _self_, QLayout * layout, int * rowPtr, QFormLayout::ItemRole * rolePtr) {
  _self_->getLayoutPosition(layout, rowPtr, rolePtr);
}

extern "C" QWidget * bg_QFormLayout_labelForField_QWidget_X(QFormLayout * _self_, QWidget * field) {
  return _self_->labelForField(field);
}

extern "C" QWidget * bg_QFormLayout_labelForField_QLayout_X(QFormLayout * _self_, QLayout * field) {
  return _self_->labelForField(field);
}

extern "C" void bg_QFormLayout_addItem_QLayoutItem_X(QFormLayout * _self_, QLayoutItem * item) {
  _self_->addItem(item);
}

extern "C" QLayoutItem * bg_QFormLayout_itemAt_int(QFormLayout * _self_, int index) {
  return _self_->itemAt(index);
}

extern "C" QLayoutItem * bg_QFormLayout_takeAt_int(QFormLayout * _self_, int index) {
  return _self_->takeAt(index);
}

extern "C" void bg_QFormLayout_setGeometry_const_QRect_R(QFormLayout * _self_, const QRect & rect) {
  _self_->setGeometry(rect);
}

extern "C" QSize * bg_QFormLayout_minimumSize_(QFormLayout * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QFormLayout_sizeHint_(QFormLayout * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" void bg_QFormLayout_invalidate_(QFormLayout * _self_) {
  _self_->invalidate();
}

extern "C" bool bg_QFormLayout_hasHeightForWidth_(QFormLayout * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" int bg_QFormLayout_heightForWidth_int(QFormLayout * _self_, int width) {
  return _self_->heightForWidth(width);
}

extern "C" Qt::Orientations bg_QFormLayout_expandingDirections_(QFormLayout * _self_) {
  return _self_->expandingDirections();
}

extern "C" int bg_QFormLayout_count_(QFormLayout * _self_) {
  return _self_->count();
}

extern "C" int bg_QFormLayout_rowCount_(QFormLayout * _self_) {
  return _self_->rowCount();
}

extern "C" void bg_BgInherit_FormLayout_JUMPTABLE_BgJumptable_FormLayout_R(BgInherit_FormLayout * _self_, const BgJumptable_FormLayout & table) {
  _self_->bgJump = (table);
}

extern "C" QPalette * bg_QPalette__CONSTRUCT_() {
  return new (UseGC) QPalette();
}

extern "C" QPalette * bg_QPalette__CONSTRUCT_const_QColor_R(const QColor & button) {
  return new (UseGC) QPalette(button);
}

extern "C" QPalette * bg_QPalette__CONSTRUCT_Qt__GlobalColor(Qt::GlobalColor button) {
  return new (UseGC) QPalette(button);
}

extern "C" QPalette * bg_QPalette__CONSTRUCT_const_QColor_R_const_QColor_R(const QColor & button, const QColor & window) {
  return new (UseGC) QPalette(button, window);
}

extern "C" QPalette * bg_QPalette__CONSTRUCT_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(const QBrush & windowText, const QBrush & button, const QBrush & light, const QBrush & dark, const QBrush & mid, const QBrush & text, const QBrush & bright_text, const QBrush & base, const QBrush & window) {
  return new (UseGC) QPalette(windowText, button, light, dark, mid, text, bright_text, base, window);
}

extern "C" QPalette * bg_QPalette__CONSTRUCT_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R(const QColor & windowText, const QColor & window, const QColor & light, const QColor & dark, const QColor & mid, const QColor & text, const QColor & base) {
  return new (UseGC) QPalette(windowText, window, light, dark, mid, text, base);
}

extern "C" void bg_QPalette_swap_QPalette_R(QPalette * _self_, QPalette & other) {
  _self_->swap(other);
}

extern "C" QPalette::ColorGroup bg_QPalette_currentColorGroup_(QPalette * _self_) {
  return _self_->currentColorGroup();
}

extern "C" void bg_QPalette_setCurrentColorGroup_QPalette__ColorGroup(QPalette * _self_, QPalette::ColorGroup cg) {
  _self_->setCurrentColorGroup(cg);
}

extern "C" const QColor * bg_QPalette_color_QPalette__ColorGroup_QPalette__ColorRole(QPalette * _self_, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  return &(_self_->color(cg, cr));
}

extern "C" const QBrush * bg_QPalette_brush_QPalette__ColorGroup_QPalette__ColorRole(QPalette * _self_, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  return &(_self_->brush(cg, cr));
}

extern "C" void bg_QPalette_setColor_QPalette__ColorGroup_QPalette__ColorRole_const_QColor_R(QPalette * _self_, QPalette::ColorGroup cg, QPalette::ColorRole cr, const QColor & color) {
  _self_->setColor(cg, cr, color);
}

extern "C" void bg_QPalette_setColor_QPalette__ColorRole_const_QColor_R(QPalette * _self_, QPalette::ColorRole cr, const QColor & color) {
  _self_->setColor(cr, color);
}

extern "C" void bg_QPalette_setBrush_QPalette__ColorRole_const_QBrush_R(QPalette * _self_, QPalette::ColorRole cr, const QBrush & brush) {
  _self_->setBrush(cr, brush);
}

extern "C" bool bg_QPalette_isBrushSet_QPalette__ColorGroup_QPalette__ColorRole(QPalette * _self_, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  return _self_->isBrushSet(cg, cr);
}

extern "C" void bg_QPalette_setBrush_QPalette__ColorGroup_QPalette__ColorRole_const_QBrush_R(QPalette * _self_, QPalette::ColorGroup cg, QPalette::ColorRole cr, const QBrush & brush) {
  _self_->setBrush(cg, cr, brush);
}

extern "C" void bg_QPalette_setColorGroup_QPalette__ColorGroup_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(QPalette * _self_, QPalette::ColorGroup cr, const QBrush & windowText, const QBrush & button, const QBrush & light, const QBrush & dark, const QBrush & mid, const QBrush & text, const QBrush & bright_text, const QBrush & base, const QBrush & window) {
  _self_->setColorGroup(cr, windowText, button, light, dark, mid, text, bright_text, base, window);
}

extern "C" bool bg_QPalette_isEqual_QPalette__ColorGroup_QPalette__ColorGroup(QPalette * _self_, QPalette::ColorGroup cr1, QPalette::ColorGroup cr2) {
  return _self_->isEqual(cr1, cr2);
}

extern "C" const QColor * bg_QPalette_color_QPalette__ColorRole(QPalette * _self_, QPalette::ColorRole cr) {
  return &(_self_->color(cr));
}

extern "C" const QBrush * bg_QPalette_brush_QPalette__ColorRole(QPalette * _self_, QPalette::ColorRole cr) {
  return &(_self_->brush(cr));
}

extern "C" const QBrush * bg_QPalette_foreground_(QPalette * _self_) {
  return &(_self_->foreground());
}

extern "C" const QBrush * bg_QPalette_windowText_(QPalette * _self_) {
  return &(_self_->windowText());
}

extern "C" const QBrush * bg_QPalette_button_(QPalette * _self_) {
  return &(_self_->button());
}

extern "C" const QBrush * bg_QPalette_light_(QPalette * _self_) {
  return &(_self_->light());
}

extern "C" const QBrush * bg_QPalette_dark_(QPalette * _self_) {
  return &(_self_->dark());
}

extern "C" const QBrush * bg_QPalette_mid_(QPalette * _self_) {
  return &(_self_->mid());
}

extern "C" const QBrush * bg_QPalette_text_(QPalette * _self_) {
  return &(_self_->text());
}

extern "C" const QBrush * bg_QPalette_base_(QPalette * _self_) {
  return &(_self_->base());
}

extern "C" const QBrush * bg_QPalette_alternateBase_(QPalette * _self_) {
  return &(_self_->alternateBase());
}

extern "C" const QBrush * bg_QPalette_toolTipBase_(QPalette * _self_) {
  return &(_self_->toolTipBase());
}

extern "C" const QBrush * bg_QPalette_toolTipText_(QPalette * _self_) {
  return &(_self_->toolTipText());
}

extern "C" const QBrush * bg_QPalette_background_(QPalette * _self_) {
  return &(_self_->background());
}

extern "C" const QBrush * bg_QPalette_window_(QPalette * _self_) {
  return &(_self_->window());
}

extern "C" const QBrush * bg_QPalette_midlight_(QPalette * _self_) {
  return &(_self_->midlight());
}

extern "C" const QBrush * bg_QPalette_brightText_(QPalette * _self_) {
  return &(_self_->brightText());
}

extern "C" const QBrush * bg_QPalette_buttonText_(QPalette * _self_) {
  return &(_self_->buttonText());
}

extern "C" const QBrush * bg_QPalette_shadow_(QPalette * _self_) {
  return &(_self_->shadow());
}

extern "C" const QBrush * bg_QPalette_highlight_(QPalette * _self_) {
  return &(_self_->highlight());
}

extern "C" const QBrush * bg_QPalette_highlightedText_(QPalette * _self_) {
  return &(_self_->highlightedText());
}

extern "C" const QBrush * bg_QPalette_link_(QPalette * _self_) {
  return &(_self_->link());
}

extern "C" const QBrush * bg_QPalette_linkVisited_(QPalette * _self_) {
  return &(_self_->linkVisited());
}

extern "C" bool bg_QPalette_isCopyOf_const_QPalette_R(QPalette * _self_, const QPalette & p) {
  return _self_->isCopyOf(p);
}

extern "C" qint64 bg_QPalette_cacheKey_(QPalette * _self_) {
  return _self_->cacheKey();
}

extern "C" QPalette * bg_QPalette_resolve_const_QPalette_R(QPalette * _self_, const QPalette & unnamed_arg_0) {
  return new (UseGC) QPalette (_self_->resolve(unnamed_arg_0));
}

extern "C" uint bg_QPalette_resolve_(QPalette * _self_) {
  return _self_->resolve();
}

extern "C" void bg_QPalette_resolve_uint(QPalette * _self_, uint mask) {
  _self_->resolve(mask);
}

extern "C" QRect * bg_QRect__CONSTRUCT_() {
  return new (UseGC) QRect();
}

extern "C" QRect * bg_QRect__CONSTRUCT_const_QPoint_R_const_QPoint_R(const QPoint topleft, const QPoint bottomright) {
  return new (UseGC) QRect(topleft, bottomright);
}

extern "C" QRect * bg_QRect__CONSTRUCT_const_QPoint_R_const_QSize_R(const QPoint topleft, const QSize & size) {
  return new (UseGC) QRect(topleft, size);
}

extern "C" QRect * bg_QRect__CONSTRUCT_int_int_int_int(int left, int top, int width, int height) {
  return new (UseGC) QRect(left, top, width, height);
}

extern "C" bool bg_QRect_isNull_(QRect * _self_) {
  return _self_->isNull();
}

extern "C" bool bg_QRect_isEmpty_(QRect * _self_) {
  return _self_->isEmpty();
}

extern "C" bool bg_QRect_isValid_(QRect * _self_) {
  return _self_->isValid();
}

extern "C" int bg_QRect_left_(QRect * _self_) {
  return _self_->left();
}

extern "C" int bg_QRect_top_(QRect * _self_) {
  return _self_->top();
}

extern "C" int bg_QRect_right_(QRect * _self_) {
  return _self_->right();
}

extern "C" int bg_QRect_bottom_(QRect * _self_) {
  return _self_->bottom();
}

extern "C" QRect * bg_QRect_normalized_(QRect * _self_) {
  return new (UseGC) QRect (_self_->normalized());
}

extern "C" int bg_QRect_x_(QRect * _self_) {
  return _self_->x();
}

extern "C" int bg_QRect_y_(QRect * _self_) {
  return _self_->y();
}

extern "C" void bg_QRect_setLeft_int(QRect * _self_, int pos) {
  _self_->setLeft(pos);
}

extern "C" void bg_QRect_setTop_int(QRect * _self_, int pos) {
  _self_->setTop(pos);
}

extern "C" void bg_QRect_setRight_int(QRect * _self_, int pos) {
  _self_->setRight(pos);
}

extern "C" void bg_QRect_setBottom_int(QRect * _self_, int pos) {
  _self_->setBottom(pos);
}

extern "C" void bg_QRect_setX_int(QRect * _self_, int x) {
  _self_->setX(x);
}

extern "C" void bg_QRect_setY_int(QRect * _self_, int y) {
  _self_->setY(y);
}

extern "C" void bg_QRect_setTopLeft_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->setTopLeft(p);
}

extern "C" void bg_QRect_setBottomRight_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->setBottomRight(p);
}

extern "C" void bg_QRect_setTopRight_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->setTopRight(p);
}

extern "C" void bg_QRect_setBottomLeft_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->setBottomLeft(p);
}

extern "C" QPoint bg_QRect_topLeft_(QRect * _self_) {
  return _self_->topLeft();
}

extern "C" QPoint bg_QRect_bottomRight_(QRect * _self_) {
  return _self_->bottomRight();
}

extern "C" QPoint bg_QRect_topRight_(QRect * _self_) {
  return _self_->topRight();
}

extern "C" QPoint bg_QRect_bottomLeft_(QRect * _self_) {
  return _self_->bottomLeft();
}

extern "C" QPoint bg_QRect_center_(QRect * _self_) {
  return _self_->center();
}

extern "C" void bg_QRect_moveLeft_int(QRect * _self_, int pos) {
  _self_->moveLeft(pos);
}

extern "C" void bg_QRect_moveTop_int(QRect * _self_, int pos) {
  _self_->moveTop(pos);
}

extern "C" void bg_QRect_moveRight_int(QRect * _self_, int pos) {
  _self_->moveRight(pos);
}

extern "C" void bg_QRect_moveBottom_int(QRect * _self_, int pos) {
  _self_->moveBottom(pos);
}

extern "C" void bg_QRect_moveTopLeft_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->moveTopLeft(p);
}

extern "C" void bg_QRect_moveBottomRight_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->moveBottomRight(p);
}

extern "C" void bg_QRect_moveTopRight_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->moveTopRight(p);
}

extern "C" void bg_QRect_moveBottomLeft_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->moveBottomLeft(p);
}

extern "C" void bg_QRect_moveCenter_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->moveCenter(p);
}

extern "C" void bg_QRect_translate_int_int(QRect * _self_, int dx, int dy) {
  _self_->translate(dx, dy);
}

extern "C" void bg_QRect_translate_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->translate(p);
}

extern "C" QRect * bg_QRect_translated_int_int(QRect * _self_, int dx, int dy) {
  return new (UseGC) QRect (_self_->translated(dx, dy));
}

extern "C" QRect * bg_QRect_translated_const_QPoint_R(QRect * _self_, const QPoint p) {
  return new (UseGC) QRect (_self_->translated(p));
}

extern "C" void bg_QRect_moveTo_int_int(QRect * _self_, int x, int t) {
  _self_->moveTo(x, t);
}

extern "C" void bg_QRect_moveTo_const_QPoint_R(QRect * _self_, const QPoint p) {
  _self_->moveTo(p);
}

extern "C" void bg_QRect_setRect_int_int_int_int(QRect * _self_, int x, int y, int w, int h) {
  _self_->setRect(x, y, w, h);
}

extern "C" void bg_QRect_getRect_int_X_int_X_int_X_int_X(QRect * _self_, int * x, int * y, int * w, int * h) {
  _self_->getRect(x, y, w, h);
}

extern "C" void bg_QRect_setCoords_int_int_int_int(QRect * _self_, int x1, int y1, int x2, int y2) {
  _self_->setCoords(x1, y1, x2, y2);
}

extern "C" void bg_QRect_getCoords_int_X_int_X_int_X_int_X(QRect * _self_, int * x1, int * y1, int * x2, int * y2) {
  _self_->getCoords(x1, y1, x2, y2);
}

extern "C" void bg_QRect_adjust_int_int_int_int(QRect * _self_, int x1, int y1, int x2, int y2) {
  _self_->adjust(x1, y1, x2, y2);
}

extern "C" QRect * bg_QRect_adjusted_int_int_int_int(QRect * _self_, int x1, int y1, int x2, int y2) {
  return new (UseGC) QRect (_self_->adjusted(x1, y1, x2, y2));
}

extern "C" QSize * bg_QRect_size_(QRect * _self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" int bg_QRect_width_(QRect * _self_) {
  return _self_->width();
}

extern "C" int bg_QRect_height_(QRect * _self_) {
  return _self_->height();
}

extern "C" void bg_QRect_setWidth_int(QRect * _self_, int w) {
  _self_->setWidth(w);
}

extern "C" void bg_QRect_setHeight_int(QRect * _self_, int h) {
  _self_->setHeight(h);
}

extern "C" void bg_QRect_setSize_const_QSize_R(QRect * _self_, const QSize & s) {
  _self_->setSize(s);
}

extern "C" bool bg_QRect_contains_const_QRect_R_bool(QRect * _self_, const QRect & r, bool proper) {
  return _self_->contains(r, proper);
}

extern "C" bool bg_QRect_contains_const_QPoint_R_bool(QRect * _self_, const QPoint p, bool proper) {
  return _self_->contains(p, proper);
}

extern "C" bool bg_QRect_contains_int_int(QRect * _self_, int x, int y) {
  return _self_->contains(x, y);
}

extern "C" bool bg_QRect_contains_int_int_bool(QRect * _self_, int x, int y, bool proper) {
  return _self_->contains(x, y, proper);
}

extern "C" QRect * bg_QRect_united_const_QRect_R(QRect * _self_, const QRect & other) {
  return new (UseGC) QRect (_self_->united(other));
}

extern "C" QRect * bg_QRect_intersected_const_QRect_R(QRect * _self_, const QRect & other) {
  return new (UseGC) QRect (_self_->intersected(other));
}

extern "C" bool bg_QRect_intersects_const_QRect_R(QRect * _self_, const QRect & r) {
  return _self_->intersects(r);
}

extern "C" QRect * bg_QRect_marginsAdded_const_QMargins_R(QRect * _self_, const QMargins & margins) {
  return new (UseGC) QRect (_self_->marginsAdded(margins));
}

extern "C" QRect * bg_QRect_marginsRemoved_const_QMargins_R(QRect * _self_, const QMargins & margins) {
  return new (UseGC) QRect (_self_->marginsRemoved(margins));
}

extern "C" QRectF * bg_QRectF__CONSTRUCT_() {
  return new (UseGC) QRectF();
}

extern "C" QRectF * bg_QRectF__CONSTRUCT_const_QPointF_R_const_QSizeF_R(const QPointF topleft, const QSizeF & size) {
  return new (UseGC) QRectF(topleft, size);
}

extern "C" QRectF * bg_QRectF__CONSTRUCT_const_QPointF_R_const_QPointF_R(const QPointF topleft, const QPointF bottomRight) {
  return new (UseGC) QRectF(topleft, bottomRight);
}

extern "C" QRectF * bg_QRectF__CONSTRUCT_qreal_qreal_qreal_qreal(qreal left, qreal top, qreal width, qreal height) {
  return new (UseGC) QRectF(left, top, width, height);
}

extern "C" QRectF * bg_QRectF__CONSTRUCT_const_QRect_R(const QRect & rect) {
  return new (UseGC) QRectF(rect);
}

extern "C" bool bg_QRectF_isNull_(QRectF * _self_) {
  return _self_->isNull();
}

extern "C" bool bg_QRectF_isEmpty_(QRectF * _self_) {
  return _self_->isEmpty();
}

extern "C" bool bg_QRectF_isValid_(QRectF * _self_) {
  return _self_->isValid();
}

extern "C" QRectF * bg_QRectF_normalized_(QRectF * _self_) {
  return new (UseGC) QRectF (_self_->normalized());
}

extern "C" qreal bg_QRectF_left_(QRectF * _self_) {
  return _self_->left();
}

extern "C" qreal bg_QRectF_top_(QRectF * _self_) {
  return _self_->top();
}

extern "C" qreal bg_QRectF_right_(QRectF * _self_) {
  return _self_->right();
}

extern "C" qreal bg_QRectF_bottom_(QRectF * _self_) {
  return _self_->bottom();
}

extern "C" qreal bg_QRectF_x_(QRectF * _self_) {
  return _self_->x();
}

extern "C" qreal bg_QRectF_y_(QRectF * _self_) {
  return _self_->y();
}

extern "C" void bg_QRectF_setLeft_qreal(QRectF * _self_, qreal pos) {
  _self_->setLeft(pos);
}

extern "C" void bg_QRectF_setTop_qreal(QRectF * _self_, qreal pos) {
  _self_->setTop(pos);
}

extern "C" void bg_QRectF_setRight_qreal(QRectF * _self_, qreal pos) {
  _self_->setRight(pos);
}

extern "C" void bg_QRectF_setBottom_qreal(QRectF * _self_, qreal pos) {
  _self_->setBottom(pos);
}

extern "C" void bg_QRectF_setX_qreal(QRectF * _self_, qreal pos) {
  _self_->setX(pos);
}

extern "C" void bg_QRectF_setY_qreal(QRectF * _self_, qreal pos) {
  _self_->setY(pos);
}

extern "C" QPointF bg_QRectF_topLeft_(QRectF * _self_) {
  return _self_->topLeft();
}

extern "C" QPointF bg_QRectF_bottomRight_(QRectF * _self_) {
  return _self_->bottomRight();
}

extern "C" QPointF bg_QRectF_topRight_(QRectF * _self_) {
  return _self_->topRight();
}

extern "C" QPointF bg_QRectF_bottomLeft_(QRectF * _self_) {
  return _self_->bottomLeft();
}

extern "C" QPointF bg_QRectF_center_(QRectF * _self_) {
  return _self_->center();
}

extern "C" void bg_QRectF_setTopLeft_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->setTopLeft(p);
}

extern "C" void bg_QRectF_setBottomRight_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->setBottomRight(p);
}

extern "C" void bg_QRectF_setTopRight_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->setTopRight(p);
}

extern "C" void bg_QRectF_setBottomLeft_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->setBottomLeft(p);
}

extern "C" void bg_QRectF_moveLeft_qreal(QRectF * _self_, qreal pos) {
  _self_->moveLeft(pos);
}

extern "C" void bg_QRectF_moveTop_qreal(QRectF * _self_, qreal pos) {
  _self_->moveTop(pos);
}

extern "C" void bg_QRectF_moveRight_qreal(QRectF * _self_, qreal pos) {
  _self_->moveRight(pos);
}

extern "C" void bg_QRectF_moveBottom_qreal(QRectF * _self_, qreal pos) {
  _self_->moveBottom(pos);
}

extern "C" void bg_QRectF_moveTopLeft_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->moveTopLeft(p);
}

extern "C" void bg_QRectF_moveBottomRight_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->moveBottomRight(p);
}

extern "C" void bg_QRectF_moveTopRight_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->moveTopRight(p);
}

extern "C" void bg_QRectF_moveBottomLeft_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->moveBottomLeft(p);
}

extern "C" void bg_QRectF_moveCenter_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->moveCenter(p);
}

extern "C" void bg_QRectF_translate_qreal_qreal(QRectF * _self_, qreal dx, qreal dy) {
  _self_->translate(dx, dy);
}

extern "C" void bg_QRectF_translate_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->translate(p);
}

extern "C" QRectF * bg_QRectF_translated_qreal_qreal(QRectF * _self_, qreal dx, qreal dy) {
  return new (UseGC) QRectF (_self_->translated(dx, dy));
}

extern "C" QRectF * bg_QRectF_translated_const_QPointF_R(QRectF * _self_, const QPointF p) {
  return new (UseGC) QRectF (_self_->translated(p));
}

extern "C" void bg_QRectF_moveTo_qreal_qreal(QRectF * _self_, qreal x, qreal y) {
  _self_->moveTo(x, y);
}

extern "C" void bg_QRectF_moveTo_const_QPointF_R(QRectF * _self_, const QPointF p) {
  _self_->moveTo(p);
}

extern "C" void bg_QRectF_setRect_qreal_qreal_qreal_qreal(QRectF * _self_, qreal x, qreal y, qreal w, qreal h) {
  _self_->setRect(x, y, w, h);
}

extern "C" void bg_QRectF_getRect_qreal_X_qreal_X_qreal_X_qreal_X(QRectF * _self_, qreal * x, qreal * y, qreal * w, qreal * h) {
  _self_->getRect(x, y, w, h);
}

extern "C" void bg_QRectF_setCoords_qreal_qreal_qreal_qreal(QRectF * _self_, qreal x1, qreal y1, qreal x2, qreal y2) {
  _self_->setCoords(x1, y1, x2, y2);
}

extern "C" void bg_QRectF_getCoords_qreal_X_qreal_X_qreal_X_qreal_X(QRectF * _self_, qreal * x1, qreal * y1, qreal * x2, qreal * y2) {
  _self_->getCoords(x1, y1, x2, y2);
}

extern "C" void bg_QRectF_adjust_qreal_qreal_qreal_qreal(QRectF * _self_, qreal x1, qreal y1, qreal x2, qreal y2) {
  _self_->adjust(x1, y1, x2, y2);
}

extern "C" QRectF * bg_QRectF_adjusted_qreal_qreal_qreal_qreal(QRectF * _self_, qreal x1, qreal y1, qreal x2, qreal y2) {
  return new (UseGC) QRectF (_self_->adjusted(x1, y1, x2, y2));
}

extern "C" QSizeF * bg_QRectF_size_(QRectF * _self_) {
  return new (UseGC) QSizeF (_self_->size());
}

extern "C" qreal bg_QRectF_width_(QRectF * _self_) {
  return _self_->width();
}

extern "C" qreal bg_QRectF_height_(QRectF * _self_) {
  return _self_->height();
}

extern "C" void bg_QRectF_setWidth_qreal(QRectF * _self_, qreal w) {
  _self_->setWidth(w);
}

extern "C" void bg_QRectF_setHeight_qreal(QRectF * _self_, qreal h) {
  _self_->setHeight(h);
}

extern "C" void bg_QRectF_setSize_const_QSizeF_R(QRectF * _self_, const QSizeF & s) {
  _self_->setSize(s);
}

extern "C" bool bg_QRectF_contains_const_QRectF_R(QRectF * _self_, const QRectF & r) {
  return _self_->contains(r);
}

extern "C" bool bg_QRectF_contains_const_QPointF_R(QRectF * _self_, const QPointF p) {
  return _self_->contains(p);
}

extern "C" bool bg_QRectF_contains_qreal_qreal(QRectF * _self_, qreal x, qreal y) {
  return _self_->contains(x, y);
}

extern "C" QRectF * bg_QRectF_united_const_QRectF_R(QRectF * _self_, const QRectF & other) {
  return new (UseGC) QRectF (_self_->united(other));
}

extern "C" QRectF * bg_QRectF_intersected_const_QRectF_R(QRectF * _self_, const QRectF & other) {
  return new (UseGC) QRectF (_self_->intersected(other));
}

extern "C" bool bg_QRectF_intersects_const_QRectF_R(QRectF * _self_, const QRectF & r) {
  return _self_->intersects(r);
}

extern "C" QRectF * bg_QRectF_marginsAdded_const_QMarginsF_R(QRectF * _self_, const QMarginsF & margins) {
  return new (UseGC) QRectF (_self_->marginsAdded(margins));
}

extern "C" QRectF * bg_QRectF_marginsRemoved_const_QMarginsF_R(QRectF * _self_, const QMarginsF & margins) {
  return new (UseGC) QRectF (_self_->marginsRemoved(margins));
}

extern "C" QRect * bg_QRectF_toRect_(QRectF * _self_) {
  return new (UseGC) QRect (_self_->toRect());
}

extern "C" QRect * bg_QRectF_toAlignedRect_(QRectF * _self_) {
  return new (UseGC) QRect (_self_->toAlignedRect());
}

extern "C" QKeySequence * bg_QKeySequence__CONSTRUCT_() {
  return new (UseGC) QKeySequence();
}

extern "C" QKeySequence * bg_QKeySequence__CONSTRUCT_const_QString_R_QKeySequence__SequenceFormat(const CrystalString key, QKeySequence::SequenceFormat format) {
  return new (UseGC) QKeySequence(QString::fromUtf8(key.ptr, key.size), format);
}

extern "C" QKeySequence * bg_QKeySequence__CONSTRUCT_int_int_int_int(int k1, int k2, int k3, int k4) {
  return new (UseGC) QKeySequence(k1, k2, k3, k4);
}

extern "C" QKeySequence * bg_QKeySequence__CONSTRUCT_QKeySequence__StandardKey(QKeySequence::StandardKey key) {
  return new (UseGC) QKeySequence(key);
}

extern "C" int bg_QKeySequence_count_(QKeySequence * _self_) {
  return _self_->count();
}

extern "C" bool bg_QKeySequence_isEmpty_(QKeySequence * _self_) {
  return _self_->isEmpty();
}

extern "C" CrystalString bg_QKeySequence_toString_QKeySequence__SequenceFormat(QKeySequence * _self_, QKeySequence::SequenceFormat format) {
  return qstring_to_crystal(_self_->toString(format));
}

extern "C" QKeySequence * bg_QKeySequence_fromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(const CrystalString str, QKeySequence::SequenceFormat format) {
  return new (UseGC) QKeySequence (QKeySequence::fromString(QString::fromUtf8(str.ptr, str.size), format));
}

extern "C" Container_QList_QKeySequence * bg_QKeySequence_listFromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(const CrystalString str, QKeySequence::SequenceFormat format) {
  return new (UseGC) Container_QList_QKeySequence (QKeySequence::listFromString(QString::fromUtf8(str.ptr, str.size), format));
}

extern "C" CrystalString bg_QKeySequence_listToString_STATIC_const_QList_QKeySequence__R_QKeySequence__SequenceFormat(const Container_QList_QKeySequence * list, QKeySequence::SequenceFormat format) {
  return qstring_to_crystal(QKeySequence::listToString(*(list), format));
}

extern "C" QKeySequence::SequenceMatch bg_QKeySequence_matches_const_QKeySequence_R(QKeySequence * _self_, const QKeySequence & seq) {
  return _self_->matches(seq);
}

extern "C" QKeySequence * bg_QKeySequence_mnemonic_STATIC_const_QString_R(const CrystalString text) {
  return new (UseGC) QKeySequence (QKeySequence::mnemonic(QString::fromUtf8(text.ptr, text.size)));
}

extern "C" Container_QList_QKeySequence * bg_QKeySequence_keyBindings_STATIC_QKeySequence__StandardKey(QKeySequence::StandardKey key) {
  return new (UseGC) Container_QList_QKeySequence (QKeySequence::keyBindings(key));
}

extern "C" void bg_QKeySequence_swap_QKeySequence_R(QKeySequence * _self_, QKeySequence & other) {
  _self_->swap(other);
}

extern "C" bool bg_QKeySequence_isDetached_(QKeySequence * _self_) {
  return _self_->isDetached();
}

struct BgJumptable_LineEdit {
  CrystalProc<const QMetaObject *> bg_QLineEdit_metaObject_;
  CrystalProc<void *, const char *> bg_QLineEdit_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QLineEdit_sizeHint_;
  CrystalProc<QSize &> bg_QLineEdit_minimumSizeHint_;
  CrystalProc<void, QMouseEvent *> bg_QLineEdit_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QLineEdit_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QLineEdit_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QLineEdit_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QLineEdit_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QLineEdit_paintEvent_QPaintEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QLineEdit_dropEvent_QDropEvent_X;
  CrystalProc<void, QEvent *> bg_QLineEdit_changeEvent_QEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, QEvent *> bg_QLineEdit_event_QEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_LineEdit : public QLineEdit {
  using QLineEdit::QLineEdit;
  BgJumptable_LineEdit bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_metaObject_.isValid()) {
      return _self_->bgJump.bg_QLineEdit_metaObject_();
    } else {
      return QLineEdit::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QLineEdit_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QLineEdit::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QLineEdit::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QLineEdit_sizeHint_();
    } else {
      return QLineEdit::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QLineEdit_minimumSizeHint_();
    } else {
      return QLineEdit::minimumSizeHint();
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::paintEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * e) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(e);
    } else {
      QLineEdit::dragMoveEvent(e);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * e) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(e);
    } else {
      QLineEdit::dragLeaveEvent(e);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::dropEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::changeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QLineEdit::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QLineEdit_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QLineEdit_event_QEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::event(unnamed_arg_0);
    }
  }
  
  int devType() const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QLineEdit::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QLineEdit::setVisible(visible);
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QLineEdit::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QLineEdit::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QLineEdit::paintEngine();
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::leaveEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::moveEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::resizeEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::closeEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::actionEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QLineEdit::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QLineEdit::nativeEvent(eventType, message, result);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QLineEdit::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QLineEdit::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QLineEdit::sharedPainter();
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_LineEdit *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QLineEdit::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QLineEdit_metaObject_(QLineEdit * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QLineEdit_qt_metacast_const_char_X(QLineEdit * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX(QLineEdit * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QLineEdit_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QLineEdit::tr(s));
}

extern "C" CrystalString bg_QLineEdit_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QLineEdit::tr(s, c));
}

extern "C" CrystalString bg_QLineEdit_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QLineEdit::tr(s, c, n));
}

extern "C" CrystalString bg_QLineEdit_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QLineEdit::trUtf8(s));
}

extern "C" CrystalString bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QLineEdit::trUtf8(s, c));
}

extern "C" CrystalString bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QLineEdit::trUtf8(s, c, n));
}

extern "C" QLineEdit * bg_QLineEdit__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_LineEdit(parent);
}

extern "C" QLineEdit * bg_QLineEdit__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString unnamed_arg_0, QWidget * parent) {
  return new (UseGC) BgInherit_LineEdit(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size), parent);
}

extern "C" CrystalString bg_QLineEdit_text_(QLineEdit * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" CrystalString bg_QLineEdit_displayText_(QLineEdit * _self_) {
  return qstring_to_crystal(_self_->displayText());
}

extern "C" CrystalString bg_QLineEdit_placeholderText_(QLineEdit * _self_) {
  return qstring_to_crystal(_self_->placeholderText());
}

extern "C" void bg_QLineEdit_setPlaceholderText_const_QString_R(QLineEdit * _self_, const CrystalString unnamed_arg_0) {
  _self_->setPlaceholderText(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" int bg_QLineEdit_maxLength_(QLineEdit * _self_) {
  return _self_->maxLength();
}

extern "C" void bg_QLineEdit_setMaxLength_int(QLineEdit * _self_, int unnamed_arg_0) {
  _self_->setMaxLength(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_setFrame_bool(QLineEdit * _self_, bool unnamed_arg_0) {
  _self_->setFrame(unnamed_arg_0);
}

extern "C" bool bg_QLineEdit_hasFrame_(QLineEdit * _self_) {
  return _self_->hasFrame();
}

extern "C" void bg_QLineEdit_setClearButtonEnabled_bool(QLineEdit * _self_, bool enable) {
  _self_->setClearButtonEnabled(enable);
}

extern "C" bool bg_QLineEdit_isClearButtonEnabled_(QLineEdit * _self_) {
  return _self_->isClearButtonEnabled();
}

extern "C" QLineEdit::EchoMode bg_QLineEdit_echoMode_(QLineEdit * _self_) {
  return _self_->echoMode();
}

extern "C" void bg_QLineEdit_setEchoMode_QLineEdit__EchoMode(QLineEdit * _self_, QLineEdit::EchoMode unnamed_arg_0) {
  _self_->setEchoMode(unnamed_arg_0);
}

extern "C" bool bg_QLineEdit_isReadOnly_(QLineEdit * _self_) {
  return _self_->isReadOnly();
}

extern "C" void bg_QLineEdit_setReadOnly_bool(QLineEdit * _self_, bool unnamed_arg_0) {
  _self_->setReadOnly(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_setValidator_const_QValidator_X(QLineEdit * _self_, const QValidator * unnamed_arg_0) {
  _self_->setValidator(unnamed_arg_0);
}

extern "C" const QValidator * bg_QLineEdit_validator_(QLineEdit * _self_) {
  return _self_->validator();
}

extern "C" void bg_QLineEdit_setCompleter_QCompleter_X(QLineEdit * _self_, QCompleter * completer) {
  _self_->setCompleter(completer);
}

extern "C" QCompleter * bg_QLineEdit_completer_(QLineEdit * _self_) {
  return _self_->completer();
}

extern "C" QSize * bg_QLineEdit_sizeHint_(QLineEdit * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize * bg_QLineEdit_minimumSizeHint_(QLineEdit * _self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" int bg_QLineEdit_cursorPosition_(QLineEdit * _self_) {
  return _self_->cursorPosition();
}

extern "C" void bg_QLineEdit_setCursorPosition_int(QLineEdit * _self_, int unnamed_arg_0) {
  _self_->setCursorPosition(unnamed_arg_0);
}

extern "C" int bg_QLineEdit_cursorPositionAt_const_QPoint_R(QLineEdit * _self_, const QPoint pos) {
  return _self_->cursorPositionAt(pos);
}

extern "C" void bg_QLineEdit_setAlignment_Qt__Alignment(QLineEdit * _self_, Qt::Alignment flag) {
  _self_->setAlignment(flag);
}

extern "C" Qt::Alignment bg_QLineEdit_alignment_(QLineEdit * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QLineEdit_cursorForward_bool_int(QLineEdit * _self_, bool mark, int steps) {
  _self_->cursorForward(mark, steps);
}

extern "C" void bg_QLineEdit_cursorBackward_bool_int(QLineEdit * _self_, bool mark, int steps) {
  _self_->cursorBackward(mark, steps);
}

extern "C" void bg_QLineEdit_cursorWordForward_bool(QLineEdit * _self_, bool mark) {
  _self_->cursorWordForward(mark);
}

extern "C" void bg_QLineEdit_cursorWordBackward_bool(QLineEdit * _self_, bool mark) {
  _self_->cursorWordBackward(mark);
}

extern "C" void bg_QLineEdit_backspace_(QLineEdit * _self_) {
  _self_->backspace();
}

extern "C" void bg_QLineEdit_del_(QLineEdit * _self_) {
  _self_->del();
}

extern "C" void bg_QLineEdit_home_bool(QLineEdit * _self_, bool mark) {
  _self_->home(mark);
}

extern "C" void bg_QLineEdit_end_bool(QLineEdit * _self_, bool mark) {
  _self_->end(mark);
}

extern "C" bool bg_QLineEdit_isModified_(QLineEdit * _self_) {
  return _self_->isModified();
}

extern "C" void bg_QLineEdit_setModified_bool(QLineEdit * _self_, bool unnamed_arg_0) {
  _self_->setModified(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_setSelection_int_int(QLineEdit * _self_, int unnamed_arg_0, int unnamed_arg_1) {
  _self_->setSelection(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QLineEdit_hasSelectedText_(QLineEdit * _self_) {
  return _self_->hasSelectedText();
}

extern "C" CrystalString bg_QLineEdit_selectedText_(QLineEdit * _self_) {
  return qstring_to_crystal(_self_->selectedText());
}

extern "C" int bg_QLineEdit_selectionStart_(QLineEdit * _self_) {
  return _self_->selectionStart();
}

extern "C" bool bg_QLineEdit_isUndoAvailable_(QLineEdit * _self_) {
  return _self_->isUndoAvailable();
}

extern "C" bool bg_QLineEdit_isRedoAvailable_(QLineEdit * _self_) {
  return _self_->isRedoAvailable();
}

extern "C" void bg_QLineEdit_setDragEnabled_bool(QLineEdit * _self_, bool b) {
  _self_->setDragEnabled(b);
}

extern "C" bool bg_QLineEdit_dragEnabled_(QLineEdit * _self_) {
  return _self_->dragEnabled();
}

extern "C" void bg_QLineEdit_setCursorMoveStyle_Qt__CursorMoveStyle(QLineEdit * _self_, Qt::CursorMoveStyle style) {
  _self_->setCursorMoveStyle(style);
}

extern "C" Qt::CursorMoveStyle bg_QLineEdit_cursorMoveStyle_(QLineEdit * _self_) {
  return _self_->cursorMoveStyle();
}

extern "C" CrystalString bg_QLineEdit_inputMask_(QLineEdit * _self_) {
  return qstring_to_crystal(_self_->inputMask());
}

extern "C" void bg_QLineEdit_setInputMask_const_QString_R(QLineEdit * _self_, const CrystalString inputMask) {
  _self_->setInputMask(QString::fromUtf8(inputMask.ptr, inputMask.size));
}

extern "C" bool bg_QLineEdit_hasAcceptableInput_(QLineEdit * _self_) {
  return _self_->hasAcceptableInput();
}

extern "C" void bg_QLineEdit_setTextMargins_int_int_int_int(QLineEdit * _self_, int left, int top, int right, int bottom) {
  _self_->setTextMargins(left, top, right, bottom);
}

extern "C" void bg_QLineEdit_setTextMargins_const_QMargins_R(QLineEdit * _self_, const QMargins & margins) {
  _self_->setTextMargins(margins);
}

extern "C" void bg_QLineEdit_getTextMargins_int_X_int_X_int_X_int_X(QLineEdit * _self_, int * left, int * top, int * right, int * bottom) {
  _self_->getTextMargins(left, top, right, bottom);
}

extern "C" QMargins * bg_QLineEdit_textMargins_(QLineEdit * _self_) {
  return new (UseGC) QMargins (_self_->textMargins());
}

extern "C" void bg_QLineEdit_addAction_QAction_X_QLineEdit__ActionPosition(QLineEdit * _self_, QAction * action, QLineEdit::ActionPosition position) {
  _self_->addAction(action, position);
}

extern "C" QAction * bg_QLineEdit_addAction_const_QIcon_R_QLineEdit__ActionPosition(QLineEdit * _self_, const QIcon & icon, QLineEdit::ActionPosition position) {
  return _self_->addAction(icon, position);
}

extern "C" void bg_QLineEdit_setText_const_QString_R(QLineEdit * _self_, const CrystalString unnamed_arg_0) {
  _self_->setText(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QLineEdit_clear_(QLineEdit * _self_) {
  _self_->clear();
}

extern "C" void bg_QLineEdit_selectAll_(QLineEdit * _self_) {
  _self_->selectAll();
}

extern "C" void bg_QLineEdit_undo_(QLineEdit * _self_) {
  _self_->undo();
}

extern "C" void bg_QLineEdit_redo_(QLineEdit * _self_) {
  _self_->redo();
}

extern "C" void bg_QLineEdit_cut_(QLineEdit * _self_) {
  _self_->cut();
}

extern "C" void bg_QLineEdit_copy_(QLineEdit * _self_) {
  _self_->copy();
}

extern "C" void bg_QLineEdit_paste_(QLineEdit * _self_) {
  _self_->paste();
}

extern "C" void bg_QLineEdit_deselect_(QLineEdit * _self_) {
  _self_->deselect();
}

extern "C" void bg_QLineEdit_insert_const_QString_R(QLineEdit * _self_, const CrystalString unnamed_arg_0) {
  _self_->insert(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" QMenu * bg_QLineEdit_createStandardContextMenu_(QLineEdit * _self_) {
  return _self_->createStandardContextMenu();
}

extern "C" void bg_QLineEdit_textChanged_const_QString_R(QLineEdit * _self_, const CrystalString unnamed_arg_0) {
  _self_->textChanged(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QLineEdit_textEdited_const_QString_R(QLineEdit * _self_, const CrystalString unnamed_arg_0) {
  _self_->textEdited(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QLineEdit_cursorPositionChanged_int_int(QLineEdit * _self_, int unnamed_arg_0, int unnamed_arg_1) {
  _self_->cursorPositionChanged(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QLineEdit_returnPressed_(QLineEdit * _self_) {
  _self_->returnPressed();
}

extern "C" void bg_QLineEdit_editingFinished_(QLineEdit * _self_) {
  _self_->editingFinished();
}

extern "C" void bg_QLineEdit_selectionChanged_(QLineEdit * _self_) {
  _self_->selectionChanged();
}

extern "C" void bg_QLineEdit_mousePressEvent_QMouseEvent_X(QLineEdit * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(QLineEdit * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(QLineEdit * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(QLineEdit * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseDoubleClickEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_keyPressEvent_QKeyEvent_X(QLineEdit * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_focusInEvent_QFocusEvent_X(QLineEdit * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusInEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_focusOutEvent_QFocusEvent_X(QLineEdit * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusOutEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_paintEvent_QPaintEvent_X(QLineEdit * _self_, QPaintEvent * unnamed_arg_0) {
  _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(QLineEdit * _self_, QDragEnterEvent * unnamed_arg_0) {
  _self_->dragEnterEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(QLineEdit * _self_, QDragMoveEvent * e) {
  _self_->dragMoveEvent(e);
}

extern "C" void bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(QLineEdit * _self_, QDragLeaveEvent * e) {
  _self_->dragLeaveEvent(e);
}

extern "C" void bg_QLineEdit_dropEvent_QDropEvent_X(QLineEdit * _self_, QDropEvent * unnamed_arg_0) {
  _self_->dropEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_changeEvent_QEvent_X(QLineEdit * _self_, QEvent * unnamed_arg_0) {
  _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(QLineEdit * _self_, QContextMenuEvent * unnamed_arg_0) {
  _self_->contextMenuEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(QLineEdit * _self_, QInputMethodEvent * unnamed_arg_0) {
  _self_->inputMethodEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_initStyleOption_QStyleOptionFrame_X(QLineEdit * _self_, QStyleOptionFrame * option) {
  _self_->initStyleOption(option);
}

extern "C" CrystalVariant bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery(QLineEdit * _self_, Qt::InputMethodQuery unnamed_arg_0) {
  return qvariant_to_crystal(_self_->inputMethodQuery(unnamed_arg_0));
}

extern "C" bool bg_QLineEdit_event_QEvent_X(QLineEdit * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" QRect * bg_QLineEdit_cursorRect_(QLineEdit * _self_) {
  return new (UseGC) QRect (_self_->cursorRect());
}

extern "C" QMetaObject::Connection * bg_QLineEdit_CONNECT_textChanged_CrystalProc_void_const_QString_R(QLineEdit * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)(const QString &))&QLineEdit::textChanged, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" QMetaObject::Connection * bg_QLineEdit_CONNECT_textEdited_CrystalProc_void_const_QString_R(QLineEdit * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)(const QString &))&QLineEdit::textEdited, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" QMetaObject::Connection * bg_QLineEdit_CONNECT_cursorPositionChanged_CrystalProc_void_int_int(QLineEdit * _self_, CrystalProc<void, int, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)(int, int))&QLineEdit::cursorPositionChanged, [_proc_](int unnamed_arg_0, int unnamed_arg_1){ _proc_(unnamed_arg_0, unnamed_arg_1); }));
}

extern "C" QMetaObject::Connection * bg_QLineEdit_CONNECT_returnPressed_CrystalProc_void(QLineEdit * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)())&QLineEdit::returnPressed, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QLineEdit_CONNECT_editingFinished_CrystalProc_void(QLineEdit * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)())&QLineEdit::editingFinished, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QLineEdit_CONNECT_selectionChanged_CrystalProc_void(QLineEdit * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)())&QLineEdit::selectionChanged, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_LineEdit_JUMPTABLE_BgJumptable_LineEdit_R(BgInherit_LineEdit * _self_, const BgJumptable_LineEdit & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_TextEdit {
  CrystalProc<const QMetaObject *> bg_QTextEdit_metaObject_;
  CrystalProc<void *, const char *> bg_QTextEdit_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<CrystalVariant, int, const QUrl *> bg_QTextEdit_loadResource_int_const_QUrl_R;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, QEvent *> bg_QTextEdit_event_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QTextEdit_timerEvent_QTimerEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QTextEdit_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QTextEdit_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QTextEdit_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QTextEdit_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QTextEdit_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QTextEdit_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<bool, bool> bg_QTextEdit_focusNextPrevChild_bool;
  CrystalProc<void, QContextMenuEvent *> bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QTextEdit_dropEvent_QDropEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QTextEdit_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QTextEdit_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QShowEvent *> bg_QTextEdit_showEvent_QShowEvent_X;
  CrystalProc<void, QEvent *> bg_QTextEdit_changeEvent_QEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QTextEdit_wheelEvent_QWheelEvent_X;
  CrystalProc<QMimeData *> bg_QTextEdit_createMimeDataFromSelection_;
  CrystalProc<bool, const QMimeData *> bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X;
  CrystalProc<void, const QMimeData *> bg_QTextEdit_insertFromMimeData_const_QMimeData_X;
  CrystalProc<void, QInputMethodEvent *> bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<void, int, int> bg_QTextEdit_scrollContentsBy_int_int;
  CrystalProc<void, const QTextCursor *> bg_QTextEdit_doSetTextCursor_const_QTextCursor_R;
  CrystalProc<QSize &> bg_QAbstractScrollArea_minimumSizeHint_;
  CrystalProc<QSize &> bg_QAbstractScrollArea_sizeHint_;
  CrystalProc<void, QWidget *> bg_QAbstractScrollArea_setupViewport_QWidget_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QAbstractScrollArea_viewportEvent_QEvent_X;
  CrystalProc<QSize &> bg_QAbstractScrollArea_viewportSizeHint_;
};
struct BgInherit_TextEdit : public QTextEdit {
  using QTextEdit::QTextEdit;
  BgJumptable_TextEdit bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_metaObject_.isValid()) {
      return _self_->bgJump.bg_QTextEdit_metaObject_();
    } else {
      return QTextEdit::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QTextEdit_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QTextEdit::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QTextEdit::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QVariant loadResource(int type, const QUrl & name) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_loadResource_int_const_QUrl_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QTextEdit_loadResource_int_const_QUrl_R(type, &(name)));
    } else {
      return QTextEdit::loadResource(type, name);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery property) const override {
    const BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery(property));
    } else {
      return QTextEdit::inputMethodQuery(property);
    }
  }
  
  bool event(QEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QTextEdit_event_QEvent_X(e);
    } else {
      return QTextEdit::event(e);
    }
  }
  
  void timerEvent(QTimerEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_timerEvent_QTimerEvent_X(e);
    } else {
      QTextEdit::timerEvent(e);
    }
  }
  
  void keyPressEvent(QKeyEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_keyPressEvent_QKeyEvent_X(e);
    } else {
      QTextEdit::keyPressEvent(e);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      QTextEdit::keyReleaseEvent(e);
    }
  }
  
  void resizeEvent(QResizeEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_resizeEvent_QResizeEvent_X(e);
    } else {
      QTextEdit::resizeEvent(e);
    }
  }
  
  void paintEvent(QPaintEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_paintEvent_QPaintEvent_X(e);
    } else {
      QTextEdit::paintEvent(e);
    }
  }
  
  void mousePressEvent(QMouseEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_mousePressEvent_QMouseEvent_X(e);
    } else {
      QTextEdit::mousePressEvent(e);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(e);
    } else {
      QTextEdit::mouseMoveEvent(e);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      QTextEdit::mouseReleaseEvent(e);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(e);
    } else {
      QTextEdit::mouseDoubleClickEvent(e);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QTextEdit_focusNextPrevChild_bool(next);
    } else {
      return QTextEdit::focusNextPrevChild(next);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(e);
    } else {
      QTextEdit::contextMenuEvent(e);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(e);
    } else {
      QTextEdit::dragEnterEvent(e);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(e);
    } else {
      QTextEdit::dragLeaveEvent(e);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(e);
    } else {
      QTextEdit::dragMoveEvent(e);
    }
  }
  
  void dropEvent(QDropEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_dropEvent_QDropEvent_X(e);
    } else {
      QTextEdit::dropEvent(e);
    }
  }
  
  void focusInEvent(QFocusEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_focusInEvent_QFocusEvent_X(e);
    } else {
      QTextEdit::focusInEvent(e);
    }
  }
  
  void focusOutEvent(QFocusEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_focusOutEvent_QFocusEvent_X(e);
    } else {
      QTextEdit::focusOutEvent(e);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QTextEdit::showEvent(unnamed_arg_0);
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_changeEvent_QEvent_X(e);
    } else {
      QTextEdit::changeEvent(e);
    }
  }
  
  void wheelEvent(QWheelEvent * e) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_wheelEvent_QWheelEvent_X(e);
    } else {
      QTextEdit::wheelEvent(e);
    }
  }
  
  QMimeData * createMimeDataFromSelection() const override {
    const BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_createMimeDataFromSelection_.isValid()) {
      return _self_->bgJump.bg_QTextEdit_createMimeDataFromSelection_();
    } else {
      return QTextEdit::createMimeDataFromSelection();
    }
  }
  
  bool canInsertFromMimeData(const QMimeData * source) const override {
    const BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X.isValid()) {
      return _self_->bgJump.bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(source);
    } else {
      return QTextEdit::canInsertFromMimeData(source);
    }
  }
  
  void insertFromMimeData(const QMimeData * source) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_insertFromMimeData_const_QMimeData_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_insertFromMimeData_const_QMimeData_X(source);
    } else {
      QTextEdit::insertFromMimeData(source);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QTextEdit::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  void scrollContentsBy(int dx, int dy) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_scrollContentsBy_int_int.isValid()) {
      _self_->bgJump.bg_QTextEdit_scrollContentsBy_int_int(dx, dy);
    } else {
      QTextEdit::scrollContentsBy(dx, dy);
    }
  }
  
  void doSetTextCursor(const QTextCursor & cursor) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QTextEdit_doSetTextCursor_const_QTextCursor_R.isValid()) {
      _self_->bgJump.bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(&(cursor));
    } else {
      QTextEdit::doSetTextCursor(cursor);
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_minimumSizeHint_();
    } else {
      return QTextEdit::minimumSizeHint();
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_sizeHint_();
    } else {
      return QTextEdit::sizeHint();
    }
  }
  
  void setupViewport(QWidget * viewport) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_setupViewport_QWidget_X.isValid()) {
      _self_->bgJump.bg_QAbstractScrollArea_setupViewport_QWidget_X(viewport);
    } else {
      QTextEdit::setupViewport(viewport);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QTextEdit::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  bool viewportEvent(QEvent * unnamed_arg_0) override {
    BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_viewportEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_viewportEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QTextEdit::viewportEvent(unnamed_arg_0);
    }
  }
  
  QSize viewportSizeHint() const override {
    const BgInherit_TextEdit *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_viewportSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_viewportSizeHint_();
    } else {
      return QTextEdit::viewportSizeHint();
    }
  }
  
};
extern "C" const QMetaObject * bg_QTextEdit_metaObject_(QTextEdit * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QTextEdit_qt_metacast_const_char_X(QTextEdit * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX(QTextEdit * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QTextEdit_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTextEdit::tr(s));
}

extern "C" CrystalString bg_QTextEdit_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTextEdit::tr(s, c));
}

extern "C" CrystalString bg_QTextEdit_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTextEdit::tr(s, c, n));
}

extern "C" CrystalString bg_QTextEdit_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTextEdit::trUtf8(s));
}

extern "C" CrystalString bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTextEdit::trUtf8(s, c));
}

extern "C" CrystalString bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTextEdit::trUtf8(s, c, n));
}

extern "C" QTextEdit * bg_QTextEdit__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_TextEdit(parent);
}

extern "C" QTextEdit * bg_QTextEdit__CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget * parent) {
  return new (UseGC) BgInherit_TextEdit(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" void bg_QTextEdit_setDocument_QTextDocument_X(QTextEdit * _self_, QTextDocument * document) {
  _self_->setDocument(document);
}

extern "C" QTextDocument * bg_QTextEdit_document_(QTextEdit * _self_) {
  return _self_->document();
}

extern "C" void bg_QTextEdit_setPlaceholderText_const_QString_R(QTextEdit * _self_, const CrystalString placeholderText) {
  _self_->setPlaceholderText(QString::fromUtf8(placeholderText.ptr, placeholderText.size));
}

extern "C" CrystalString bg_QTextEdit_placeholderText_(QTextEdit * _self_) {
  return qstring_to_crystal(_self_->placeholderText());
}

extern "C" void bg_QTextEdit_setTextCursor_const_QTextCursor_R(QTextEdit * _self_, const QTextCursor & cursor) {
  _self_->setTextCursor(cursor);
}

extern "C" QTextCursor * bg_QTextEdit_textCursor_(QTextEdit * _self_) {
  return new (UseGC) QTextCursor (_self_->textCursor());
}

extern "C" bool bg_QTextEdit_isReadOnly_(QTextEdit * _self_) {
  return _self_->isReadOnly();
}

extern "C" void bg_QTextEdit_setReadOnly_bool(QTextEdit * _self_, bool ro) {
  _self_->setReadOnly(ro);
}

extern "C" void bg_QTextEdit_setTextInteractionFlags_Qt__TextInteractionFlags(QTextEdit * _self_, Qt::TextInteractionFlags flags) {
  _self_->setTextInteractionFlags(flags);
}

extern "C" Qt::TextInteractionFlags bg_QTextEdit_textInteractionFlags_(QTextEdit * _self_) {
  return _self_->textInteractionFlags();
}

extern "C" qreal bg_QTextEdit_fontPointSize_(QTextEdit * _self_) {
  return _self_->fontPointSize();
}

extern "C" CrystalString bg_QTextEdit_fontFamily_(QTextEdit * _self_) {
  return qstring_to_crystal(_self_->fontFamily());
}

extern "C" int bg_QTextEdit_fontWeight_(QTextEdit * _self_) {
  return _self_->fontWeight();
}

extern "C" bool bg_QTextEdit_fontUnderline_(QTextEdit * _self_) {
  return _self_->fontUnderline();
}

extern "C" bool bg_QTextEdit_fontItalic_(QTextEdit * _self_) {
  return _self_->fontItalic();
}

extern "C" QColor * bg_QTextEdit_textColor_(QTextEdit * _self_) {
  return new (UseGC) QColor (_self_->textColor());
}

extern "C" QColor * bg_QTextEdit_textBackgroundColor_(QTextEdit * _self_) {
  return new (UseGC) QColor (_self_->textBackgroundColor());
}

extern "C" QFont * bg_QTextEdit_currentFont_(QTextEdit * _self_) {
  return new (UseGC) QFont (_self_->currentFont());
}

extern "C" Qt::Alignment bg_QTextEdit_alignment_(QTextEdit * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QTextEdit_mergeCurrentCharFormat_const_QTextCharFormat_R(QTextEdit * _self_, const QTextCharFormat & modifier) {
  _self_->mergeCurrentCharFormat(modifier);
}

extern "C" void bg_QTextEdit_setCurrentCharFormat_const_QTextCharFormat_R(QTextEdit * _self_, const QTextCharFormat & format) {
  _self_->setCurrentCharFormat(format);
}

extern "C" QTextCharFormat * bg_QTextEdit_currentCharFormat_(QTextEdit * _self_) {
  return new (UseGC) QTextCharFormat (_self_->currentCharFormat());
}

extern "C" QTextEdit::AutoFormatting bg_QTextEdit_autoFormatting_(QTextEdit * _self_) {
  return _self_->autoFormatting();
}

extern "C" void bg_QTextEdit_setAutoFormatting_QTextEdit__AutoFormatting(QTextEdit * _self_, QTextEdit::AutoFormatting features) {
  _self_->setAutoFormatting(features);
}

extern "C" bool bg_QTextEdit_tabChangesFocus_(QTextEdit * _self_) {
  return _self_->tabChangesFocus();
}

extern "C" void bg_QTextEdit_setTabChangesFocus_bool(QTextEdit * _self_, bool b) {
  _self_->setTabChangesFocus(b);
}

extern "C" void bg_QTextEdit_setDocumentTitle_const_QString_R(QTextEdit * _self_, const CrystalString title) {
  _self_->setDocumentTitle(QString::fromUtf8(title.ptr, title.size));
}

extern "C" CrystalString bg_QTextEdit_documentTitle_(QTextEdit * _self_) {
  return qstring_to_crystal(_self_->documentTitle());
}

extern "C" bool bg_QTextEdit_isUndoRedoEnabled_(QTextEdit * _self_) {
  return _self_->isUndoRedoEnabled();
}

extern "C" void bg_QTextEdit_setUndoRedoEnabled_bool(QTextEdit * _self_, bool enable) {
  _self_->setUndoRedoEnabled(enable);
}

extern "C" QTextEdit::LineWrapMode bg_QTextEdit_lineWrapMode_(QTextEdit * _self_) {
  return _self_->lineWrapMode();
}

extern "C" void bg_QTextEdit_setLineWrapMode_QTextEdit__LineWrapMode(QTextEdit * _self_, QTextEdit::LineWrapMode mode) {
  _self_->setLineWrapMode(mode);
}

extern "C" int bg_QTextEdit_lineWrapColumnOrWidth_(QTextEdit * _self_) {
  return _self_->lineWrapColumnOrWidth();
}

extern "C" void bg_QTextEdit_setLineWrapColumnOrWidth_int(QTextEdit * _self_, int w) {
  _self_->setLineWrapColumnOrWidth(w);
}

extern "C" QTextOption::WrapMode bg_QTextEdit_wordWrapMode_(QTextEdit * _self_) {
  return _self_->wordWrapMode();
}

extern "C" void bg_QTextEdit_setWordWrapMode_QTextOption__WrapMode(QTextEdit * _self_, QTextOption::WrapMode policy) {
  _self_->setWordWrapMode(policy);
}

extern "C" bool bg_QTextEdit_find_const_QString_R(QTextEdit * _self_, const CrystalString exp) {
  return _self_->find(QString::fromUtf8(exp.ptr, exp.size));
}

extern "C" bool bg_QTextEdit_find_const_QString_R_QTextDocument__FindFlags(QTextEdit * _self_, const CrystalString exp, QTextDocument::FindFlags options) {
  return _self_->find(QString::fromUtf8(exp.ptr, exp.size), options);
}

extern "C" bool bg_QTextEdit_find_const_QRegExp_R(QTextEdit * _self_, const QRegExp & exp) {
  return _self_->find(exp);
}

extern "C" bool bg_QTextEdit_find_const_QRegExp_R_QTextDocument__FindFlags(QTextEdit * _self_, const QRegExp & exp, QTextDocument::FindFlags options) {
  return _self_->find(exp, options);
}

extern "C" CrystalString bg_QTextEdit_toPlainText_(QTextEdit * _self_) {
  return qstring_to_crystal(_self_->toPlainText());
}

extern "C" CrystalString bg_QTextEdit_toHtml_(QTextEdit * _self_) {
  return qstring_to_crystal(_self_->toHtml());
}

extern "C" void bg_QTextEdit_ensureCursorVisible_(QTextEdit * _self_) {
  _self_->ensureCursorVisible();
}

extern "C" CrystalVariant bg_QTextEdit_loadResource_int_const_QUrl_R(QTextEdit * _self_, int type, const QUrl & name) {
  return qvariant_to_crystal(_self_->loadResource(type, name));
}

extern "C" QMenu * bg_QTextEdit_createStandardContextMenu_(QTextEdit * _self_) {
  return _self_->createStandardContextMenu();
}

extern "C" QMenu * bg_QTextEdit_createStandardContextMenu_const_QPoint_R(QTextEdit * _self_, const QPoint position) {
  return _self_->createStandardContextMenu(position);
}

extern "C" QTextCursor * bg_QTextEdit_cursorForPosition_const_QPoint_R(QTextEdit * _self_, const QPoint pos) {
  return new (UseGC) QTextCursor (_self_->cursorForPosition(pos));
}

extern "C" QRect * bg_QTextEdit_cursorRect_const_QTextCursor_R(QTextEdit * _self_, const QTextCursor & cursor) {
  return new (UseGC) QRect (_self_->cursorRect(cursor));
}

extern "C" QRect * bg_QTextEdit_cursorRect_(QTextEdit * _self_) {
  return new (UseGC) QRect (_self_->cursorRect());
}

extern "C" CrystalString bg_QTextEdit_anchorAt_const_QPoint_R(QTextEdit * _self_, const QPoint pos) {
  return qstring_to_crystal(_self_->anchorAt(pos));
}

extern "C" bool bg_QTextEdit_overwriteMode_(QTextEdit * _self_) {
  return _self_->overwriteMode();
}

extern "C" void bg_QTextEdit_setOverwriteMode_bool(QTextEdit * _self_, bool overwrite) {
  _self_->setOverwriteMode(overwrite);
}

extern "C" int bg_QTextEdit_tabStopWidth_(QTextEdit * _self_) {
  return _self_->tabStopWidth();
}

extern "C" void bg_QTextEdit_setTabStopWidth_int(QTextEdit * _self_, int width) {
  _self_->setTabStopWidth(width);
}

extern "C" int bg_QTextEdit_cursorWidth_(QTextEdit * _self_) {
  return _self_->cursorWidth();
}

extern "C" void bg_QTextEdit_setCursorWidth_int(QTextEdit * _self_, int width) {
  _self_->setCursorWidth(width);
}

extern "C" bool bg_QTextEdit_acceptRichText_(QTextEdit * _self_) {
  return _self_->acceptRichText();
}

extern "C" void bg_QTextEdit_setAcceptRichText_bool(QTextEdit * _self_, bool accept) {
  _self_->setAcceptRichText(accept);
}

extern "C" void bg_QTextEdit_moveCursor_QTextCursor__MoveOperation_QTextCursor__MoveMode(QTextEdit * _self_, QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode) {
  _self_->moveCursor(operation, mode);
}

extern "C" bool bg_QTextEdit_canPaste_(QTextEdit * _self_) {
  return _self_->canPaste();
}

extern "C" void bg_QTextEdit_print_QPagedPaintDevice_X(QTextEdit * _self_, QPagedPaintDevice * printer) {
  _self_->print(printer);
}

extern "C" CrystalVariant bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery(QTextEdit * _self_, Qt::InputMethodQuery property) {
  return qvariant_to_crystal(_self_->inputMethodQuery(property));
}

extern "C" CrystalVariant bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery_QVariant(QTextEdit * _self_, Qt::InputMethodQuery query, CrystalVariant argument) {
  return qvariant_to_crystal(_self_->inputMethodQuery(query, crystal_to_qvariant(argument)));
}

extern "C" void bg_QTextEdit_setFontPointSize_qreal(QTextEdit * _self_, qreal s) {
  _self_->setFontPointSize(s);
}

extern "C" void bg_QTextEdit_setFontFamily_const_QString_R(QTextEdit * _self_, const CrystalString fontFamily) {
  _self_->setFontFamily(QString::fromUtf8(fontFamily.ptr, fontFamily.size));
}

extern "C" void bg_QTextEdit_setFontWeight_int(QTextEdit * _self_, int w) {
  _self_->setFontWeight(w);
}

extern "C" void bg_QTextEdit_setFontUnderline_bool(QTextEdit * _self_, bool b) {
  _self_->setFontUnderline(b);
}

extern "C" void bg_QTextEdit_setFontItalic_bool(QTextEdit * _self_, bool b) {
  _self_->setFontItalic(b);
}

extern "C" void bg_QTextEdit_setTextColor_const_QColor_R(QTextEdit * _self_, const QColor & c) {
  _self_->setTextColor(c);
}

extern "C" void bg_QTextEdit_setTextBackgroundColor_const_QColor_R(QTextEdit * _self_, const QColor & c) {
  _self_->setTextBackgroundColor(c);
}

extern "C" void bg_QTextEdit_setCurrentFont_const_QFont_R(QTextEdit * _self_, const QFont & f) {
  _self_->setCurrentFont(f);
}

extern "C" void bg_QTextEdit_setAlignment_Qt__Alignment(QTextEdit * _self_, Qt::Alignment a) {
  _self_->setAlignment(a);
}

extern "C" void bg_QTextEdit_setPlainText_const_QString_R(QTextEdit * _self_, const CrystalString text) {
  _self_->setPlainText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_setHtml_const_QString_R(QTextEdit * _self_, const CrystalString text) {
  _self_->setHtml(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_setText_const_QString_R(QTextEdit * _self_, const CrystalString text) {
  _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_cut_(QTextEdit * _self_) {
  _self_->cut();
}

extern "C" void bg_QTextEdit_copy_(QTextEdit * _self_) {
  _self_->copy();
}

extern "C" void bg_QTextEdit_paste_(QTextEdit * _self_) {
  _self_->paste();
}

extern "C" void bg_QTextEdit_undo_(QTextEdit * _self_) {
  _self_->undo();
}

extern "C" void bg_QTextEdit_redo_(QTextEdit * _self_) {
  _self_->redo();
}

extern "C" void bg_QTextEdit_clear_(QTextEdit * _self_) {
  _self_->clear();
}

extern "C" void bg_QTextEdit_selectAll_(QTextEdit * _self_) {
  _self_->selectAll();
}

extern "C" void bg_QTextEdit_insertPlainText_const_QString_R(QTextEdit * _self_, const CrystalString text) {
  _self_->insertPlainText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_insertHtml_const_QString_R(QTextEdit * _self_, const CrystalString text) {
  _self_->insertHtml(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_append_const_QString_R(QTextEdit * _self_, const CrystalString text) {
  _self_->append(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_scrollToAnchor_const_QString_R(QTextEdit * _self_, const CrystalString name) {
  _self_->scrollToAnchor(QString::fromUtf8(name.ptr, name.size));
}

extern "C" void bg_QTextEdit_zoomIn_int(QTextEdit * _self_, int range) {
  _self_->zoomIn(range);
}

extern "C" void bg_QTextEdit_zoomOut_int(QTextEdit * _self_, int range) {
  _self_->zoomOut(range);
}

extern "C" void bg_QTextEdit_textChanged_(QTextEdit * _self_) {
  _self_->textChanged();
}

extern "C" void bg_QTextEdit_undoAvailable_bool(QTextEdit * _self_, bool b) {
  _self_->undoAvailable(b);
}

extern "C" void bg_QTextEdit_redoAvailable_bool(QTextEdit * _self_, bool b) {
  _self_->redoAvailable(b);
}

extern "C" void bg_QTextEdit_currentCharFormatChanged_const_QTextCharFormat_R(QTextEdit * _self_, const QTextCharFormat & format) {
  _self_->currentCharFormatChanged(format);
}

extern "C" void bg_QTextEdit_copyAvailable_bool(QTextEdit * _self_, bool b) {
  _self_->copyAvailable(b);
}

extern "C" void bg_QTextEdit_selectionChanged_(QTextEdit * _self_) {
  _self_->selectionChanged();
}

extern "C" void bg_QTextEdit_cursorPositionChanged_(QTextEdit * _self_) {
  _self_->cursorPositionChanged();
}

extern "C" bool bg_QTextEdit_event_QEvent_X(QTextEdit * _self_, QEvent * e) {
  return _self_->event(e);
}

extern "C" void bg_QTextEdit_timerEvent_QTimerEvent_X(QTextEdit * _self_, QTimerEvent * e) {
  _self_->timerEvent(e);
}

extern "C" void bg_QTextEdit_keyPressEvent_QKeyEvent_X(QTextEdit * _self_, QKeyEvent * e) {
  _self_->keyPressEvent(e);
}

extern "C" void bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(QTextEdit * _self_, QKeyEvent * e) {
  _self_->keyReleaseEvent(e);
}

extern "C" void bg_QTextEdit_resizeEvent_QResizeEvent_X(QTextEdit * _self_, QResizeEvent * e) {
  _self_->resizeEvent(e);
}

extern "C" void bg_QTextEdit_paintEvent_QPaintEvent_X(QTextEdit * _self_, QPaintEvent * e) {
  _self_->paintEvent(e);
}

extern "C" void bg_QTextEdit_mousePressEvent_QMouseEvent_X(QTextEdit * _self_, QMouseEvent * e) {
  _self_->mousePressEvent(e);
}

extern "C" void bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(QTextEdit * _self_, QMouseEvent * e) {
  _self_->mouseMoveEvent(e);
}

extern "C" void bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(QTextEdit * _self_, QMouseEvent * e) {
  _self_->mouseReleaseEvent(e);
}

extern "C" void bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(QTextEdit * _self_, QMouseEvent * e) {
  _self_->mouseDoubleClickEvent(e);
}

extern "C" bool bg_QTextEdit_focusNextPrevChild_bool(QTextEdit * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(QTextEdit * _self_, QContextMenuEvent * e) {
  _self_->contextMenuEvent(e);
}

extern "C" void bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(QTextEdit * _self_, QDragEnterEvent * e) {
  _self_->dragEnterEvent(e);
}

extern "C" void bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(QTextEdit * _self_, QDragLeaveEvent * e) {
  _self_->dragLeaveEvent(e);
}

extern "C" void bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(QTextEdit * _self_, QDragMoveEvent * e) {
  _self_->dragMoveEvent(e);
}

extern "C" void bg_QTextEdit_dropEvent_QDropEvent_X(QTextEdit * _self_, QDropEvent * e) {
  _self_->dropEvent(e);
}

extern "C" void bg_QTextEdit_focusInEvent_QFocusEvent_X(QTextEdit * _self_, QFocusEvent * e) {
  _self_->focusInEvent(e);
}

extern "C" void bg_QTextEdit_focusOutEvent_QFocusEvent_X(QTextEdit * _self_, QFocusEvent * e) {
  _self_->focusOutEvent(e);
}

extern "C" void bg_QTextEdit_showEvent_QShowEvent_X(QTextEdit * _self_, QShowEvent * unnamed_arg_0) {
  _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QTextEdit_changeEvent_QEvent_X(QTextEdit * _self_, QEvent * e) {
  _self_->changeEvent(e);
}

extern "C" void bg_QTextEdit_wheelEvent_QWheelEvent_X(QTextEdit * _self_, QWheelEvent * e) {
  _self_->wheelEvent(e);
}

extern "C" QMimeData * bg_QTextEdit_createMimeDataFromSelection_(QTextEdit * _self_) {
  return _self_->createMimeDataFromSelection();
}

extern "C" bool bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(QTextEdit * _self_, const QMimeData * source) {
  return _self_->canInsertFromMimeData(source);
}

extern "C" void bg_QTextEdit_insertFromMimeData_const_QMimeData_X(QTextEdit * _self_, const QMimeData * source) {
  _self_->insertFromMimeData(source);
}

extern "C" void bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(QTextEdit * _self_, QInputMethodEvent * unnamed_arg_0) {
  _self_->inputMethodEvent(unnamed_arg_0);
}

extern "C" QTextEdit * bg_QTextEdit__CONSTRUCT_QTextEditPrivate_R_QWidget_X(QTextEditPrivate & dd, QWidget * parent) {
  return new (UseGC) BgInherit_TextEdit(dd, parent);
}

extern "C" void bg_QTextEdit_scrollContentsBy_int_int(QTextEdit * _self_, int dx, int dy) {
  _self_->scrollContentsBy(dx, dy);
}

extern "C" void bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(QTextEdit * _self_, const QTextCursor & cursor) {
  _self_->doSetTextCursor(cursor);
}

extern "C" void bg_QTextEdit_zoomInF_float(QTextEdit * _self_, float range) {
  _self_->zoomInF(range);
}

extern "C" QMetaObject::Connection * bg_QTextEdit_CONNECT_textChanged_CrystalProc_void(QTextEdit * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)())&QTextEdit::textChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QTextEdit_CONNECT_undoAvailable_CrystalProc_void_bool(QTextEdit * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)(bool))&QTextEdit::undoAvailable, [_proc_](bool b){ _proc_(b); }));
}

extern "C" QMetaObject::Connection * bg_QTextEdit_CONNECT_redoAvailable_CrystalProc_void_bool(QTextEdit * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)(bool))&QTextEdit::redoAvailable, [_proc_](bool b){ _proc_(b); }));
}

extern "C" QMetaObject::Connection * bg_QTextEdit_CONNECT_currentCharFormatChanged_CrystalProc_void_const_QTextCharFormat_R(QTextEdit * _self_, CrystalProc<void, const QTextCharFormat *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)(const QTextCharFormat &))&QTextEdit::currentCharFormatChanged, [_proc_](const QTextCharFormat & format){ _proc_(&(format)); }));
}

extern "C" QMetaObject::Connection * bg_QTextEdit_CONNECT_copyAvailable_CrystalProc_void_bool(QTextEdit * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)(bool))&QTextEdit::copyAvailable, [_proc_](bool b){ _proc_(b); }));
}

extern "C" QMetaObject::Connection * bg_QTextEdit_CONNECT_selectionChanged_CrystalProc_void(QTextEdit * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)())&QTextEdit::selectionChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QTextEdit_CONNECT_cursorPositionChanged_CrystalProc_void(QTextEdit * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)())&QTextEdit::cursorPositionChanged, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_TextEdit_JUMPTABLE_BgJumptable_TextEdit_R(BgInherit_TextEdit * _self_, const BgJumptable_TextEdit & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_FileDialog {
  CrystalProc<const QMetaObject *> bg_QFileDialog_metaObject_;
  CrystalProc<void *, const char *> bg_QFileDialog_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, bool> bg_QFileDialog_setVisible_bool;
  CrystalProc<void, int> bg_QFileDialog_done_int;
  CrystalProc<void> bg_QFileDialog_accept_;
  CrystalProc<void, QEvent *> bg_QFileDialog_changeEvent_QEvent_X;
  CrystalProc<QSize &> bg_QDialog_sizeHint_;
  CrystalProc<QSize &> bg_QDialog_minimumSizeHint_;
  CrystalProc<void> bg_QDialog_open_;
  CrystalProc<int> bg_QDialog_exec_;
  CrystalProc<void> bg_QDialog_reject_;
  CrystalProc<void, QKeyEvent *> bg_QDialog_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QDialog_closeEvent_QCloseEvent_X;
  CrystalProc<void, QShowEvent *> bg_QDialog_showEvent_QShowEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QDialog_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QDialog_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QDialog_eventFilter_QObject_X_QEvent_X;
};
struct BgInherit_FileDialog : public QFileDialog {
  using QFileDialog::QFileDialog;
  BgJumptable_FileDialog bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QFileDialog_metaObject_.isValid()) {
      return _self_->bgJump.bg_QFileDialog_metaObject_();
    } else {
      return QFileDialog::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QFileDialog_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QFileDialog_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QFileDialog::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QFileDialog::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QFileDialog_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QFileDialog_setVisible_bool(visible);
    } else {
      QFileDialog::setVisible(visible);
    }
  }
  
  void done(int result) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QFileDialog_done_int.isValid()) {
      _self_->bgJump.bg_QFileDialog_done_int(result);
    } else {
      QFileDialog::done(result);
    }
  }
  
  void accept() override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QFileDialog_accept_.isValid()) {
      _self_->bgJump.bg_QFileDialog_accept_();
    } else {
      QFileDialog::accept();
    }
  }
  
  void changeEvent(QEvent * e) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QFileDialog_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QFileDialog_changeEvent_QEvent_X(e);
    } else {
      QFileDialog::changeEvent(e);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QDialog_sizeHint_();
    } else {
      return QFileDialog::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QDialog_minimumSizeHint_();
    } else {
      return QFileDialog::minimumSizeHint();
    }
  }
  
  void open() override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_open_.isValid()) {
      _self_->bgJump.bg_QDialog_open_();
    } else {
      QFileDialog::open();
    }
  }
  
  int exec() override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_exec_.isValid()) {
      return _self_->bgJump.bg_QDialog_exec_();
    } else {
      return QFileDialog::exec();
    }
  }
  
  void reject() override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_reject_.isValid()) {
      _self_->bgJump.bg_QDialog_reject_();
    } else {
      QFileDialog::reject();
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QFileDialog::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QFileDialog::closeEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QFileDialog::showEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QFileDialog::resizeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QDialog_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QFileDialog::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_FileDialog *_self_ = this;
    if (_self_->bgJump.bg_QDialog_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QDialog_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QFileDialog::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
};
extern "C" const QMetaObject * bg_QFileDialog_metaObject_(QFileDialog * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QFileDialog_qt_metacast_const_char_X(QFileDialog * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX(QFileDialog * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QFileDialog_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QFileDialog::tr(s));
}

extern "C" CrystalString bg_QFileDialog_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QFileDialog::tr(s, c));
}

extern "C" CrystalString bg_QFileDialog_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QFileDialog::tr(s, c, n));
}

extern "C" CrystalString bg_QFileDialog_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QFileDialog::trUtf8(s));
}

extern "C" CrystalString bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QFileDialog::trUtf8(s, c));
}

extern "C" CrystalString bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QFileDialog::trUtf8(s, c, n));
}

extern "C" QFileDialog * bg_QFileDialog__CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget * parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_FileDialog(parent, f);
}

extern "C" QFileDialog * bg_QFileDialog__CONSTRUCT_QWidget_X_const_QString_R_const_QString_R_const_QString_R(QWidget * parent, const CrystalString caption, const CrystalString directory, const CrystalString filter) {
  return new (UseGC) BgInherit_FileDialog(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(directory.ptr, directory.size), QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" void bg_QFileDialog_setDirectory_const_QString_R(QFileDialog * _self_, const CrystalString directory) {
  _self_->setDirectory(QString::fromUtf8(directory.ptr, directory.size));
}

extern "C" void bg_QFileDialog_setDirectory_const_QDir_R(QFileDialog * _self_, const QDir & directory) {
  _self_->setDirectory(directory);
}

extern "C" QDir * bg_QFileDialog_directory_(QFileDialog * _self_) {
  return new (UseGC) QDir (_self_->directory());
}

extern "C" void bg_QFileDialog_setDirectoryUrl_const_QUrl_R(QFileDialog * _self_, const QUrl & directory) {
  _self_->setDirectoryUrl(directory);
}

extern "C" QUrl * bg_QFileDialog_directoryUrl_(QFileDialog * _self_) {
  return new (UseGC) QUrl (_self_->directoryUrl());
}

extern "C" void bg_QFileDialog_selectFile_const_QString_R(QFileDialog * _self_, const CrystalString filename) {
  _self_->selectFile(QString::fromUtf8(filename.ptr, filename.size));
}

extern "C" QStringList * bg_QFileDialog_selectedFiles_(QFileDialog * _self_) {
  return new (UseGC) QStringList (_self_->selectedFiles());
}

extern "C" void bg_QFileDialog_selectUrl_const_QUrl_R(QFileDialog * _self_, const QUrl & url) {
  _self_->selectUrl(url);
}

extern "C" Container_QList_QUrl * bg_QFileDialog_selectedUrls_(QFileDialog * _self_) {
  return new (UseGC) Container_QList_QUrl (_self_->selectedUrls());
}

extern "C" void bg_QFileDialog_setNameFilterDetailsVisible_bool(QFileDialog * _self_, bool enabled) {
  _self_->setNameFilterDetailsVisible(enabled);
}

extern "C" bool bg_QFileDialog_isNameFilterDetailsVisible_(QFileDialog * _self_) {
  return _self_->isNameFilterDetailsVisible();
}

extern "C" void bg_QFileDialog_setNameFilter_const_QString_R(QFileDialog * _self_, const CrystalString filter) {
  _self_->setNameFilter(QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" void bg_QFileDialog_setNameFilters_const_QStringList_R(QFileDialog * _self_, const QStringList & filters) {
  _self_->setNameFilters(filters);
}

extern "C" QStringList * bg_QFileDialog_nameFilters_(QFileDialog * _self_) {
  return new (UseGC) QStringList (_self_->nameFilters());
}

extern "C" void bg_QFileDialog_selectNameFilter_const_QString_R(QFileDialog * _self_, const CrystalString filter) {
  _self_->selectNameFilter(QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" CrystalString bg_QFileDialog_selectedNameFilter_(QFileDialog * _self_) {
  return qstring_to_crystal(_self_->selectedNameFilter());
}

extern "C" void bg_QFileDialog_setMimeTypeFilters_const_QStringList_R(QFileDialog * _self_, const QStringList & filters) {
  _self_->setMimeTypeFilters(filters);
}

extern "C" QStringList * bg_QFileDialog_mimeTypeFilters_(QFileDialog * _self_) {
  return new (UseGC) QStringList (_self_->mimeTypeFilters());
}

extern "C" void bg_QFileDialog_selectMimeTypeFilter_const_QString_R(QFileDialog * _self_, const CrystalString filter) {
  _self_->selectMimeTypeFilter(QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" QDir::Filters bg_QFileDialog_filter_(QFileDialog * _self_) {
  return _self_->filter();
}

extern "C" void bg_QFileDialog_setFilter_QDir__Filters(QFileDialog * _self_, QDir::Filters filters) {
  _self_->setFilter(filters);
}

extern "C" void bg_QFileDialog_setViewMode_QFileDialog__ViewMode(QFileDialog * _self_, QFileDialog::ViewMode mode) {
  _self_->setViewMode(mode);
}

extern "C" QFileDialog::ViewMode bg_QFileDialog_viewMode_(QFileDialog * _self_) {
  return _self_->viewMode();
}

extern "C" void bg_QFileDialog_setFileMode_QFileDialog__FileMode(QFileDialog * _self_, QFileDialog::FileMode mode) {
  _self_->setFileMode(mode);
}

extern "C" QFileDialog::FileMode bg_QFileDialog_fileMode_(QFileDialog * _self_) {
  return _self_->fileMode();
}

extern "C" void bg_QFileDialog_setAcceptMode_QFileDialog__AcceptMode(QFileDialog * _self_, QFileDialog::AcceptMode mode) {
  _self_->setAcceptMode(mode);
}

extern "C" QFileDialog::AcceptMode bg_QFileDialog_acceptMode_(QFileDialog * _self_) {
  return _self_->acceptMode();
}

extern "C" void bg_QFileDialog_setReadOnly_bool(QFileDialog * _self_, bool enabled) {
  _self_->setReadOnly(enabled);
}

extern "C" bool bg_QFileDialog_isReadOnly_(QFileDialog * _self_) {
  return _self_->isReadOnly();
}

extern "C" void bg_QFileDialog_setResolveSymlinks_bool(QFileDialog * _self_, bool enabled) {
  _self_->setResolveSymlinks(enabled);
}

extern "C" bool bg_QFileDialog_resolveSymlinks_(QFileDialog * _self_) {
  return _self_->resolveSymlinks();
}

extern "C" void bg_QFileDialog_setSidebarUrls_const_QList_QUrl__R(QFileDialog * _self_, const Container_QList_QUrl * urls) {
  _self_->setSidebarUrls(*(urls));
}

extern "C" Container_QList_QUrl * bg_QFileDialog_sidebarUrls_(QFileDialog * _self_) {
  return new (UseGC) Container_QList_QUrl (_self_->sidebarUrls());
}

extern "C" QByteArray * bg_QFileDialog_saveState_(QFileDialog * _self_) {
  return new (UseGC) QByteArray (_self_->saveState());
}

extern "C" bool bg_QFileDialog_restoreState_const_QByteArray_R(QFileDialog * _self_, const QByteArray & state) {
  return _self_->restoreState(state);
}

extern "C" void bg_QFileDialog_setConfirmOverwrite_bool(QFileDialog * _self_, bool enabled) {
  _self_->setConfirmOverwrite(enabled);
}

extern "C" bool bg_QFileDialog_confirmOverwrite_(QFileDialog * _self_) {
  return _self_->confirmOverwrite();
}

extern "C" void bg_QFileDialog_setDefaultSuffix_const_QString_R(QFileDialog * _self_, const CrystalString suffix) {
  _self_->setDefaultSuffix(QString::fromUtf8(suffix.ptr, suffix.size));
}

extern "C" CrystalString bg_QFileDialog_defaultSuffix_(QFileDialog * _self_) {
  return qstring_to_crystal(_self_->defaultSuffix());
}

extern "C" void bg_QFileDialog_setHistory_const_QStringList_R(QFileDialog * _self_, const QStringList & paths) {
  _self_->setHistory(paths);
}

extern "C" QStringList * bg_QFileDialog_history_(QFileDialog * _self_) {
  return new (UseGC) QStringList (_self_->history());
}

extern "C" void bg_QFileDialog_setItemDelegate_QAbstractItemDelegate_X(QFileDialog * _self_, QAbstractItemDelegate * delegate) {
  _self_->setItemDelegate(delegate);
}

extern "C" QAbstractItemDelegate * bg_QFileDialog_itemDelegate_(QFileDialog * _self_) {
  return _self_->itemDelegate();
}

extern "C" void bg_QFileDialog_setIconProvider_QFileIconProvider_X(QFileDialog * _self_, QFileIconProvider * provider) {
  _self_->setIconProvider(provider);
}

extern "C" QFileIconProvider * bg_QFileDialog_iconProvider_(QFileDialog * _self_) {
  return _self_->iconProvider();
}

extern "C" void bg_QFileDialog_setLabelText_QFileDialog__DialogLabel_const_QString_R(QFileDialog * _self_, QFileDialog::DialogLabel label, const CrystalString text) {
  _self_->setLabelText(label, QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QFileDialog_labelText_QFileDialog__DialogLabel(QFileDialog * _self_, QFileDialog::DialogLabel label) {
  return qstring_to_crystal(_self_->labelText(label));
}

extern "C" void bg_QFileDialog_setSupportedSchemes_const_QStringList_R(QFileDialog * _self_, const QStringList & schemes) {
  _self_->setSupportedSchemes(schemes);
}

extern "C" QStringList * bg_QFileDialog_supportedSchemes_(QFileDialog * _self_) {
  return new (UseGC) QStringList (_self_->supportedSchemes());
}

extern "C" void bg_QFileDialog_setProxyModel_QAbstractProxyModel_X(QFileDialog * _self_, QAbstractProxyModel * model) {
  _self_->setProxyModel(model);
}

extern "C" QAbstractProxyModel * bg_QFileDialog_proxyModel_(QFileDialog * _self_) {
  return _self_->proxyModel();
}

extern "C" void bg_QFileDialog_setOption_QFileDialog__Option_bool(QFileDialog * _self_, QFileDialog::Option option, bool on) {
  _self_->setOption(option, on);
}

extern "C" bool bg_QFileDialog_testOption_QFileDialog__Option(QFileDialog * _self_, QFileDialog::Option option) {
  return _self_->testOption(option);
}

extern "C" void bg_QFileDialog_setOptions_QFileDialog__Options(QFileDialog * _self_, QFileDialog::Options options) {
  _self_->setOptions(options);
}

extern "C" QFileDialog::Options bg_QFileDialog_options_(QFileDialog * _self_) {
  return _self_->options();
}

extern "C" void bg_QFileDialog_open_QObject_X_const_char_X(QFileDialog * _self_, QObject * receiver, const char * member) {
  _self_->open(receiver, member);
}

extern "C" void bg_QFileDialog_setVisible_bool(QFileDialog * _self_, bool visible) {
  _self_->setVisible(visible);
}

extern "C" void bg_QFileDialog_fileSelected_const_QString_R(QFileDialog * _self_, const CrystalString file) {
  _self_->fileSelected(QString::fromUtf8(file.ptr, file.size));
}

extern "C" void bg_QFileDialog_filesSelected_const_QStringList_R(QFileDialog * _self_, const QStringList & files) {
  _self_->filesSelected(files);
}

extern "C" void bg_QFileDialog_currentChanged_const_QString_R(QFileDialog * _self_, const CrystalString path) {
  _self_->currentChanged(QString::fromUtf8(path.ptr, path.size));
}

extern "C" void bg_QFileDialog_directoryEntered_const_QString_R(QFileDialog * _self_, const CrystalString directory) {
  _self_->directoryEntered(QString::fromUtf8(directory.ptr, directory.size));
}

extern "C" void bg_QFileDialog_urlSelected_const_QUrl_R(QFileDialog * _self_, const QUrl & url) {
  _self_->urlSelected(url);
}

extern "C" void bg_QFileDialog_urlsSelected_const_QList_QUrl__R(QFileDialog * _self_, const Container_QList_QUrl * urls) {
  _self_->urlsSelected(*(urls));
}

extern "C" void bg_QFileDialog_currentUrlChanged_const_QUrl_R(QFileDialog * _self_, const QUrl & url) {
  _self_->currentUrlChanged(url);
}

extern "C" void bg_QFileDialog_directoryUrlEntered_const_QUrl_R(QFileDialog * _self_, const QUrl & directory) {
  _self_->directoryUrlEntered(directory);
}

extern "C" void bg_QFileDialog_filterSelected_const_QString_R(QFileDialog * _self_, const CrystalString filter) {
  _self_->filterSelected(QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" QUrl * bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R(QWidget * parent, const CrystalString caption) {
  return new (UseGC) QUrl (QFileDialog::getOpenFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" QUrl * bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(QWidget * parent, const CrystalString caption, const QUrl & dir) {
  return new (UseGC) QUrl (QFileDialog::getOpenFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir));
}

extern "C" QUrl * bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(QWidget * parent, const CrystalString caption, const QUrl & dir, const CrystalString filter) {
  return new (UseGC) QUrl (QFileDialog::getOpenFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir, QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" QUrl * bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R(QWidget * parent, const CrystalString caption) {
  return new (UseGC) QUrl (QFileDialog::getSaveFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" QUrl * bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(QWidget * parent, const CrystalString caption, const QUrl & dir) {
  return new (UseGC) QUrl (QFileDialog::getSaveFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir));
}

extern "C" QUrl * bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(QWidget * parent, const CrystalString caption, const QUrl & dir, const CrystalString filter) {
  return new (UseGC) QUrl (QFileDialog::getSaveFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir, QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" CrystalString bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R(QWidget * parent, const CrystalString caption, const CrystalString dir) {
  return qstring_to_crystal(QFileDialog::getExistingDirectory(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size)));
}

extern "C" CrystalString bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R_QFileDialog__Options(QWidget * parent, const CrystalString caption, const CrystalString dir, QFileDialog::Options options) {
  return qstring_to_crystal(QFileDialog::getExistingDirectory(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size), options));
}

extern "C" QUrl * bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R(QWidget * parent, const CrystalString caption) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" QUrl * bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(QWidget * parent, const CrystalString caption, const QUrl & dir) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir));
}

extern "C" QUrl * bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options(QWidget * parent, const CrystalString caption, const QUrl & dir, QFileDialog::Options options) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir, options));
}

extern "C" QUrl * bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options_const_QStringList_R(QWidget * parent, const CrystalString caption, const QUrl & dir, QFileDialog::Options options, const QStringList & supportedSchemes) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir, options, supportedSchemes));
}

extern "C" Container_QList_QUrl * bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R(QWidget * parent, const CrystalString caption) {
  return new (UseGC) Container_QList_QUrl (QFileDialog::getOpenFileUrls(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" Container_QList_QUrl * bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R(QWidget * parent, const CrystalString caption, const QUrl & dir) {
  return new (UseGC) Container_QList_QUrl (QFileDialog::getOpenFileUrls(parent, QString::fromUtf8(caption.ptr, caption.size), dir));
}

extern "C" Container_QList_QUrl * bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(QWidget * parent, const CrystalString caption, const QUrl & dir, const CrystalString filter) {
  return new (UseGC) Container_QList_QUrl (QFileDialog::getOpenFileUrls(parent, QString::fromUtf8(caption.ptr, caption.size), dir, QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" QFileDialog * bg_QFileDialog__CONSTRUCT_const_QFileDialogArgs_R(const QFileDialogArgs & args) {
  return new (UseGC) BgInherit_FileDialog(args);
}

extern "C" void bg_QFileDialog_done_int(QFileDialog * _self_, int result) {
  _self_->done(result);
}

extern "C" void bg_QFileDialog_accept_(QFileDialog * _self_) {
  _self_->accept();
}

extern "C" void bg_QFileDialog_changeEvent_QEvent_X(QFileDialog * _self_, QEvent * e) {
  _self_->changeEvent(e);
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_fileSelected_CrystalProc_void_const_QString_R(QFileDialog * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QString &))&QFileDialog::fileSelected, [_proc_](const QString & file){ _proc_(qstring_to_crystal(file)); }));
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_filesSelected_CrystalProc_void_const_QStringList_R(QFileDialog * _self_, CrystalProc<void, const QStringList *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QStringList &))&QFileDialog::filesSelected, [_proc_](const QStringList & files){ _proc_(&(files)); }));
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_currentChanged_CrystalProc_void_const_QString_R(QFileDialog * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QString &))&QFileDialog::currentChanged, [_proc_](const QString & path){ _proc_(qstring_to_crystal(path)); }));
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_directoryEntered_CrystalProc_void_const_QString_R(QFileDialog * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QString &))&QFileDialog::directoryEntered, [_proc_](const QString & directory){ _proc_(qstring_to_crystal(directory)); }));
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_urlSelected_CrystalProc_void_const_QUrl_R(QFileDialog * _self_, CrystalProc<void, const QUrl *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QUrl &))&QFileDialog::urlSelected, [_proc_](const QUrl & url){ _proc_(&(url)); }));
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_urlsSelected_CrystalProc_void_const_QList_QUrl__R(QFileDialog * _self_, CrystalProc<void, const Container_QList_QUrl *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QList<QUrl> &))&QFileDialog::urlsSelected, [_proc_](const QList<QUrl> & urls){ _proc_(new (UseGC) Container_QList_QUrl (urls)); }));
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_currentUrlChanged_CrystalProc_void_const_QUrl_R(QFileDialog * _self_, CrystalProc<void, const QUrl *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QUrl &))&QFileDialog::currentUrlChanged, [_proc_](const QUrl & url){ _proc_(&(url)); }));
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_directoryUrlEntered_CrystalProc_void_const_QUrl_R(QFileDialog * _self_, CrystalProc<void, const QUrl *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QUrl &))&QFileDialog::directoryUrlEntered, [_proc_](const QUrl & directory){ _proc_(&(directory)); }));
}

extern "C" QMetaObject::Connection * bg_QFileDialog_CONNECT_filterSelected_CrystalProc_void_const_QString_R(QFileDialog * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QString &))&QFileDialog::filterSelected, [_proc_](const QString & filter){ _proc_(qstring_to_crystal(filter)); }));
}

extern "C" void bg_BgInherit_FileDialog_JUMPTABLE_BgJumptable_FileDialog_R(BgInherit_FileDialog * _self_, const BgJumptable_FileDialog & table) {
  _self_->bgJump = (table);
}

extern "C" QTextOption * bg_QTextOption__CONSTRUCT_() {
  return new (UseGC) QTextOption();
}

extern "C" QTextOption * bg_QTextOption__CONSTRUCT_Qt__Alignment(Qt::Alignment alignment) {
  return new (UseGC) QTextOption(alignment);
}

extern "C" void bg_QTextOption_setAlignment_Qt__Alignment(QTextOption * _self_, Qt::Alignment alignment) {
  _self_->setAlignment(alignment);
}

extern "C" Qt::Alignment bg_QTextOption_alignment_(QTextOption * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QTextOption_setTextDirection_Qt__LayoutDirection(QTextOption * _self_, Qt::LayoutDirection aDirection) {
  _self_->setTextDirection(aDirection);
}

extern "C" Qt::LayoutDirection bg_QTextOption_textDirection_(QTextOption * _self_) {
  return _self_->textDirection();
}

extern "C" void bg_QTextOption_setWrapMode_QTextOption__WrapMode(QTextOption * _self_, QTextOption::WrapMode wrap) {
  _self_->setWrapMode(wrap);
}

extern "C" QTextOption::WrapMode bg_QTextOption_wrapMode_(QTextOption * _self_) {
  return _self_->wrapMode();
}

extern "C" void bg_QTextOption_setFlags_QTextOption__Flags(QTextOption * _self_, QTextOption::Flags flags) {
  _self_->setFlags(flags);
}

extern "C" QTextOption::Flags bg_QTextOption_flags_(QTextOption * _self_) {
  return _self_->flags();
}

extern "C" void bg_QTextOption_setTabStop_qreal(QTextOption * _self_, qreal tabStop) {
  _self_->setTabStop(tabStop);
}

extern "C" qreal bg_QTextOption_tabStop_(QTextOption * _self_) {
  return _self_->tabStop();
}

extern "C" void bg_QTextOption_setTabArray_const_QList_qreal__R(QTextOption * _self_, const Container_QList_qreal * tabStops) {
  _self_->setTabArray(*(tabStops));
}

extern "C" Container_QList_qreal * bg_QTextOption_tabArray_(QTextOption * _self_) {
  return new (UseGC) Container_QList_qreal (_self_->tabArray());
}

extern "C" void bg_QTextOption_setUseDesignMetrics_bool(QTextOption * _self_, bool b) {
  _self_->setUseDesignMetrics(b);
}

extern "C" bool bg_QTextOption_useDesignMetrics_(QTextOption * _self_) {
  return _self_->useDesignMetrics();
}

struct BgJumptable_TextDocument {
  CrystalProc<const QMetaObject *> bg_QTextDocument_metaObject_;
  CrystalProc<void *, const char *> bg_QTextDocument_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void> bg_QTextDocument_clear_;
  CrystalProc<QTextObject *, const QTextFormat *> bg_QTextDocument_createObject_const_QTextFormat_R;
  CrystalProc<CrystalVariant, int, const QUrl *> bg_QTextDocument_loadResource_int_const_QUrl_R;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_TextDocument : public QTextDocument {
  using QTextDocument::QTextDocument;
  BgJumptable_TextDocument bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QTextDocument_metaObject_.isValid()) {
      return _self_->bgJump.bg_QTextDocument_metaObject_();
    } else {
      return QTextDocument::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QTextDocument_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QTextDocument_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QTextDocument::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QTextDocument::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void clear() override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QTextDocument_clear_.isValid()) {
      _self_->bgJump.bg_QTextDocument_clear_();
    } else {
      QTextDocument::clear();
    }
  }
  
  QTextObject * createObject(const QTextFormat & f) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QTextDocument_createObject_const_QTextFormat_R.isValid()) {
      return _self_->bgJump.bg_QTextDocument_createObject_const_QTextFormat_R(&(f));
    } else {
      return QTextDocument::createObject(f);
    }
  }
  
  QVariant loadResource(int type, const QUrl & name) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QTextDocument_loadResource_int_const_QUrl_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QTextDocument_loadResource_int_const_QUrl_R(type, &(name)));
    } else {
      return QTextDocument::loadResource(type, name);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QTextDocument::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QTextDocument::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QTextDocument::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QTextDocument::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QTextDocument::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QTextDocument::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_TextDocument *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QTextDocument::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QTextDocument_metaObject_(QTextDocument * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QTextDocument_qt_metacast_const_char_X(QTextDocument * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX(QTextDocument * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QTextDocument_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTextDocument::tr(s));
}

extern "C" CrystalString bg_QTextDocument_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTextDocument::tr(s, c));
}

extern "C" CrystalString bg_QTextDocument_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTextDocument::tr(s, c, n));
}

extern "C" CrystalString bg_QTextDocument_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QTextDocument::trUtf8(s));
}

extern "C" CrystalString bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QTextDocument::trUtf8(s, c));
}

extern "C" CrystalString bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QTextDocument::trUtf8(s, c, n));
}

extern "C" QTextDocument * bg_QTextDocument__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_TextDocument(parent);
}

extern "C" QTextDocument * bg_QTextDocument__CONSTRUCT_const_QString_R_QObject_X(const CrystalString text, QObject * parent) {
  return new (UseGC) BgInherit_TextDocument(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QTextDocument * bg_QTextDocument_clone_QObject_X(QTextDocument * _self_, QObject * parent) {
  return _self_->clone(parent);
}

extern "C" bool bg_QTextDocument_isEmpty_(QTextDocument * _self_) {
  return _self_->isEmpty();
}

extern "C" void bg_QTextDocument_clear_(QTextDocument * _self_) {
  _self_->clear();
}

extern "C" void bg_QTextDocument_setUndoRedoEnabled_bool(QTextDocument * _self_, bool enable) {
  _self_->setUndoRedoEnabled(enable);
}

extern "C" bool bg_QTextDocument_isUndoRedoEnabled_(QTextDocument * _self_) {
  return _self_->isUndoRedoEnabled();
}

extern "C" bool bg_QTextDocument_isUndoAvailable_(QTextDocument * _self_) {
  return _self_->isUndoAvailable();
}

extern "C" bool bg_QTextDocument_isRedoAvailable_(QTextDocument * _self_) {
  return _self_->isRedoAvailable();
}

extern "C" int bg_QTextDocument_availableUndoSteps_(QTextDocument * _self_) {
  return _self_->availableUndoSteps();
}

extern "C" int bg_QTextDocument_availableRedoSteps_(QTextDocument * _self_) {
  return _self_->availableRedoSteps();
}

extern "C" int bg_QTextDocument_revision_(QTextDocument * _self_) {
  return _self_->revision();
}

extern "C" void bg_QTextDocument_setDocumentLayout_QAbstractTextDocumentLayout_X(QTextDocument * _self_, QAbstractTextDocumentLayout * layout) {
  _self_->setDocumentLayout(layout);
}

extern "C" QAbstractTextDocumentLayout * bg_QTextDocument_documentLayout_(QTextDocument * _self_) {
  return _self_->documentLayout();
}

extern "C" void bg_QTextDocument_setMetaInformation_QTextDocument__MetaInformation_const_QString_R(QTextDocument * _self_, QTextDocument::MetaInformation info, const CrystalString unnamed_arg_1) {
  _self_->setMetaInformation(info, QString::fromUtf8(unnamed_arg_1.ptr, unnamed_arg_1.size));
}

extern "C" CrystalString bg_QTextDocument_metaInformation_QTextDocument__MetaInformation(QTextDocument * _self_, QTextDocument::MetaInformation info) {
  return qstring_to_crystal(_self_->metaInformation(info));
}

extern "C" CrystalString bg_QTextDocument_toHtml_(QTextDocument * _self_) {
  return qstring_to_crystal(_self_->toHtml());
}

extern "C" CrystalString bg_QTextDocument_toHtml_const_QByteArray_R(QTextDocument * _self_, const QByteArray & encoding) {
  return qstring_to_crystal(_self_->toHtml(encoding));
}

extern "C" void bg_QTextDocument_setHtml_const_QString_R(QTextDocument * _self_, const CrystalString html) {
  _self_->setHtml(QString::fromUtf8(html.ptr, html.size));
}

extern "C" CrystalString bg_QTextDocument_toPlainText_(QTextDocument * _self_) {
  return qstring_to_crystal(_self_->toPlainText());
}

extern "C" void bg_QTextDocument_setPlainText_const_QString_R(QTextDocument * _self_, const CrystalString text) {
  _self_->setPlainText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" int32_t bg_QTextDocument_characterAt_int(QTextDocument * _self_, int pos) {
  return static_cast<int32_t>(_self_->characterAt(pos).unicode());
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QString_R_int(QTextDocument * _self_, const CrystalString subString, int from) {
  return new (UseGC) QTextCursor (_self_->find(QString::fromUtf8(subString.ptr, subString.size), from));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QString_R_int_QTextDocument__FindFlags(QTextDocument * _self_, const CrystalString subString, int from, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(QString::fromUtf8(subString.ptr, subString.size), from, options));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QString_R_const_QTextCursor_R(QTextDocument * _self_, const CrystalString subString, const QTextCursor & cursor) {
  return new (UseGC) QTextCursor (_self_->find(QString::fromUtf8(subString.ptr, subString.size), cursor));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QString_R_const_QTextCursor_R_QTextDocument__FindFlags(QTextDocument * _self_, const CrystalString subString, const QTextCursor & cursor, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(QString::fromUtf8(subString.ptr, subString.size), cursor, options));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QRegExp_R_int(QTextDocument * _self_, const QRegExp & expr, int from) {
  return new (UseGC) QTextCursor (_self_->find(expr, from));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QRegExp_R_int_QTextDocument__FindFlags(QTextDocument * _self_, const QRegExp & expr, int from, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(expr, from, options));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R(QTextDocument * _self_, const QRegExp & expr, const QTextCursor & cursor) {
  return new (UseGC) QTextCursor (_self_->find(expr, cursor));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R_QTextDocument__FindFlags(QTextDocument * _self_, const QRegExp & expr, const QTextCursor & cursor, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(expr, cursor, options));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QRegularExpression_R_int(QTextDocument * _self_, const QRegularExpression & expr, int from) {
  return new (UseGC) QTextCursor (_self_->find(expr, from));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QRegularExpression_R_int_QTextDocument__FindFlags(QTextDocument * _self_, const QRegularExpression & expr, int from, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(expr, from, options));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R(QTextDocument * _self_, const QRegularExpression & expr, const QTextCursor & cursor) {
  return new (UseGC) QTextCursor (_self_->find(expr, cursor));
}

extern "C" QTextCursor * bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R_QTextDocument__FindFlags(QTextDocument * _self_, const QRegularExpression & expr, const QTextCursor & cursor, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(expr, cursor, options));
}

extern "C" QTextFrame * bg_QTextDocument_frameAt_int(QTextDocument * _self_, int pos) {
  return _self_->frameAt(pos);
}

extern "C" QTextFrame * bg_QTextDocument_rootFrame_(QTextDocument * _self_) {
  return _self_->rootFrame();
}

extern "C" QTextObject * bg_QTextDocument_object_int(QTextDocument * _self_, int objectIndex) {
  return _self_->object(objectIndex);
}

extern "C" QTextObject * bg_QTextDocument_objectForFormat_const_QTextFormat_R(QTextDocument * _self_, const QTextFormat & unnamed_arg_0) {
  return _self_->objectForFormat(unnamed_arg_0);
}

extern "C" QTextBlock * bg_QTextDocument_findBlock_int(QTextDocument * _self_, int pos) {
  return new (UseGC) QTextBlock (_self_->findBlock(pos));
}

extern "C" QTextBlock * bg_QTextDocument_findBlockByNumber_int(QTextDocument * _self_, int blockNumber) {
  return new (UseGC) QTextBlock (_self_->findBlockByNumber(blockNumber));
}

extern "C" QTextBlock * bg_QTextDocument_findBlockByLineNumber_int(QTextDocument * _self_, int blockNumber) {
  return new (UseGC) QTextBlock (_self_->findBlockByLineNumber(blockNumber));
}

extern "C" QTextBlock * bg_QTextDocument_begin_(QTextDocument * _self_) {
  return new (UseGC) QTextBlock (_self_->begin());
}

extern "C" QTextBlock * bg_QTextDocument_end_(QTextDocument * _self_) {
  return new (UseGC) QTextBlock (_self_->end());
}

extern "C" QTextBlock * bg_QTextDocument_firstBlock_(QTextDocument * _self_) {
  return new (UseGC) QTextBlock (_self_->firstBlock());
}

extern "C" QTextBlock * bg_QTextDocument_lastBlock_(QTextDocument * _self_) {
  return new (UseGC) QTextBlock (_self_->lastBlock());
}

extern "C" void bg_QTextDocument_setPageSize_const_QSizeF_R(QTextDocument * _self_, const QSizeF & size) {
  _self_->setPageSize(size);
}

extern "C" QSizeF * bg_QTextDocument_pageSize_(QTextDocument * _self_) {
  return new (UseGC) QSizeF (_self_->pageSize());
}

extern "C" void bg_QTextDocument_setDefaultFont_const_QFont_R(QTextDocument * _self_, const QFont & font) {
  _self_->setDefaultFont(font);
}

extern "C" QFont * bg_QTextDocument_defaultFont_(QTextDocument * _self_) {
  return new (UseGC) QFont (_self_->defaultFont());
}

extern "C" int bg_QTextDocument_pageCount_(QTextDocument * _self_) {
  return _self_->pageCount();
}

extern "C" bool bg_QTextDocument_isModified_(QTextDocument * _self_) {
  return _self_->isModified();
}

extern "C" void bg_QTextDocument_print_QPagedPaintDevice_X(QTextDocument * _self_, QPagedPaintDevice * printer) {
  _self_->print(printer);
}

extern "C" CrystalVariant bg_QTextDocument_resource_int_const_QUrl_R(QTextDocument * _self_, int type, const QUrl & name) {
  return qvariant_to_crystal(_self_->resource(type, name));
}

extern "C" void bg_QTextDocument_addResource_int_const_QUrl_R_const_QVariant_R(QTextDocument * _self_, int type, const QUrl & name, const CrystalVariant resource) {
  _self_->addResource(type, name, crystal_to_qvariant(resource));
}

extern "C" Container_QVector_QTextFormat * bg_QTextDocument_allFormats_(QTextDocument * _self_) {
  return new (UseGC) Container_QVector_QTextFormat (_self_->allFormats());
}

extern "C" void bg_QTextDocument_markContentsDirty_int_int(QTextDocument * _self_, int from, int length) {
  _self_->markContentsDirty(from, length);
}

extern "C" void bg_QTextDocument_setUseDesignMetrics_bool(QTextDocument * _self_, bool b) {
  _self_->setUseDesignMetrics(b);
}

extern "C" bool bg_QTextDocument_useDesignMetrics_(QTextDocument * _self_) {
  return _self_->useDesignMetrics();
}

extern "C" void bg_QTextDocument_drawContents_QPainter_X(QTextDocument * _self_, QPainter * painter) {
  _self_->drawContents(painter);
}

extern "C" void bg_QTextDocument_drawContents_QPainter_X_const_QRectF_R(QTextDocument * _self_, QPainter * painter, const QRectF & rect) {
  _self_->drawContents(painter, rect);
}

extern "C" void bg_QTextDocument_setTextWidth_qreal(QTextDocument * _self_, qreal width) {
  _self_->setTextWidth(width);
}

extern "C" qreal bg_QTextDocument_textWidth_(QTextDocument * _self_) {
  return _self_->textWidth();
}

extern "C" qreal bg_QTextDocument_idealWidth_(QTextDocument * _self_) {
  return _self_->idealWidth();
}

extern "C" qreal bg_QTextDocument_indentWidth_(QTextDocument * _self_) {
  return _self_->indentWidth();
}

extern "C" void bg_QTextDocument_setIndentWidth_qreal(QTextDocument * _self_, qreal width) {
  _self_->setIndentWidth(width);
}

extern "C" qreal bg_QTextDocument_documentMargin_(QTextDocument * _self_) {
  return _self_->documentMargin();
}

extern "C" void bg_QTextDocument_setDocumentMargin_qreal(QTextDocument * _self_, qreal margin) {
  _self_->setDocumentMargin(margin);
}

extern "C" void bg_QTextDocument_adjustSize_(QTextDocument * _self_) {
  _self_->adjustSize();
}

extern "C" QSizeF * bg_QTextDocument_size_(QTextDocument * _self_) {
  return new (UseGC) QSizeF (_self_->size());
}

extern "C" int bg_QTextDocument_blockCount_(QTextDocument * _self_) {
  return _self_->blockCount();
}

extern "C" int bg_QTextDocument_lineCount_(QTextDocument * _self_) {
  return _self_->lineCount();
}

extern "C" int bg_QTextDocument_characterCount_(QTextDocument * _self_) {
  return _self_->characterCount();
}

extern "C" void bg_QTextDocument_setDefaultStyleSheet_const_QString_R(QTextDocument * _self_, const CrystalString sheet) {
  _self_->setDefaultStyleSheet(QString::fromUtf8(sheet.ptr, sheet.size));
}

extern "C" CrystalString bg_QTextDocument_defaultStyleSheet_(QTextDocument * _self_) {
  return qstring_to_crystal(_self_->defaultStyleSheet());
}

extern "C" void bg_QTextDocument_undo_QTextCursor_X(QTextDocument * _self_, QTextCursor * cursor) {
  _self_->undo(cursor);
}

extern "C" void bg_QTextDocument_redo_QTextCursor_X(QTextDocument * _self_, QTextCursor * cursor) {
  _self_->redo(cursor);
}

extern "C" void bg_QTextDocument_clearUndoRedoStacks_QTextDocument__Stacks(QTextDocument * _self_, QTextDocument::Stacks historyToClear) {
  _self_->clearUndoRedoStacks(historyToClear);
}

extern "C" int bg_QTextDocument_maximumBlockCount_(QTextDocument * _self_) {
  return _self_->maximumBlockCount();
}

extern "C" void bg_QTextDocument_setMaximumBlockCount_int(QTextDocument * _self_, int maximum) {
  _self_->setMaximumBlockCount(maximum);
}

extern "C" QTextOption * bg_QTextDocument_defaultTextOption_(QTextDocument * _self_) {
  return new (UseGC) QTextOption (_self_->defaultTextOption());
}

extern "C" void bg_QTextDocument_setDefaultTextOption_const_QTextOption_R(QTextDocument * _self_, const QTextOption & option) {
  _self_->setDefaultTextOption(option);
}

extern "C" QUrl * bg_QTextDocument_baseUrl_(QTextDocument * _self_) {
  return new (UseGC) QUrl (_self_->baseUrl());
}

extern "C" void bg_QTextDocument_setBaseUrl_const_QUrl_R(QTextDocument * _self_, const QUrl & url) {
  _self_->setBaseUrl(url);
}

extern "C" Qt::CursorMoveStyle bg_QTextDocument_defaultCursorMoveStyle_(QTextDocument * _self_) {
  return _self_->defaultCursorMoveStyle();
}

extern "C" void bg_QTextDocument_setDefaultCursorMoveStyle_Qt__CursorMoveStyle(QTextDocument * _self_, Qt::CursorMoveStyle style) {
  _self_->setDefaultCursorMoveStyle(style);
}

extern "C" void bg_QTextDocument_contentsChange_int_int_int(QTextDocument * _self_, int from, int charsRemoved, int charsAdded) {
  _self_->contentsChange(from, charsRemoved, charsAdded);
}

extern "C" void bg_QTextDocument_contentsChanged_(QTextDocument * _self_) {
  _self_->contentsChanged();
}

extern "C" void bg_QTextDocument_undoAvailable_bool(QTextDocument * _self_, bool unnamed_arg_0) {
  _self_->undoAvailable(unnamed_arg_0);
}

extern "C" void bg_QTextDocument_redoAvailable_bool(QTextDocument * _self_, bool unnamed_arg_0) {
  _self_->redoAvailable(unnamed_arg_0);
}

extern "C" void bg_QTextDocument_undoCommandAdded_(QTextDocument * _self_) {
  _self_->undoCommandAdded();
}

extern "C" void bg_QTextDocument_modificationChanged_bool(QTextDocument * _self_, bool m) {
  _self_->modificationChanged(m);
}

extern "C" void bg_QTextDocument_cursorPositionChanged_const_QTextCursor_R(QTextDocument * _self_, const QTextCursor & cursor) {
  _self_->cursorPositionChanged(cursor);
}

extern "C" void bg_QTextDocument_blockCountChanged_int(QTextDocument * _self_, int newBlockCount) {
  _self_->blockCountChanged(newBlockCount);
}

extern "C" void bg_QTextDocument_baseUrlChanged_const_QUrl_R(QTextDocument * _self_, const QUrl & url) {
  _self_->baseUrlChanged(url);
}

extern "C" void bg_QTextDocument_documentLayoutChanged_(QTextDocument * _self_) {
  _self_->documentLayoutChanged();
}

extern "C" void bg_QTextDocument_undo_(QTextDocument * _self_) {
  _self_->undo();
}

extern "C" void bg_QTextDocument_redo_(QTextDocument * _self_) {
  _self_->redo();
}

extern "C" void bg_QTextDocument_appendUndoItem_QAbstractUndoItem_X(QTextDocument * _self_, QAbstractUndoItem * unnamed_arg_0) {
  _self_->appendUndoItem(unnamed_arg_0);
}

extern "C" void bg_QTextDocument_setModified_bool(QTextDocument * _self_, bool m) {
  _self_->setModified(m);
}

extern "C" QTextObject * bg_QTextDocument_createObject_const_QTextFormat_R(QTextDocument * _self_, const QTextFormat & f) {
  return _self_->createObject(f);
}

extern "C" CrystalVariant bg_QTextDocument_loadResource_int_const_QUrl_R(QTextDocument * _self_, int type, const QUrl & name) {
  return qvariant_to_crystal(_self_->loadResource(type, name));
}

extern "C" QTextDocument * bg_QTextDocument__CONSTRUCT_QTextDocumentPrivate_R_QObject_X(QTextDocumentPrivate & dd, QObject * parent) {
  return new (UseGC) BgInherit_TextDocument(dd, parent);
}

extern "C" QTextDocumentPrivate * bg_QTextDocument_docHandle_(QTextDocument * _self_) {
  return _self_->docHandle();
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_contentsChange_CrystalProc_void_int_int_int(QTextDocument * _self_, CrystalProc<void, int, int, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(int, int, int))&QTextDocument::contentsChange, [_proc_](int from, int charsRemoved, int charsAdded){ _proc_(from, charsRemoved, charsAdded); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_contentsChanged_CrystalProc_void(QTextDocument * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)())&QTextDocument::contentsChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_undoAvailable_CrystalProc_void_bool(QTextDocument * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(bool))&QTextDocument::undoAvailable, [_proc_](bool unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_redoAvailable_CrystalProc_void_bool(QTextDocument * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(bool))&QTextDocument::redoAvailable, [_proc_](bool unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_undoCommandAdded_CrystalProc_void(QTextDocument * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)())&QTextDocument::undoCommandAdded, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_modificationChanged_CrystalProc_void_bool(QTextDocument * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(bool))&QTextDocument::modificationChanged, [_proc_](bool m){ _proc_(m); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_cursorPositionChanged_CrystalProc_void_const_QTextCursor_R(QTextDocument * _self_, CrystalProc<void, const QTextCursor *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(const QTextCursor &))&QTextDocument::cursorPositionChanged, [_proc_](const QTextCursor & cursor){ _proc_(&(cursor)); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_blockCountChanged_CrystalProc_void_int(QTextDocument * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(int))&QTextDocument::blockCountChanged, [_proc_](int newBlockCount){ _proc_(newBlockCount); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_baseUrlChanged_CrystalProc_void_const_QUrl_R(QTextDocument * _self_, CrystalProc<void, const QUrl *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(const QUrl &))&QTextDocument::baseUrlChanged, [_proc_](const QUrl & url){ _proc_(&(url)); }));
}

extern "C" QMetaObject::Connection * bg_QTextDocument_CONNECT_documentLayoutChanged_CrystalProc_void(QTextDocument * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)())&QTextDocument::documentLayoutChanged, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_TextDocument_JUMPTABLE_BgJumptable_TextDocument_R(BgInherit_TextDocument * _self_, const BgJumptable_TextDocument & table) {
  _self_->bgJump = (table);
}

extern "C" QTextCursor * bg_QTextCursor__CONSTRUCT_() {
  return new (UseGC) QTextCursor();
}

extern "C" QTextCursor * bg_QTextCursor__CONSTRUCT_QTextDocument_X(QTextDocument * document) {
  return new (UseGC) QTextCursor(document);
}

extern "C" QTextCursor * bg_QTextCursor__CONSTRUCT_QTextDocumentPrivate_X_int(QTextDocumentPrivate * p, int pos) {
  return new (UseGC) QTextCursor(p, pos);
}

extern "C" QTextCursor * bg_QTextCursor__CONSTRUCT_QTextCursorPrivate_X(QTextCursorPrivate * d) {
  return new (UseGC) QTextCursor(d);
}

extern "C" QTextCursor * bg_QTextCursor__CONSTRUCT_QTextFrame_X(QTextFrame * frame) {
  return new (UseGC) QTextCursor(frame);
}

extern "C" QTextCursor * bg_QTextCursor__CONSTRUCT_const_QTextBlock_R(const QTextBlock & block) {
  return new (UseGC) QTextCursor(block);
}

extern "C" void bg_QTextCursor_swap_QTextCursor_R(QTextCursor * _self_, QTextCursor & other) {
  _self_->swap(other);
}

extern "C" bool bg_QTextCursor_isNull_(QTextCursor * _self_) {
  return _self_->isNull();
}

extern "C" void bg_QTextCursor_setPosition_int_QTextCursor__MoveMode(QTextCursor * _self_, int pos, QTextCursor::MoveMode mode) {
  _self_->setPosition(pos, mode);
}

extern "C" int bg_QTextCursor_position_(QTextCursor * _self_) {
  return _self_->position();
}

extern "C" int bg_QTextCursor_positionInBlock_(QTextCursor * _self_) {
  return _self_->positionInBlock();
}

extern "C" int bg_QTextCursor_anchor_(QTextCursor * _self_) {
  return _self_->anchor();
}

extern "C" void bg_QTextCursor_insertText_const_QString_R(QTextCursor * _self_, const CrystalString text) {
  _self_->insertText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextCursor_insertText_const_QString_R_const_QTextCharFormat_R(QTextCursor * _self_, const CrystalString text, const QTextCharFormat & format) {
  _self_->insertText(QString::fromUtf8(text.ptr, text.size), format);
}

extern "C" bool bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode_int(QTextCursor * _self_, QTextCursor::MoveOperation op, QTextCursor::MoveMode unnamed_arg_1, int n) {
  return _self_->movePosition(op, unnamed_arg_1, n);
}

extern "C" bool bg_QTextCursor_visualNavigation_(QTextCursor * _self_) {
  return _self_->visualNavigation();
}

extern "C" void bg_QTextCursor_setVisualNavigation_bool(QTextCursor * _self_, bool b) {
  _self_->setVisualNavigation(b);
}

extern "C" void bg_QTextCursor_setVerticalMovementX_int(QTextCursor * _self_, int x) {
  _self_->setVerticalMovementX(x);
}

extern "C" int bg_QTextCursor_verticalMovementX_(QTextCursor * _self_) {
  return _self_->verticalMovementX();
}

extern "C" void bg_QTextCursor_setKeepPositionOnInsert_bool(QTextCursor * _self_, bool b) {
  _self_->setKeepPositionOnInsert(b);
}

extern "C" bool bg_QTextCursor_keepPositionOnInsert_(QTextCursor * _self_) {
  return _self_->keepPositionOnInsert();
}

extern "C" void bg_QTextCursor_deleteChar_(QTextCursor * _self_) {
  _self_->deleteChar();
}

extern "C" void bg_QTextCursor_deletePreviousChar_(QTextCursor * _self_) {
  _self_->deletePreviousChar();
}

extern "C" void bg_QTextCursor_select_QTextCursor__SelectionType(QTextCursor * _self_, QTextCursor::SelectionType selection) {
  _self_->select(selection);
}

extern "C" bool bg_QTextCursor_hasSelection_(QTextCursor * _self_) {
  return _self_->hasSelection();
}

extern "C" bool bg_QTextCursor_hasComplexSelection_(QTextCursor * _self_) {
  return _self_->hasComplexSelection();
}

extern "C" void bg_QTextCursor_removeSelectedText_(QTextCursor * _self_) {
  _self_->removeSelectedText();
}

extern "C" void bg_QTextCursor_clearSelection_(QTextCursor * _self_) {
  _self_->clearSelection();
}

extern "C" int bg_QTextCursor_selectionStart_(QTextCursor * _self_) {
  return _self_->selectionStart();
}

extern "C" int bg_QTextCursor_selectionEnd_(QTextCursor * _self_) {
  return _self_->selectionEnd();
}

extern "C" CrystalString bg_QTextCursor_selectedText_(QTextCursor * _self_) {
  return qstring_to_crystal(_self_->selectedText());
}

extern "C" QTextDocumentFragment * bg_QTextCursor_selection_(QTextCursor * _self_) {
  return new (UseGC) QTextDocumentFragment (_self_->selection());
}

extern "C" void bg_QTextCursor_selectedTableCells_int_X_int_X_int_X_int_X(QTextCursor * _self_, int * firstRow, int * numRows, int * firstColumn, int * numColumns) {
  _self_->selectedTableCells(firstRow, numRows, firstColumn, numColumns);
}

extern "C" QTextBlock * bg_QTextCursor_block_(QTextCursor * _self_) {
  return new (UseGC) QTextBlock (_self_->block());
}

extern "C" QTextCharFormat * bg_QTextCursor_charFormat_(QTextCursor * _self_) {
  return new (UseGC) QTextCharFormat (_self_->charFormat());
}

extern "C" void bg_QTextCursor_setCharFormat_const_QTextCharFormat_R(QTextCursor * _self_, const QTextCharFormat & format) {
  _self_->setCharFormat(format);
}

extern "C" void bg_QTextCursor_mergeCharFormat_const_QTextCharFormat_R(QTextCursor * _self_, const QTextCharFormat & modifier) {
  _self_->mergeCharFormat(modifier);
}

extern "C" QTextBlockFormat * bg_QTextCursor_blockFormat_(QTextCursor * _self_) {
  return new (UseGC) QTextBlockFormat (_self_->blockFormat());
}

extern "C" void bg_QTextCursor_setBlockFormat_const_QTextBlockFormat_R(QTextCursor * _self_, const QTextBlockFormat & format) {
  _self_->setBlockFormat(format);
}

extern "C" void bg_QTextCursor_mergeBlockFormat_const_QTextBlockFormat_R(QTextCursor * _self_, const QTextBlockFormat & modifier) {
  _self_->mergeBlockFormat(modifier);
}

extern "C" QTextCharFormat * bg_QTextCursor_blockCharFormat_(QTextCursor * _self_) {
  return new (UseGC) QTextCharFormat (_self_->blockCharFormat());
}

extern "C" void bg_QTextCursor_setBlockCharFormat_const_QTextCharFormat_R(QTextCursor * _self_, const QTextCharFormat & format) {
  _self_->setBlockCharFormat(format);
}

extern "C" void bg_QTextCursor_mergeBlockCharFormat_const_QTextCharFormat_R(QTextCursor * _self_, const QTextCharFormat & modifier) {
  _self_->mergeBlockCharFormat(modifier);
}

extern "C" bool bg_QTextCursor_atBlockStart_(QTextCursor * _self_) {
  return _self_->atBlockStart();
}

extern "C" bool bg_QTextCursor_atBlockEnd_(QTextCursor * _self_) {
  return _self_->atBlockEnd();
}

extern "C" bool bg_QTextCursor_atStart_(QTextCursor * _self_) {
  return _self_->atStart();
}

extern "C" bool bg_QTextCursor_atEnd_(QTextCursor * _self_) {
  return _self_->atEnd();
}

extern "C" void bg_QTextCursor_insertBlock_(QTextCursor * _self_) {
  _self_->insertBlock();
}

extern "C" void bg_QTextCursor_insertBlock_const_QTextBlockFormat_R(QTextCursor * _self_, const QTextBlockFormat & format) {
  _self_->insertBlock(format);
}

extern "C" void bg_QTextCursor_insertBlock_const_QTextBlockFormat_R_const_QTextCharFormat_R(QTextCursor * _self_, const QTextBlockFormat & format, const QTextCharFormat & charFormat) {
  _self_->insertBlock(format, charFormat);
}

extern "C" QTextList * bg_QTextCursor_insertList_const_QTextListFormat_R(QTextCursor * _self_, const QTextListFormat & format) {
  return _self_->insertList(format);
}

extern "C" QTextList * bg_QTextCursor_insertList_QTextListFormat__Style(QTextCursor * _self_, QTextListFormat::Style style) {
  return _self_->insertList(style);
}

extern "C" QTextList * bg_QTextCursor_createList_const_QTextListFormat_R(QTextCursor * _self_, const QTextListFormat & format) {
  return _self_->createList(format);
}

extern "C" QTextList * bg_QTextCursor_createList_QTextListFormat__Style(QTextCursor * _self_, QTextListFormat::Style style) {
  return _self_->createList(style);
}

extern "C" QTextList * bg_QTextCursor_currentList_(QTextCursor * _self_) {
  return _self_->currentList();
}

extern "C" QTextTable * bg_QTextCursor_insertTable_int_int_const_QTextTableFormat_R(QTextCursor * _self_, int rows, int cols, const QTextTableFormat & format) {
  return _self_->insertTable(rows, cols, format);
}

extern "C" QTextTable * bg_QTextCursor_insertTable_int_int(QTextCursor * _self_, int rows, int cols) {
  return _self_->insertTable(rows, cols);
}

extern "C" QTextTable * bg_QTextCursor_currentTable_(QTextCursor * _self_) {
  return _self_->currentTable();
}

extern "C" QTextFrame * bg_QTextCursor_insertFrame_const_QTextFrameFormat_R(QTextCursor * _self_, const QTextFrameFormat & format) {
  return _self_->insertFrame(format);
}

extern "C" QTextFrame * bg_QTextCursor_currentFrame_(QTextCursor * _self_) {
  return _self_->currentFrame();
}

extern "C" void bg_QTextCursor_insertFragment_const_QTextDocumentFragment_R(QTextCursor * _self_, const QTextDocumentFragment & fragment) {
  _self_->insertFragment(fragment);
}

extern "C" void bg_QTextCursor_insertHtml_const_QString_R(QTextCursor * _self_, const CrystalString html) {
  _self_->insertHtml(QString::fromUtf8(html.ptr, html.size));
}

extern "C" void bg_QTextCursor_insertImage_const_QTextImageFormat_R_QTextFrameFormat__Position(QTextCursor * _self_, const QTextImageFormat & format, QTextFrameFormat::Position alignment) {
  _self_->insertImage(format, alignment);
}

extern "C" void bg_QTextCursor_insertImage_const_QTextImageFormat_R(QTextCursor * _self_, const QTextImageFormat & format) {
  _self_->insertImage(format);
}

extern "C" void bg_QTextCursor_insertImage_const_QString_R(QTextCursor * _self_, const CrystalString name) {
  _self_->insertImage(QString::fromUtf8(name.ptr, name.size));
}

extern "C" void bg_QTextCursor_insertImage_const_QImage_R_const_QString_R(QTextCursor * _self_, const QImage & image, const CrystalString name) {
  _self_->insertImage(image, QString::fromUtf8(name.ptr, name.size));
}

extern "C" void bg_QTextCursor_beginEditBlock_(QTextCursor * _self_) {
  _self_->beginEditBlock();
}

extern "C" void bg_QTextCursor_joinPreviousEditBlock_(QTextCursor * _self_) {
  _self_->joinPreviousEditBlock();
}

extern "C" void bg_QTextCursor_endEditBlock_(QTextCursor * _self_) {
  _self_->endEditBlock();
}

extern "C" bool bg_QTextCursor_isCopyOf_const_QTextCursor_R(QTextCursor * _self_, const QTextCursor & other) {
  return _self_->isCopyOf(other);
}

extern "C" int bg_QTextCursor_blockNumber_(QTextCursor * _self_) {
  return _self_->blockNumber();
}

extern "C" int bg_QTextCursor_columnNumber_(QTextCursor * _self_) {
  return _self_->columnNumber();
}

extern "C" QTextDocument * bg_QTextCursor_document_(QTextCursor * _self_) {
  return _self_->document();
}

extern "C" QDir * bg_QDir__CONSTRUCT_const_QString_R(const CrystalString path) {
  return new (UseGC) QDir(QString::fromUtf8(path.ptr, path.size));
}

extern "C" QDir * bg_QDir__CONSTRUCT_const_QString_R_const_QString_R(const CrystalString path, const CrystalString nameFilter) {
  return new (UseGC) QDir(QString::fromUtf8(path.ptr, path.size), QString::fromUtf8(nameFilter.ptr, nameFilter.size));
}

extern "C" QDir * bg_QDir__CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags(const CrystalString path, const CrystalString nameFilter, QDir::SortFlags sort) {
  return new (UseGC) QDir(QString::fromUtf8(path.ptr, path.size), QString::fromUtf8(nameFilter.ptr, nameFilter.size), sort);
}

extern "C" QDir * bg_QDir__CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags_QDir__Filters(const CrystalString path, const CrystalString nameFilter, QDir::SortFlags sort, QDir::Filters filter) {
  return new (UseGC) QDir(QString::fromUtf8(path.ptr, path.size), QString::fromUtf8(nameFilter.ptr, nameFilter.size), sort, filter);
}

extern "C" void bg_QDir_swap_QDir_R(QDir * _self_, QDir & other) {
  _self_->swap(other);
}

extern "C" void bg_QDir_setPath_const_QString_R(QDir * _self_, const CrystalString path) {
  _self_->setPath(QString::fromUtf8(path.ptr, path.size));
}

extern "C" CrystalString bg_QDir_path_(QDir * _self_) {
  return qstring_to_crystal(_self_->path());
}

extern "C" CrystalString bg_QDir_absolutePath_(QDir * _self_) {
  return qstring_to_crystal(_self_->absolutePath());
}

extern "C" CrystalString bg_QDir_canonicalPath_(QDir * _self_) {
  return qstring_to_crystal(_self_->canonicalPath());
}

extern "C" void bg_QDir_addResourceSearchPath_STATIC_const_QString_R(const CrystalString path) {
  QDir::addResourceSearchPath(QString::fromUtf8(path.ptr, path.size));
}

extern "C" void bg_QDir_setSearchPaths_STATIC_const_QString_R_const_QStringList_R(const CrystalString prefix, const QStringList & searchPaths) {
  QDir::setSearchPaths(QString::fromUtf8(prefix.ptr, prefix.size), searchPaths);
}

extern "C" void bg_QDir_addSearchPath_STATIC_const_QString_R_const_QString_R(const CrystalString prefix, const CrystalString path) {
  QDir::addSearchPath(QString::fromUtf8(prefix.ptr, prefix.size), QString::fromUtf8(path.ptr, path.size));
}

extern "C" QStringList * bg_QDir_searchPaths_STATIC_const_QString_R(const CrystalString prefix) {
  return new (UseGC) QStringList (QDir::searchPaths(QString::fromUtf8(prefix.ptr, prefix.size)));
}

extern "C" CrystalString bg_QDir_dirName_(QDir * _self_) {
  return qstring_to_crystal(_self_->dirName());
}

extern "C" CrystalString bg_QDir_filePath_const_QString_R(QDir * _self_, const CrystalString fileName) {
  return qstring_to_crystal(_self_->filePath(QString::fromUtf8(fileName.ptr, fileName.size)));
}

extern "C" CrystalString bg_QDir_absoluteFilePath_const_QString_R(QDir * _self_, const CrystalString fileName) {
  return qstring_to_crystal(_self_->absoluteFilePath(QString::fromUtf8(fileName.ptr, fileName.size)));
}

extern "C" CrystalString bg_QDir_relativeFilePath_const_QString_R(QDir * _self_, const CrystalString fileName) {
  return qstring_to_crystal(_self_->relativeFilePath(QString::fromUtf8(fileName.ptr, fileName.size)));
}

extern "C" CrystalString bg_QDir_toNativeSeparators_STATIC_const_QString_R(const CrystalString pathName) {
  return qstring_to_crystal(QDir::toNativeSeparators(QString::fromUtf8(pathName.ptr, pathName.size)));
}

extern "C" CrystalString bg_QDir_fromNativeSeparators_STATIC_const_QString_R(const CrystalString pathName) {
  return qstring_to_crystal(QDir::fromNativeSeparators(QString::fromUtf8(pathName.ptr, pathName.size)));
}

extern "C" bool bg_QDir_cd_const_QString_R(QDir * _self_, const CrystalString dirName) {
  return _self_->cd(QString::fromUtf8(dirName.ptr, dirName.size));
}

extern "C" bool bg_QDir_cdUp_(QDir * _self_) {
  return _self_->cdUp();
}

extern "C" QStringList * bg_QDir_nameFilters_(QDir * _self_) {
  return new (UseGC) QStringList (_self_->nameFilters());
}

extern "C" void bg_QDir_setNameFilters_const_QStringList_R(QDir * _self_, const QStringList & nameFilters) {
  _self_->setNameFilters(nameFilters);
}

extern "C" QDir::Filters bg_QDir_filter_(QDir * _self_) {
  return _self_->filter();
}

extern "C" void bg_QDir_setFilter_QDir__Filters(QDir * _self_, QDir::Filters filter) {
  _self_->setFilter(filter);
}

extern "C" QDir::SortFlags bg_QDir_sorting_(QDir * _self_) {
  return _self_->sorting();
}

extern "C" void bg_QDir_setSorting_QDir__SortFlags(QDir * _self_, QDir::SortFlags sort) {
  _self_->setSorting(sort);
}

extern "C" uint bg_QDir_count_(QDir * _self_) {
  return _self_->count();
}

extern "C" QStringList * bg_QDir_nameFiltersFromString_STATIC_const_QString_R(const CrystalString nameFilter) {
  return new (UseGC) QStringList (QDir::nameFiltersFromString(QString::fromUtf8(nameFilter.ptr, nameFilter.size)));
}

extern "C" QStringList * bg_QDir_entryList_(QDir * _self_) {
  return new (UseGC) QStringList (_self_->entryList());
}

extern "C" QStringList * bg_QDir_entryList_QDir__Filters(QDir * _self_, QDir::Filters filters) {
  return new (UseGC) QStringList (_self_->entryList(filters));
}

extern "C" QStringList * bg_QDir_entryList_QDir__Filters_QDir__SortFlags(QDir * _self_, QDir::Filters filters, QDir::SortFlags sort) {
  return new (UseGC) QStringList (_self_->entryList(filters, sort));
}

extern "C" QStringList * bg_QDir_entryList_const_QStringList_R(QDir * _self_, const QStringList & nameFilters) {
  return new (UseGC) QStringList (_self_->entryList(nameFilters));
}

extern "C" QStringList * bg_QDir_entryList_const_QStringList_R_QDir__Filters(QDir * _self_, const QStringList & nameFilters, QDir::Filters filters) {
  return new (UseGC) QStringList (_self_->entryList(nameFilters, filters));
}

extern "C" QStringList * bg_QDir_entryList_const_QStringList_R_QDir__Filters_QDir__SortFlags(QDir * _self_, const QStringList & nameFilters, QDir::Filters filters, QDir::SortFlags sort) {
  return new (UseGC) QStringList (_self_->entryList(nameFilters, filters, sort));
}

extern "C" QFileInfoList * bg_QDir_entryInfoList_(QDir * _self_) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList());
}

extern "C" QFileInfoList * bg_QDir_entryInfoList_QDir__Filters(QDir * _self_, QDir::Filters filters) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(filters));
}

extern "C" QFileInfoList * bg_QDir_entryInfoList_QDir__Filters_QDir__SortFlags(QDir * _self_, QDir::Filters filters, QDir::SortFlags sort) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(filters, sort));
}

extern "C" QFileInfoList * bg_QDir_entryInfoList_const_QStringList_R(QDir * _self_, const QStringList & nameFilters) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(nameFilters));
}

extern "C" QFileInfoList * bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters(QDir * _self_, const QStringList & nameFilters, QDir::Filters filters) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(nameFilters, filters));
}

extern "C" QFileInfoList * bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters_QDir__SortFlags(QDir * _self_, const QStringList & nameFilters, QDir::Filters filters, QDir::SortFlags sort) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(nameFilters, filters, sort));
}

extern "C" bool bg_QDir_mkdir_const_QString_R(QDir * _self_, const CrystalString dirName) {
  return _self_->mkdir(QString::fromUtf8(dirName.ptr, dirName.size));
}

extern "C" bool bg_QDir_rmdir_const_QString_R(QDir * _self_, const CrystalString dirName) {
  return _self_->rmdir(QString::fromUtf8(dirName.ptr, dirName.size));
}

extern "C" bool bg_QDir_mkpath_const_QString_R(QDir * _self_, const CrystalString dirPath) {
  return _self_->mkpath(QString::fromUtf8(dirPath.ptr, dirPath.size));
}

extern "C" bool bg_QDir_rmpath_const_QString_R(QDir * _self_, const CrystalString dirPath) {
  return _self_->rmpath(QString::fromUtf8(dirPath.ptr, dirPath.size));
}

extern "C" bool bg_QDir_removeRecursively_(QDir * _self_) {
  return _self_->removeRecursively();
}

extern "C" bool bg_QDir_isReadable_(QDir * _self_) {
  return _self_->isReadable();
}

extern "C" bool bg_QDir_exists_(QDir * _self_) {
  return _self_->exists();
}

extern "C" bool bg_QDir_isRoot_(QDir * _self_) {
  return _self_->isRoot();
}

extern "C" bool bg_QDir_isRelativePath_STATIC_const_QString_R(const CrystalString path) {
  return QDir::isRelativePath(QString::fromUtf8(path.ptr, path.size));
}

extern "C" bool bg_QDir_isAbsolutePath_STATIC_const_QString_R(const CrystalString path) {
  return QDir::isAbsolutePath(QString::fromUtf8(path.ptr, path.size));
}

extern "C" bool bg_QDir_isRelative_(QDir * _self_) {
  return _self_->isRelative();
}

extern "C" bool bg_QDir_isAbsolute_(QDir * _self_) {
  return _self_->isAbsolute();
}

extern "C" bool bg_QDir_makeAbsolute_(QDir * _self_) {
  return _self_->makeAbsolute();
}

extern "C" bool bg_QDir_remove_const_QString_R(QDir * _self_, const CrystalString fileName) {
  return _self_->remove(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" bool bg_QDir_rename_const_QString_R_const_QString_R(QDir * _self_, const CrystalString oldName, const CrystalString newName) {
  return _self_->rename(QString::fromUtf8(oldName.ptr, oldName.size), QString::fromUtf8(newName.ptr, newName.size));
}

extern "C" bool bg_QDir_exists_const_QString_R(QDir * _self_, const CrystalString name) {
  return _self_->exists(QString::fromUtf8(name.ptr, name.size));
}

extern "C" QFileInfoList * bg_QDir_drives_STATIC_() {
  return new (UseGC) QFileInfoList (QDir::drives());
}

extern "C" int32_t bg_QDir_listSeparator_STATIC_() {
  return static_cast<int32_t>(QDir::listSeparator().unicode());
}

extern "C" int32_t bg_QDir_separator_STATIC_() {
  return static_cast<int32_t>(QDir::separator().unicode());
}

extern "C" bool bg_QDir_setCurrent_STATIC_const_QString_R(const CrystalString path) {
  return QDir::setCurrent(QString::fromUtf8(path.ptr, path.size));
}

extern "C" QDir * bg_QDir_current_STATIC_() {
  return new (UseGC) QDir (QDir::current());
}

extern "C" CrystalString bg_QDir_currentPath_STATIC_() {
  return qstring_to_crystal(QDir::currentPath());
}

extern "C" QDir * bg_QDir_home_STATIC_() {
  return new (UseGC) QDir (QDir::home());
}

extern "C" CrystalString bg_QDir_homePath_STATIC_() {
  return qstring_to_crystal(QDir::homePath());
}

extern "C" QDir * bg_QDir_root_STATIC_() {
  return new (UseGC) QDir (QDir::root());
}

extern "C" CrystalString bg_QDir_rootPath_STATIC_() {
  return qstring_to_crystal(QDir::rootPath());
}

extern "C" QDir * bg_QDir_temp_STATIC_() {
  return new (UseGC) QDir (QDir::temp());
}

extern "C" CrystalString bg_QDir_tempPath_STATIC_() {
  return qstring_to_crystal(QDir::tempPath());
}

extern "C" bool bg_QDir_match_STATIC_const_QStringList_R_const_QString_R(const QStringList & filters, const CrystalString fileName) {
  return QDir::match(filters, QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" bool bg_QDir_match_STATIC_const_QString_R_const_QString_R(const CrystalString filter, const CrystalString fileName) {
  return QDir::match(QString::fromUtf8(filter.ptr, filter.size), QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" CrystalString bg_QDir_cleanPath_STATIC_const_QString_R(const CrystalString path) {
  return qstring_to_crystal(QDir::cleanPath(QString::fromUtf8(path.ptr, path.size)));
}

extern "C" void bg_QDir_refresh_(QDir * _self_) {
  _self_->refresh();
}

extern "C" QDir * bg_QDir__CONSTRUCT_QDirPrivate_R(QDirPrivate & d) {
  return new (UseGC) QDir(d);
}

struct BgJumptable_GraphicsItem {
  CrystalProc<void, int> bg_QGraphicsItem_advance_int;
  CrystalProc<QRectF &> bg_QGraphicsItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsItem_contains_const_QPointF_R;
  CrystalProc<bool, const QGraphicsItem *, Qt::ItemSelectionMode> bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
  CrystalProc<bool, const QPainterPath *, Qt::ItemSelectionMode> bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsItem_opaqueArea_;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<int> bg_QGraphicsItem_type_;
  CrystalProc<bool, QGraphicsItem *, QEvent *> bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QGraphicsItem_sceneEvent_QEvent_X;
  CrystalProc<void, QGraphicsSceneContextMenuEvent *> bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneWheelEvent *> bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<CrystalVariant, QGraphicsItem::GraphicsItemChange, const CrystalVariant> bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsItem_extension_const_QVariant_R;
};
struct BgInherit_GraphicsItem : public QGraphicsItem {
  using QGraphicsItem::QGraphicsItem;
  BgJumptable_GraphicsItem bgJump;
  void advance(int phase) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_advance_int.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_advance_int(phase);
    } else {
      QGraphicsItem::advance(phase);
    }
  }
  
  QRectF boundingRect() const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QGraphicsItem_boundingRect_.isValid())) {
      return _self_->bgJump.bg_QGraphicsItem_boundingRect_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QGraphicsItem::boundingRect");
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_shape_();
    } else {
      return QGraphicsItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsItem::contains(point);
    }
  }
  
  bool collidesWithItem(const QGraphicsItem * other, Qt::ItemSelectionMode mode) const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }
  
  bool collidesWithPath(const QPainterPath & path, Qt::ItemSelectionMode mode) const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(&(path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_opaqueArea_();
    } else {
      return QGraphicsItem::opaqueArea();
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid())) {
      _self_->bgJump.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      bindgen_fatal_panic("No implementation for pure method QGraphicsItem::paint");
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_type_();
    } else {
      return QGraphicsItem::type();
    }
  }
  
  bool sceneEventFilter(QGraphicsItem * watched, QEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }
  
  bool sceneEvent(QEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }
  
  void contextMenuEvent(QGraphicsSceneContextMenuEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      QGraphicsItem::contextMenuEvent(event);
    }
  }
  
  void dragEnterEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsItem::dragEnterEvent(event);
    }
  }
  
  void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsItem::dragLeaveEvent(event);
    }
  }
  
  void dragMoveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsItem::dragMoveEvent(event);
    }
  }
  
  void dropEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsItem::dropEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      QGraphicsItem::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      QGraphicsItem::focusOutEvent(event);
    }
  }
  
  void hoverEnterEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsItem::hoverEnterEvent(event);
    }
  }
  
  void hoverMoveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsItem::hoverMoveEvent(event);
    }
  }
  
  void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsItem::hoverLeaveEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      QGraphicsItem::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QGraphicsItem::keyReleaseEvent(event);
    }
  }
  
  void mousePressEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsItem::mousePressEvent(event);
    }
  }
  
  void mouseMoveEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsItem::mouseMoveEvent(event);
    }
  }
  
  void mouseReleaseEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsItem::mouseReleaseEvent(event);
    }
  }
  
  void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }
  
  void wheelEvent(QGraphicsSceneWheelEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      QGraphicsItem::wheelEvent(event);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * event) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      QGraphicsItem::inputMethodEvent(event);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery query) const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(query));
    } else {
      return QGraphicsItem::inputMethodQuery(query);
    }
  }
  
  QVariant itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant & value) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(change, qvariant_to_crystal(value)));
    } else {
      return QGraphicsItem::itemChange(change, value);
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsItem::extension(variant);
    }
  }
  
};
extern "C" QGraphicsItem * bg_QGraphicsItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsItem(parent);
}

extern "C" QGraphicsScene * bg_QGraphicsItem_scene_(QGraphicsItem * _self_) {
  return _self_->scene();
}

extern "C" QGraphicsItem * bg_QGraphicsItem_parentItem_(QGraphicsItem * _self_) {
  return _self_->parentItem();
}

extern "C" QGraphicsItem * bg_QGraphicsItem_topLevelItem_(QGraphicsItem * _self_) {
  return _self_->topLevelItem();
}

extern "C" QGraphicsObject * bg_QGraphicsItem_parentObject_(QGraphicsItem * _self_) {
  return _self_->parentObject();
}

extern "C" QGraphicsWidget * bg_QGraphicsItem_parentWidget_(QGraphicsItem * _self_) {
  return _self_->parentWidget();
}

extern "C" QGraphicsWidget * bg_QGraphicsItem_topLevelWidget_(QGraphicsItem * _self_) {
  return _self_->topLevelWidget();
}

extern "C" QGraphicsWidget * bg_QGraphicsItem_window_(QGraphicsItem * _self_) {
  return _self_->window();
}

extern "C" QGraphicsItem * bg_QGraphicsItem_panel_(QGraphicsItem * _self_) {
  return _self_->panel();
}

extern "C" void bg_QGraphicsItem_setParentItem_QGraphicsItem_X(QGraphicsItem * _self_, QGraphicsItem * parent) {
  _self_->setParentItem(parent);
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsItem_childItems_(QGraphicsItem * _self_) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->childItems());
}

extern "C" bool bg_QGraphicsItem_isWidget_(QGraphicsItem * _self_) {
  return _self_->isWidget();
}

extern "C" bool bg_QGraphicsItem_isWindow_(QGraphicsItem * _self_) {
  return _self_->isWindow();
}

extern "C" bool bg_QGraphicsItem_isPanel_(QGraphicsItem * _self_) {
  return _self_->isPanel();
}

extern "C" QGraphicsObject * bg_QGraphicsItem_toGraphicsObject_(QGraphicsItem * _self_) {
  return _self_->toGraphicsObject();
}

extern "C" QGraphicsItemGroup * bg_QGraphicsItem_group_(QGraphicsItem * _self_) {
  return _self_->group();
}

extern "C" void bg_QGraphicsItem_setGroup_QGraphicsItemGroup_X(QGraphicsItem * _self_, QGraphicsItemGroup * group) {
  _self_->setGroup(group);
}

extern "C" QGraphicsItem::GraphicsItemFlags bg_QGraphicsItem_flags_(QGraphicsItem * _self_) {
  return _self_->flags();
}

extern "C" void bg_QGraphicsItem_setFlag_QGraphicsItem__GraphicsItemFlag_bool(QGraphicsItem * _self_, QGraphicsItem::GraphicsItemFlag flag, bool enabled) {
  _self_->setFlag(flag, enabled);
}

extern "C" void bg_QGraphicsItem_setFlags_QGraphicsItem__GraphicsItemFlags(QGraphicsItem * _self_, QGraphicsItem::GraphicsItemFlags flags) {
  _self_->setFlags(flags);
}

extern "C" QGraphicsItem::CacheMode bg_QGraphicsItem_cacheMode_(QGraphicsItem * _self_) {
  return _self_->cacheMode();
}

extern "C" void bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode(QGraphicsItem * _self_, QGraphicsItem::CacheMode mode) {
  _self_->setCacheMode(mode);
}

extern "C" void bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode_const_QSize_R(QGraphicsItem * _self_, QGraphicsItem::CacheMode mode, const QSize & cacheSize) {
  _self_->setCacheMode(mode, cacheSize);
}

extern "C" QGraphicsItem::PanelModality bg_QGraphicsItem_panelModality_(QGraphicsItem * _self_) {
  return _self_->panelModality();
}

extern "C" void bg_QGraphicsItem_setPanelModality_QGraphicsItem__PanelModality(QGraphicsItem * _self_, QGraphicsItem::PanelModality panelModality) {
  _self_->setPanelModality(panelModality);
}

extern "C" bool bg_QGraphicsItem_isBlockedByModalPanel_QGraphicsItem_XX(QGraphicsItem * _self_, QGraphicsItem ** blockingPanel) {
  return _self_->isBlockedByModalPanel(blockingPanel);
}

extern "C" CrystalString bg_QGraphicsItem_toolTip_(QGraphicsItem * _self_) {
  return qstring_to_crystal(_self_->toolTip());
}

extern "C" void bg_QGraphicsItem_setToolTip_const_QString_R(QGraphicsItem * _self_, const CrystalString toolTip) {
  _self_->setToolTip(QString::fromUtf8(toolTip.ptr, toolTip.size));
}

extern "C" QCursor * bg_QGraphicsItem_cursor_(QGraphicsItem * _self_) {
  return new (UseGC) QCursor (_self_->cursor());
}

extern "C" void bg_QGraphicsItem_setCursor_const_QCursor_R(QGraphicsItem * _self_, const QCursor & cursor) {
  _self_->setCursor(cursor);
}

extern "C" bool bg_QGraphicsItem_hasCursor_(QGraphicsItem * _self_) {
  return _self_->hasCursor();
}

extern "C" void bg_QGraphicsItem_unsetCursor_(QGraphicsItem * _self_) {
  _self_->unsetCursor();
}

extern "C" bool bg_QGraphicsItem_isVisible_(QGraphicsItem * _self_) {
  return _self_->isVisible();
}

extern "C" bool bg_QGraphicsItem_isVisibleTo_const_QGraphicsItem_X(QGraphicsItem * _self_, const QGraphicsItem * parent) {
  return _self_->isVisibleTo(parent);
}

extern "C" void bg_QGraphicsItem_setVisible_bool(QGraphicsItem * _self_, bool visible) {
  _self_->setVisible(visible);
}

extern "C" void bg_QGraphicsItem_hide_(QGraphicsItem * _self_) {
  _self_->hide();
}

extern "C" void bg_QGraphicsItem_show_(QGraphicsItem * _self_) {
  _self_->show();
}

extern "C" bool bg_QGraphicsItem_isEnabled_(QGraphicsItem * _self_) {
  return _self_->isEnabled();
}

extern "C" void bg_QGraphicsItem_setEnabled_bool(QGraphicsItem * _self_, bool enabled) {
  _self_->setEnabled(enabled);
}

extern "C" bool bg_QGraphicsItem_isSelected_(QGraphicsItem * _self_) {
  return _self_->isSelected();
}

extern "C" void bg_QGraphicsItem_setSelected_bool(QGraphicsItem * _self_, bool selected) {
  _self_->setSelected(selected);
}

extern "C" bool bg_QGraphicsItem_acceptDrops_(QGraphicsItem * _self_) {
  return _self_->acceptDrops();
}

extern "C" void bg_QGraphicsItem_setAcceptDrops_bool(QGraphicsItem * _self_, bool on) {
  _self_->setAcceptDrops(on);
}

extern "C" qreal bg_QGraphicsItem_opacity_(QGraphicsItem * _self_) {
  return _self_->opacity();
}

extern "C" qreal bg_QGraphicsItem_effectiveOpacity_(QGraphicsItem * _self_) {
  return _self_->effectiveOpacity();
}

extern "C" void bg_QGraphicsItem_setOpacity_qreal(QGraphicsItem * _self_, qreal opacity) {
  _self_->setOpacity(opacity);
}

extern "C" QGraphicsEffect * bg_QGraphicsItem_graphicsEffect_(QGraphicsItem * _self_) {
  return _self_->graphicsEffect();
}

extern "C" void bg_QGraphicsItem_setGraphicsEffect_QGraphicsEffect_X(QGraphicsItem * _self_, QGraphicsEffect * effect) {
  _self_->setGraphicsEffect(effect);
}

extern "C" Qt::MouseButtons bg_QGraphicsItem_acceptedMouseButtons_(QGraphicsItem * _self_) {
  return _self_->acceptedMouseButtons();
}

extern "C" void bg_QGraphicsItem_setAcceptedMouseButtons_Qt__MouseButtons(QGraphicsItem * _self_, Qt::MouseButtons buttons) {
  _self_->setAcceptedMouseButtons(buttons);
}

extern "C" bool bg_QGraphicsItem_acceptHoverEvents_(QGraphicsItem * _self_) {
  return _self_->acceptHoverEvents();
}

extern "C" void bg_QGraphicsItem_setAcceptHoverEvents_bool(QGraphicsItem * _self_, bool enabled) {
  _self_->setAcceptHoverEvents(enabled);
}

extern "C" bool bg_QGraphicsItem_acceptTouchEvents_(QGraphicsItem * _self_) {
  return _self_->acceptTouchEvents();
}

extern "C" void bg_QGraphicsItem_setAcceptTouchEvents_bool(QGraphicsItem * _self_, bool enabled) {
  _self_->setAcceptTouchEvents(enabled);
}

extern "C" bool bg_QGraphicsItem_filtersChildEvents_(QGraphicsItem * _self_) {
  return _self_->filtersChildEvents();
}

extern "C" void bg_QGraphicsItem_setFiltersChildEvents_bool(QGraphicsItem * _self_, bool enabled) {
  _self_->setFiltersChildEvents(enabled);
}

extern "C" bool bg_QGraphicsItem_handlesChildEvents_(QGraphicsItem * _self_) {
  return _self_->handlesChildEvents();
}

extern "C" void bg_QGraphicsItem_setHandlesChildEvents_bool(QGraphicsItem * _self_, bool enabled) {
  _self_->setHandlesChildEvents(enabled);
}

extern "C" bool bg_QGraphicsItem_isActive_(QGraphicsItem * _self_) {
  return _self_->isActive();
}

extern "C" void bg_QGraphicsItem_setActive_bool(QGraphicsItem * _self_, bool active) {
  _self_->setActive(active);
}

extern "C" bool bg_QGraphicsItem_hasFocus_(QGraphicsItem * _self_) {
  return _self_->hasFocus();
}

extern "C" void bg_QGraphicsItem_setFocus_Qt__FocusReason(QGraphicsItem * _self_, Qt::FocusReason focusReason) {
  _self_->setFocus(focusReason);
}

extern "C" void bg_QGraphicsItem_clearFocus_(QGraphicsItem * _self_) {
  _self_->clearFocus();
}

extern "C" QGraphicsItem * bg_QGraphicsItem_focusProxy_(QGraphicsItem * _self_) {
  return _self_->focusProxy();
}

extern "C" void bg_QGraphicsItem_setFocusProxy_QGraphicsItem_X(QGraphicsItem * _self_, QGraphicsItem * item) {
  _self_->setFocusProxy(item);
}

extern "C" QGraphicsItem * bg_QGraphicsItem_focusItem_(QGraphicsItem * _self_) {
  return _self_->focusItem();
}

extern "C" QGraphicsItem * bg_QGraphicsItem_focusScopeItem_(QGraphicsItem * _self_) {
  return _self_->focusScopeItem();
}

extern "C" void bg_QGraphicsItem_grabMouse_(QGraphicsItem * _self_) {
  _self_->grabMouse();
}

extern "C" void bg_QGraphicsItem_ungrabMouse_(QGraphicsItem * _self_) {
  _self_->ungrabMouse();
}

extern "C" void bg_QGraphicsItem_grabKeyboard_(QGraphicsItem * _self_) {
  _self_->grabKeyboard();
}

extern "C" void bg_QGraphicsItem_ungrabKeyboard_(QGraphicsItem * _self_) {
  _self_->ungrabKeyboard();
}

extern "C" QPointF bg_QGraphicsItem_pos_(QGraphicsItem * _self_) {
  return _self_->pos();
}

extern "C" qreal bg_QGraphicsItem_x_(QGraphicsItem * _self_) {
  return _self_->x();
}

extern "C" void bg_QGraphicsItem_setX_qreal(QGraphicsItem * _self_, qreal x) {
  _self_->setX(x);
}

extern "C" qreal bg_QGraphicsItem_y_(QGraphicsItem * _self_) {
  return _self_->y();
}

extern "C" void bg_QGraphicsItem_setY_qreal(QGraphicsItem * _self_, qreal y) {
  _self_->setY(y);
}

extern "C" QPointF bg_QGraphicsItem_scenePos_(QGraphicsItem * _self_) {
  return _self_->scenePos();
}

extern "C" void bg_QGraphicsItem_setPos_const_QPointF_R(QGraphicsItem * _self_, const QPointF pos) {
  _self_->setPos(pos);
}

extern "C" void bg_QGraphicsItem_setPos_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y) {
  _self_->setPos(x, y);
}

extern "C" void bg_QGraphicsItem_moveBy_qreal_qreal(QGraphicsItem * _self_, qreal dx, qreal dy) {
  _self_->moveBy(dx, dy);
}

extern "C" void bg_QGraphicsItem_ensureVisible_(QGraphicsItem * _self_) {
  _self_->ensureVisible();
}

extern "C" void bg_QGraphicsItem_ensureVisible_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  _self_->ensureVisible(rect);
}

extern "C" void bg_QGraphicsItem_ensureVisible_const_QRectF_R_int(QGraphicsItem * _self_, const QRectF & rect, int xmargin) {
  _self_->ensureVisible(rect, xmargin);
}

extern "C" void bg_QGraphicsItem_ensureVisible_const_QRectF_R_int_int(QGraphicsItem * _self_, const QRectF & rect, int xmargin, int ymargin) {
  _self_->ensureVisible(rect, xmargin, ymargin);
}

extern "C" void bg_QGraphicsItem_ensureVisible_qreal_qreal_qreal_qreal_int_int(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h, int xmargin, int ymargin) {
  _self_->ensureVisible(x, y, w, h, xmargin, ymargin);
}

extern "C" QMatrix * bg_QGraphicsItem_matrix_(QGraphicsItem * _self_) {
  return new (UseGC) QMatrix (_self_->matrix());
}

extern "C" QMatrix * bg_QGraphicsItem_sceneMatrix_(QGraphicsItem * _self_) {
  return new (UseGC) QMatrix (_self_->sceneMatrix());
}

extern "C" void bg_QGraphicsItem_setMatrix_const_QMatrix_R_bool(QGraphicsItem * _self_, const QMatrix & matrix, bool combine) {
  _self_->setMatrix(matrix, combine);
}

extern "C" void bg_QGraphicsItem_resetMatrix_(QGraphicsItem * _self_) {
  _self_->resetMatrix();
}

extern "C" QTransform * bg_QGraphicsItem_transform_(QGraphicsItem * _self_) {
  return new (UseGC) QTransform (_self_->transform());
}

extern "C" QTransform * bg_QGraphicsItem_sceneTransform_(QGraphicsItem * _self_) {
  return new (UseGC) QTransform (_self_->sceneTransform());
}

extern "C" QTransform * bg_QGraphicsItem_deviceTransform_const_QTransform_R(QGraphicsItem * _self_, const QTransform & viewportTransform) {
  return new (UseGC) QTransform (_self_->deviceTransform(viewportTransform));
}

extern "C" QTransform * bg_QGraphicsItem_itemTransform_const_QGraphicsItem_X_bool_X(QGraphicsItem * _self_, const QGraphicsItem * other, bool * ok) {
  return new (UseGC) QTransform (_self_->itemTransform(other, ok));
}

extern "C" void bg_QGraphicsItem_setTransform_const_QTransform_R_bool(QGraphicsItem * _self_, const QTransform & matrix, bool combine) {
  _self_->setTransform(matrix, combine);
}

extern "C" void bg_QGraphicsItem_resetTransform_(QGraphicsItem * _self_) {
  _self_->resetTransform();
}

extern "C" void bg_QGraphicsItem_setRotation_qreal(QGraphicsItem * _self_, qreal angle) {
  _self_->setRotation(angle);
}

extern "C" qreal bg_QGraphicsItem_rotation_(QGraphicsItem * _self_) {
  return _self_->rotation();
}

extern "C" void bg_QGraphicsItem_setScale_qreal(QGraphicsItem * _self_, qreal scale) {
  _self_->setScale(scale);
}

extern "C" qreal bg_QGraphicsItem_scale_(QGraphicsItem * _self_) {
  return _self_->scale();
}

extern "C" Container_QList_QGraphicsTransform_X * bg_QGraphicsItem_transformations_(QGraphicsItem * _self_) {
  return new (UseGC) Container_QList_QGraphicsTransform_X (_self_->transformations());
}

extern "C" void bg_QGraphicsItem_setTransformations_const_QList_QGraphicsTransform_X__R(QGraphicsItem * _self_, const Container_QList_QGraphicsTransform_X * transformations) {
  _self_->setTransformations(*(transformations));
}

extern "C" QPointF bg_QGraphicsItem_transformOriginPoint_(QGraphicsItem * _self_) {
  return _self_->transformOriginPoint();
}

extern "C" void bg_QGraphicsItem_setTransformOriginPoint_const_QPointF_R(QGraphicsItem * _self_, const QPointF origin) {
  _self_->setTransformOriginPoint(origin);
}

extern "C" void bg_QGraphicsItem_setTransformOriginPoint_qreal_qreal(QGraphicsItem * _self_, qreal ax, qreal ay) {
  _self_->setTransformOriginPoint(ax, ay);
}

extern "C" void bg_QGraphicsItem_advance_int(QGraphicsItem * _self_, int phase) {
  _self_->advance(phase);
}

extern "C" qreal bg_QGraphicsItem_zValue_(QGraphicsItem * _self_) {
  return _self_->zValue();
}

extern "C" void bg_QGraphicsItem_setZValue_qreal(QGraphicsItem * _self_, qreal z) {
  _self_->setZValue(z);
}

extern "C" void bg_QGraphicsItem_stackBefore_const_QGraphicsItem_X(QGraphicsItem * _self_, const QGraphicsItem * sibling) {
  _self_->stackBefore(sibling);
}

extern "C" QRectF * bg_QGraphicsItem_boundingRect_(QGraphicsItem * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QRectF * bg_QGraphicsItem_childrenBoundingRect_(QGraphicsItem * _self_) {
  return new (UseGC) QRectF (_self_->childrenBoundingRect());
}

extern "C" QRectF * bg_QGraphicsItem_sceneBoundingRect_(QGraphicsItem * _self_) {
  return new (UseGC) QRectF (_self_->sceneBoundingRect());
}

extern "C" QPainterPath * bg_QGraphicsItem_shape_(QGraphicsItem * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsItem_isClipped_(QGraphicsItem * _self_) {
  return _self_->isClipped();
}

extern "C" QPainterPath * bg_QGraphicsItem_clipPath_(QGraphicsItem * _self_) {
  return new (UseGC) QPainterPath (_self_->clipPath());
}

extern "C" bool bg_QGraphicsItem_contains_const_QPointF_R(QGraphicsItem * _self_, const QPointF point) {
  return _self_->contains(point);
}

extern "C" bool bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(QGraphicsItem * _self_, const QGraphicsItem * other, Qt::ItemSelectionMode mode) {
  return _self_->collidesWithItem(other, mode);
}

extern "C" bool bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(QGraphicsItem * _self_, const QPainterPath & path, Qt::ItemSelectionMode mode) {
  return _self_->collidesWithPath(path, mode);
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsItem_collidingItems_Qt__ItemSelectionMode(QGraphicsItem * _self_, Qt::ItemSelectionMode mode) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->collidingItems(mode));
}

extern "C" bool bg_QGraphicsItem_isObscured_(QGraphicsItem * _self_) {
  return _self_->isObscured();
}

extern "C" bool bg_QGraphicsItem_isObscured_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return _self_->isObscured(rect);
}

extern "C" bool bg_QGraphicsItem_isObscured_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->isObscured(x, y, w, h);
}

extern "C" bool bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QGraphicsItem_opaqueArea_(QGraphicsItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" QRegion * bg_QGraphicsItem_boundingRegion_const_QTransform_R(QGraphicsItem * _self_, const QTransform & itemToDeviceTransform) {
  return new (UseGC) QRegion (_self_->boundingRegion(itemToDeviceTransform));
}

extern "C" qreal bg_QGraphicsItem_boundingRegionGranularity_(QGraphicsItem * _self_) {
  return _self_->boundingRegionGranularity();
}

extern "C" void bg_QGraphicsItem_setBoundingRegionGranularity_qreal(QGraphicsItem * _self_, qreal granularity) {
  _self_->setBoundingRegionGranularity(granularity);
}

extern "C" void bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsItem * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" void bg_QGraphicsItem_update_(QGraphicsItem * _self_) {
  _self_->update();
}

extern "C" void bg_QGraphicsItem_update_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  _self_->update(rect);
}

extern "C" void bg_QGraphicsItem_update_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal width, qreal height) {
  _self_->update(x, y, width, height);
}

extern "C" void bg_QGraphicsItem_scroll_qreal_qreal(QGraphicsItem * _self_, qreal dx, qreal dy) {
  _self_->scroll(dx, dy);
}

extern "C" void bg_QGraphicsItem_scroll_qreal_qreal_const_QRectF_R(QGraphicsItem * _self_, qreal dx, qreal dy, const QRectF & rect) {
  _self_->scroll(dx, dy, rect);
}

extern "C" QPointF bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPointF_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QPointF point) {
  return _self_->mapToItem(item, point);
}

extern "C" QPointF bg_QGraphicsItem_mapToParent_const_QPointF_R(QGraphicsItem * _self_, const QPointF point) {
  return _self_->mapToParent(point);
}

extern "C" QPointF bg_QGraphicsItem_mapToScene_const_QPointF_R(QGraphicsItem * _self_, const QPointF point) {
  return _self_->mapToScene(point);
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QRectF_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QRectF & rect) {
  return new (UseGC) QPolygonF (_self_->mapToItem(item, rect));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToParent_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return new (UseGC) QPolygonF (_self_->mapToParent(rect));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToScene_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return new (UseGC) QPolygonF (_self_->mapToScene(rect));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_const_QRectF_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QRectF & rect) {
  return new (UseGC) QRectF (_self_->mapRectToItem(item, rect));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectToParent_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return new (UseGC) QRectF (_self_->mapRectToParent(rect));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectToScene_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return new (UseGC) QRectF (_self_->mapRectToScene(rect));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPolygonF_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QPolygonF & polygon) {
  return new (UseGC) QPolygonF (_self_->mapToItem(item, polygon));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToParent_const_QPolygonF_R(QGraphicsItem * _self_, const QPolygonF & polygon) {
  return new (UseGC) QPolygonF (_self_->mapToParent(polygon));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToScene_const_QPolygonF_R(QGraphicsItem * _self_, const QPolygonF & polygon) {
  return new (UseGC) QPolygonF (_self_->mapToScene(polygon));
}

extern "C" QPainterPath * bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPainterPath_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QPainterPath & path) {
  return new (UseGC) QPainterPath (_self_->mapToItem(item, path));
}

extern "C" QPainterPath * bg_QGraphicsItem_mapToParent_const_QPainterPath_R(QGraphicsItem * _self_, const QPainterPath & path) {
  return new (UseGC) QPainterPath (_self_->mapToParent(path));
}

extern "C" QPainterPath * bg_QGraphicsItem_mapToScene_const_QPainterPath_R(QGraphicsItem * _self_, const QPainterPath & path) {
  return new (UseGC) QPainterPath (_self_->mapToScene(path));
}

extern "C" QPointF bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPointF_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QPointF point) {
  return _self_->mapFromItem(item, point);
}

extern "C" QPointF bg_QGraphicsItem_mapFromParent_const_QPointF_R(QGraphicsItem * _self_, const QPointF point) {
  return _self_->mapFromParent(point);
}

extern "C" QPointF bg_QGraphicsItem_mapFromScene_const_QPointF_R(QGraphicsItem * _self_, const QPointF point) {
  return _self_->mapFromScene(point);
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QRectF_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QRectF & rect) {
  return new (UseGC) QPolygonF (_self_->mapFromItem(item, rect));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromParent_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return new (UseGC) QPolygonF (_self_->mapFromParent(rect));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromScene_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return new (UseGC) QPolygonF (_self_->mapFromScene(rect));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_const_QRectF_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QRectF & rect) {
  return new (UseGC) QRectF (_self_->mapRectFromItem(item, rect));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectFromParent_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return new (UseGC) QRectF (_self_->mapRectFromParent(rect));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectFromScene_const_QRectF_R(QGraphicsItem * _self_, const QRectF & rect) {
  return new (UseGC) QRectF (_self_->mapRectFromScene(rect));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPolygonF_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QPolygonF & polygon) {
  return new (UseGC) QPolygonF (_self_->mapFromItem(item, polygon));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromParent_const_QPolygonF_R(QGraphicsItem * _self_, const QPolygonF & polygon) {
  return new (UseGC) QPolygonF (_self_->mapFromParent(polygon));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromScene_const_QPolygonF_R(QGraphicsItem * _self_, const QPolygonF & polygon) {
  return new (UseGC) QPolygonF (_self_->mapFromScene(polygon));
}

extern "C" QPainterPath * bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPainterPath_R(QGraphicsItem * _self_, const QGraphicsItem * item, const QPainterPath & path) {
  return new (UseGC) QPainterPath (_self_->mapFromItem(item, path));
}

extern "C" QPainterPath * bg_QGraphicsItem_mapFromParent_const_QPainterPath_R(QGraphicsItem * _self_, const QPainterPath & path) {
  return new (UseGC) QPainterPath (_self_->mapFromParent(path));
}

extern "C" QPainterPath * bg_QGraphicsItem_mapFromScene_const_QPainterPath_R(QGraphicsItem * _self_, const QPainterPath & path) {
  return new (UseGC) QPainterPath (_self_->mapFromScene(path));
}

extern "C" QPointF bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal(QGraphicsItem * _self_, const QGraphicsItem * item, qreal x, qreal y) {
  return _self_->mapToItem(item, x, y);
}

extern "C" QPointF bg_QGraphicsItem_mapToParent_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y) {
  return _self_->mapToParent(x, y);
}

extern "C" QPointF bg_QGraphicsItem_mapToScene_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y) {
  return _self_->mapToScene(x, y);
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, const QGraphicsItem * item, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapToItem(item, x, y, w, h));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToParent_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapToParent(x, y, w, h));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapToScene_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapToScene(x, y, w, h));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, const QGraphicsItem * item, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectToItem(item, x, y, w, h));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectToParent_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectToParent(x, y, w, h));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectToScene_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectToScene(x, y, w, h));
}

extern "C" QPointF bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal(QGraphicsItem * _self_, const QGraphicsItem * item, qreal x, qreal y) {
  return _self_->mapFromItem(item, x, y);
}

extern "C" QPointF bg_QGraphicsItem_mapFromParent_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y) {
  return _self_->mapFromParent(x, y);
}

extern "C" QPointF bg_QGraphicsItem_mapFromScene_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y) {
  return _self_->mapFromScene(x, y);
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, const QGraphicsItem * item, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapFromItem(item, x, y, w, h));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromParent_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapFromParent(x, y, w, h));
}

extern "C" QPolygonF * bg_QGraphicsItem_mapFromScene_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapFromScene(x, y, w, h));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, const QGraphicsItem * item, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectFromItem(item, x, y, w, h));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectFromParent_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectFromParent(x, y, w, h));
}

extern "C" QRectF * bg_QGraphicsItem_mapRectFromScene_qreal_qreal_qreal_qreal(QGraphicsItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectFromScene(x, y, w, h));
}

extern "C" bool bg_QGraphicsItem_isAncestorOf_const_QGraphicsItem_X(QGraphicsItem * _self_, const QGraphicsItem * child) {
  return _self_->isAncestorOf(child);
}

extern "C" QGraphicsItem * bg_QGraphicsItem_commonAncestorItem_const_QGraphicsItem_X(QGraphicsItem * _self_, const QGraphicsItem * other) {
  return _self_->commonAncestorItem(other);
}

extern "C" bool bg_QGraphicsItem_isUnderMouse_(QGraphicsItem * _self_) {
  return _self_->isUnderMouse();
}

extern "C" CrystalVariant bg_QGraphicsItem_data_int(QGraphicsItem * _self_, int key) {
  return qvariant_to_crystal(_self_->data(key));
}

extern "C" void bg_QGraphicsItem_setData_int_const_QVariant_R(QGraphicsItem * _self_, int key, const CrystalVariant value) {
  _self_->setData(key, crystal_to_qvariant(value));
}

extern "C" Qt::InputMethodHints bg_QGraphicsItem_inputMethodHints_(QGraphicsItem * _self_) {
  return _self_->inputMethodHints();
}

extern "C" void bg_QGraphicsItem_setInputMethodHints_Qt__InputMethodHints(QGraphicsItem * _self_, Qt::InputMethodHints hints) {
  _self_->setInputMethodHints(hints);
}

extern "C" int bg_QGraphicsItem_type_(QGraphicsItem * _self_) {
  return _self_->type();
}

extern "C" void bg_QGraphicsItem_installSceneEventFilter_QGraphicsItem_X(QGraphicsItem * _self_, QGraphicsItem * filterItem) {
  _self_->installSceneEventFilter(filterItem);
}

extern "C" void bg_QGraphicsItem_removeSceneEventFilter_QGraphicsItem_X(QGraphicsItem * _self_, QGraphicsItem * filterItem) {
  _self_->removeSceneEventFilter(filterItem);
}

extern "C" void bg_QGraphicsItem_updateMicroFocus_(QGraphicsItem * _self_) {
  _self_->updateMicroFocus();
}

extern "C" bool bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(QGraphicsItem * _self_, QGraphicsItem * watched, QEvent * event) {
  return _self_->sceneEventFilter(watched, event);
}

extern "C" bool bg_QGraphicsItem_sceneEvent_QEvent_X(QGraphicsItem * _self_, QEvent * event) {
  return _self_->sceneEvent(event);
}

extern "C" void bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(QGraphicsItem * _self_, QGraphicsSceneContextMenuEvent * event) {
  _self_->contextMenuEvent(event);
}

extern "C" void bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(QGraphicsItem * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragEnterEvent(event);
}

extern "C" void bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsItem * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragLeaveEvent(event);
}

extern "C" void bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsItem * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragMoveEvent(event);
}

extern "C" void bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(QGraphicsItem * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dropEvent(event);
}

extern "C" void bg_QGraphicsItem_focusInEvent_QFocusEvent_X(QGraphicsItem * _self_, QFocusEvent * event) {
  _self_->focusInEvent(event);
}

extern "C" void bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(QGraphicsItem * _self_, QFocusEvent * event) {
  _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(QGraphicsItem * _self_, QGraphicsSceneHoverEvent * event) {
  _self_->hoverEnterEvent(event);
}

extern "C" void bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(QGraphicsItem * _self_, QGraphicsSceneHoverEvent * event) {
  _self_->hoverMoveEvent(event);
}

extern "C" void bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(QGraphicsItem * _self_, QGraphicsSceneHoverEvent * event) {
  _self_->hoverLeaveEvent(event);
}

extern "C" void bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(QGraphicsItem * _self_, QKeyEvent * event) {
  _self_->keyPressEvent(event);
}

extern "C" void bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(QGraphicsItem * _self_, QKeyEvent * event) {
  _self_->keyReleaseEvent(event);
}

extern "C" void bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(QGraphicsItem * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mousePressEvent(event);
}

extern "C" void bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(QGraphicsItem * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(QGraphicsItem * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(QGraphicsItem * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(QGraphicsItem * _self_, QGraphicsSceneWheelEvent * event) {
  _self_->wheelEvent(event);
}

extern "C" void bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(QGraphicsItem * _self_, QInputMethodEvent * event) {
  _self_->inputMethodEvent(event);
}

extern "C" CrystalVariant bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(QGraphicsItem * _self_, Qt::InputMethodQuery query) {
  return qvariant_to_crystal(_self_->inputMethodQuery(query));
}

extern "C" CrystalVariant bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(QGraphicsItem * _self_, QGraphicsItem::GraphicsItemChange change, const CrystalVariant value) {
  return qvariant_to_crystal(_self_->itemChange(change, crystal_to_qvariant(value)));
}

extern "C" bool bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(QGraphicsItem * _self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" void bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(QGraphicsItem * _self_, QGraphicsItem::Extension extension, const CrystalVariant variant) {
  _self_->setExtension(extension, crystal_to_qvariant(variant));
}

extern "C" CrystalVariant bg_QGraphicsItem_extension_const_QVariant_R(QGraphicsItem * _self_, const CrystalVariant variant) {
  return qvariant_to_crystal(_self_->extension(crystal_to_qvariant(variant)));
}

extern "C" QGraphicsItem * bg_QGraphicsItem__CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(QGraphicsItemPrivate & dd, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsItem(dd, parent);
}

extern "C" void bg_QGraphicsItem_addToIndex_(QGraphicsItem * _self_) {
  _self_->addToIndex();
}

extern "C" void bg_QGraphicsItem_removeFromIndex_(QGraphicsItem * _self_) {
  _self_->removeFromIndex();
}

extern "C" void bg_QGraphicsItem_prepareGeometryChange_(QGraphicsItem * _self_) {
  _self_->prepareGeometryChange();
}

extern "C" void bg_BgInherit_GraphicsItem_JUMPTABLE_BgJumptable_GraphicsItem_R(BgInherit_GraphicsItem * _self_, const BgJumptable_GraphicsItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsScene {
  CrystalProc<const QMetaObject *> bg_QGraphicsScene_metaObject_;
  CrystalProc<void *, const char *> bg_QGraphicsScene_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, QEvent *> bg_QGraphicsScene_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QGraphicsSceneContextMenuEvent *> bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsScene_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsScene_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QGraphicsSceneHelpEvent *> bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsScene_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneWheelEvent *> bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<void, QPainter *, const QRectF *> bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R;
  CrystalProc<void, QPainter *, const QRectF *> bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R;
  CrystalProc<void, QPainter *, int, QGraphicsItem **, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_GraphicsScene : public QGraphicsScene {
  using QGraphicsScene::QGraphicsScene;
  BgJumptable_GraphicsScene bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGraphicsScene_metaObject_();
    } else {
      return QGraphicsScene::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsScene_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsScene::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGraphicsScene::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery query) const override {
    const BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery(query));
    } else {
      return QGraphicsScene::inputMethodQuery(query);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsScene_event_QEvent_X(event);
    } else {
      return QGraphicsScene::event(event);
    }
  }
  
  bool eventFilter(QObject * watched, QEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QGraphicsScene::eventFilter(watched, event);
    }
  }
  
  void contextMenuEvent(QGraphicsSceneContextMenuEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      QGraphicsScene::contextMenuEvent(event);
    }
  }
  
  void dragEnterEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsScene::dragEnterEvent(event);
    }
  }
  
  void dragMoveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsScene::dragMoveEvent(event);
    }
  }
  
  void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsScene::dragLeaveEvent(event);
    }
  }
  
  void dropEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsScene::dropEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_focusInEvent_QFocusEvent_X(event);
    } else {
      QGraphicsScene::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_focusOutEvent_QFocusEvent_X(event);
    } else {
      QGraphicsScene::focusOutEvent(event);
    }
  }
  
  void helpEvent(QGraphicsSceneHelpEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X(event);
    } else {
      QGraphicsScene::helpEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_keyPressEvent_QKeyEvent_X(event);
    } else {
      QGraphicsScene::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QGraphicsScene::keyReleaseEvent(event);
    }
  }
  
  void mousePressEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsScene::mousePressEvent(event);
    }
  }
  
  void mouseMoveEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsScene::mouseMoveEvent(event);
    }
  }
  
  void mouseReleaseEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsScene::mouseReleaseEvent(event);
    }
  }
  
  void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsScene::mouseDoubleClickEvent(event);
    }
  }
  
  void wheelEvent(QGraphicsSceneWheelEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      QGraphicsScene::wheelEvent(event);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * event) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      QGraphicsScene::inputMethodEvent(event);
    }
  }
  
  void drawBackground(QPainter * painter, const QRectF & rect) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R(painter, &(rect));
    } else {
      QGraphicsScene::drawBackground(painter, rect);
    }
  }
  
  void drawForeground(QPainter * painter, const QRectF & rect) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R(painter, &(rect));
    } else {
      QGraphicsScene::drawForeground(painter, rect);
    }
  }
  
  void drawItems(QPainter * painter, int numItems, QGraphicsItem ** items, const QStyleOptionGraphicsItem * options, QWidget * widget) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, numItems, items, options, widget);
    } else {
      QGraphicsScene::drawItems(painter, numItems, items, options, widget);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QGraphicsScene::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QGraphicsScene::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QGraphicsScene::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QGraphicsScene::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_GraphicsScene *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QGraphicsScene::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGraphicsScene_metaObject_(QGraphicsScene * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGraphicsScene_qt_metacast_const_char_X(QGraphicsScene * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX(QGraphicsScene * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGraphicsScene_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsScene::tr(s));
}

extern "C" CrystalString bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsScene::tr(s, c));
}

extern "C" CrystalString bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsScene::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsScene_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsScene::trUtf8(s));
}

extern "C" CrystalString bg_QGraphicsScene_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsScene::trUtf8(s, c));
}

extern "C" CrystalString bg_QGraphicsScene_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsScene::trUtf8(s, c, n));
}

extern "C" QGraphicsScene * bg_QGraphicsScene__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_GraphicsScene(parent);
}

extern "C" QGraphicsScene * bg_QGraphicsScene__CONSTRUCT_const_QRectF_R_QObject_X(const QRectF & sceneRect, QObject * parent) {
  return new (UseGC) BgInherit_GraphicsScene(sceneRect, parent);
}

extern "C" QGraphicsScene * bg_QGraphicsScene__CONSTRUCT_qreal_qreal_qreal_qreal_QObject_X(qreal x, qreal y, qreal width, qreal height, QObject * parent) {
  return new (UseGC) BgInherit_GraphicsScene(x, y, width, height, parent);
}

extern "C" QRectF * bg_QGraphicsScene_sceneRect_(QGraphicsScene * _self_) {
  return new (UseGC) QRectF (_self_->sceneRect());
}

extern "C" qreal bg_QGraphicsScene_width_(QGraphicsScene * _self_) {
  return _self_->width();
}

extern "C" qreal bg_QGraphicsScene_height_(QGraphicsScene * _self_) {
  return _self_->height();
}

extern "C" void bg_QGraphicsScene_setSceneRect_const_QRectF_R(QGraphicsScene * _self_, const QRectF & rect) {
  _self_->setSceneRect(rect);
}

extern "C" void bg_QGraphicsScene_setSceneRect_qreal_qreal_qreal_qreal(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h) {
  _self_->setSceneRect(x, y, w, h);
}

extern "C" void bg_QGraphicsScene_render_QPainter_X(QGraphicsScene * _self_, QPainter * painter) {
  _self_->render(painter);
}

extern "C" void bg_QGraphicsScene_render_QPainter_X_const_QRectF_R(QGraphicsScene * _self_, QPainter * painter, const QRectF & target) {
  _self_->render(painter, target);
}

extern "C" void bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R(QGraphicsScene * _self_, QPainter * painter, const QRectF & target, const QRectF & source) {
  _self_->render(painter, target, source);
}

extern "C" void bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R_Qt__AspectRatioMode(QGraphicsScene * _self_, QPainter * painter, const QRectF & target, const QRectF & source, Qt::AspectRatioMode aspectRatioMode) {
  _self_->render(painter, target, source, aspectRatioMode);
}

extern "C" QGraphicsScene::ItemIndexMethod bg_QGraphicsScene_itemIndexMethod_(QGraphicsScene * _self_) {
  return _self_->itemIndexMethod();
}

extern "C" void bg_QGraphicsScene_setItemIndexMethod_QGraphicsScene__ItemIndexMethod(QGraphicsScene * _self_, QGraphicsScene::ItemIndexMethod method) {
  _self_->setItemIndexMethod(method);
}

extern "C" bool bg_QGraphicsScene_isSortCacheEnabled_(QGraphicsScene * _self_) {
  return _self_->isSortCacheEnabled();
}

extern "C" void bg_QGraphicsScene_setSortCacheEnabled_bool(QGraphicsScene * _self_, bool enabled) {
  _self_->setSortCacheEnabled(enabled);
}

extern "C" int bg_QGraphicsScene_bspTreeDepth_(QGraphicsScene * _self_) {
  return _self_->bspTreeDepth();
}

extern "C" void bg_QGraphicsScene_setBspTreeDepth_int(QGraphicsScene * _self_, int depth) {
  _self_->setBspTreeDepth(depth);
}

extern "C" QRectF * bg_QGraphicsScene_itemsBoundingRect_(QGraphicsScene * _self_) {
  return new (UseGC) QRectF (_self_->itemsBoundingRect());
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_Qt__SortOrder(QGraphicsScene * _self_, Qt::SortOrder order) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(order));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene * _self_, const QPointF pos, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(pos, mode, order));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene * _self_, const QPointF pos, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform & deviceTransform) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(pos, mode, order, deviceTransform));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene * _self_, const QRectF & rect, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(rect, mode, order));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene * _self_, const QRectF & rect, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform & deviceTransform) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(rect, mode, order, deviceTransform));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene * _self_, const QPolygonF & polygon, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(polygon, mode, order));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene * _self_, const QPolygonF & polygon, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform & deviceTransform) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(polygon, mode, order, deviceTransform));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene * _self_, const QPainterPath & path, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(path, mode, order));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene * _self_, const QPainterPath & path, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform & deviceTransform) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(path, mode, order, deviceTransform));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_collidingItems_const_QGraphicsItem_X_Qt__ItemSelectionMode(QGraphicsScene * _self_, const QGraphicsItem * item, Qt::ItemSelectionMode mode) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->collidingItems(item, mode));
}

extern "C" QGraphicsItem * bg_QGraphicsScene_itemAt_const_QPointF_R_const_QTransform_R(QGraphicsScene * _self_, const QPointF pos, const QTransform & deviceTransform) {
  return _self_->itemAt(pos, deviceTransform);
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(x, y, w, h, mode, order));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform & deviceTransform) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(x, y, w, h, mode, order, deviceTransform));
}

extern "C" QGraphicsItem * bg_QGraphicsScene_itemAt_qreal_qreal_const_QTransform_R(QGraphicsScene * _self_, qreal x, qreal y, const QTransform & deviceTransform) {
  return _self_->itemAt(x, y, deviceTransform);
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsScene_selectedItems_(QGraphicsScene * _self_) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->selectedItems());
}

extern "C" QPainterPath * bg_QGraphicsScene_selectionArea_(QGraphicsScene * _self_) {
  return new (UseGC) QPainterPath (_self_->selectionArea());
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_const_QTransform_R(QGraphicsScene * _self_, const QPainterPath & path, const QTransform & deviceTransform) {
  _self_->setSelectionArea(path, deviceTransform);
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode(QGraphicsScene * _self_, const QPainterPath & path, Qt::ItemSelectionMode mode) {
  _self_->setSelectionArea(path, mode);
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode_const_QTransform_R(QGraphicsScene * _self_, const QPainterPath & path, Qt::ItemSelectionMode mode, const QTransform & deviceTransform) {
  _self_->setSelectionArea(path, mode, deviceTransform);
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode(QGraphicsScene * _self_, const QPainterPath & path, Qt::ItemSelectionOperation selectionOperation, Qt::ItemSelectionMode mode) {
  _self_->setSelectionArea(path, selectionOperation, mode);
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode_const_QTransform_R(QGraphicsScene * _self_, const QPainterPath & path, Qt::ItemSelectionOperation selectionOperation, Qt::ItemSelectionMode mode, const QTransform & deviceTransform) {
  _self_->setSelectionArea(path, selectionOperation, mode, deviceTransform);
}

extern "C" QGraphicsItemGroup * bg_QGraphicsScene_createItemGroup_const_QList_QGraphicsItem_X__R(QGraphicsScene * _self_, const Container_QList_QGraphicsItem_X * items) {
  return _self_->createItemGroup(*(items));
}

extern "C" void bg_QGraphicsScene_destroyItemGroup_QGraphicsItemGroup_X(QGraphicsScene * _self_, QGraphicsItemGroup * group) {
  _self_->destroyItemGroup(group);
}

extern "C" void bg_QGraphicsScene_addItem_QGraphicsItem_X(QGraphicsScene * _self_, QGraphicsItem * item) {
  _self_->addItem(item);
}

extern "C" QGraphicsEllipseItem * bg_QGraphicsScene_addEllipse_const_QRectF_R(QGraphicsScene * _self_, const QRectF & rect) {
  return _self_->addEllipse(rect);
}

extern "C" QGraphicsEllipseItem * bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R(QGraphicsScene * _self_, const QRectF & rect, const QPen & pen) {
  return _self_->addEllipse(rect, pen);
}

extern "C" QGraphicsEllipseItem * bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R_const_QBrush_R(QGraphicsScene * _self_, const QRectF & rect, const QPen & pen, const QBrush & brush) {
  return _self_->addEllipse(rect, pen, brush);
}

extern "C" QGraphicsLineItem * bg_QGraphicsScene_addLine_const_QLineF_R(QGraphicsScene * _self_, const QLineF & line) {
  return _self_->addLine(line);
}

extern "C" QGraphicsLineItem * bg_QGraphicsScene_addLine_const_QLineF_R_const_QPen_R(QGraphicsScene * _self_, const QLineF & line, const QPen & pen) {
  return _self_->addLine(line, pen);
}

extern "C" QGraphicsPathItem * bg_QGraphicsScene_addPath_const_QPainterPath_R(QGraphicsScene * _self_, const QPainterPath & path) {
  return _self_->addPath(path);
}

extern "C" QGraphicsPathItem * bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R(QGraphicsScene * _self_, const QPainterPath & path, const QPen & pen) {
  return _self_->addPath(path, pen);
}

extern "C" QGraphicsPathItem * bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R_const_QBrush_R(QGraphicsScene * _self_, const QPainterPath & path, const QPen & pen, const QBrush & brush) {
  return _self_->addPath(path, pen, brush);
}

extern "C" QGraphicsPixmapItem * bg_QGraphicsScene_addPixmap_const_QPixmap_R(QGraphicsScene * _self_, const QPixmap & pixmap) {
  return _self_->addPixmap(pixmap);
}

extern "C" QGraphicsPolygonItem * bg_QGraphicsScene_addPolygon_const_QPolygonF_R(QGraphicsScene * _self_, const QPolygonF & polygon) {
  return _self_->addPolygon(polygon);
}

extern "C" QGraphicsPolygonItem * bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R(QGraphicsScene * _self_, const QPolygonF & polygon, const QPen & pen) {
  return _self_->addPolygon(polygon, pen);
}

extern "C" QGraphicsPolygonItem * bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R_const_QBrush_R(QGraphicsScene * _self_, const QPolygonF & polygon, const QPen & pen, const QBrush & brush) {
  return _self_->addPolygon(polygon, pen, brush);
}

extern "C" QGraphicsRectItem * bg_QGraphicsScene_addRect_const_QRectF_R(QGraphicsScene * _self_, const QRectF & rect) {
  return _self_->addRect(rect);
}

extern "C" QGraphicsRectItem * bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R(QGraphicsScene * _self_, const QRectF & rect, const QPen & pen) {
  return _self_->addRect(rect, pen);
}

extern "C" QGraphicsRectItem * bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R_const_QBrush_R(QGraphicsScene * _self_, const QRectF & rect, const QPen & pen, const QBrush & brush) {
  return _self_->addRect(rect, pen, brush);
}

extern "C" QGraphicsTextItem * bg_QGraphicsScene_addText_const_QString_R(QGraphicsScene * _self_, const CrystalString text) {
  return _self_->addText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QGraphicsTextItem * bg_QGraphicsScene_addText_const_QString_R_const_QFont_R(QGraphicsScene * _self_, const CrystalString text, const QFont & font) {
  return _self_->addText(QString::fromUtf8(text.ptr, text.size), font);
}

extern "C" QGraphicsSimpleTextItem * bg_QGraphicsScene_addSimpleText_const_QString_R(QGraphicsScene * _self_, const CrystalString text) {
  return _self_->addSimpleText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QGraphicsSimpleTextItem * bg_QGraphicsScene_addSimpleText_const_QString_R_const_QFont_R(QGraphicsScene * _self_, const CrystalString text, const QFont & font) {
  return _self_->addSimpleText(QString::fromUtf8(text.ptr, text.size), font);
}

extern "C" QGraphicsProxyWidget * bg_QGraphicsScene_addWidget_QWidget_X(QGraphicsScene * _self_, QWidget * widget) {
  return _self_->addWidget(widget);
}

extern "C" QGraphicsProxyWidget * bg_QGraphicsScene_addWidget_QWidget_X_Qt__WindowFlags(QGraphicsScene * _self_, QWidget * widget, Qt::WindowFlags wFlags) {
  return _self_->addWidget(widget, wFlags);
}

extern "C" QGraphicsEllipseItem * bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->addEllipse(x, y, w, h);
}

extern "C" QGraphicsEllipseItem * bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h, const QPen & pen) {
  return _self_->addEllipse(x, y, w, h, pen);
}

extern "C" QGraphicsEllipseItem * bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h, const QPen & pen, const QBrush & brush) {
  return _self_->addEllipse(x, y, w, h, pen, brush);
}

extern "C" QGraphicsLineItem * bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal(QGraphicsScene * _self_, qreal x1, qreal y1, qreal x2, qreal y2) {
  return _self_->addLine(x1, y1, x2, y2);
}

extern "C" QGraphicsLineItem * bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal_const_QPen_R(QGraphicsScene * _self_, qreal x1, qreal y1, qreal x2, qreal y2, const QPen & pen) {
  return _self_->addLine(x1, y1, x2, y2, pen);
}

extern "C" QGraphicsRectItem * bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->addRect(x, y, w, h);
}

extern "C" QGraphicsRectItem * bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h, const QPen & pen) {
  return _self_->addRect(x, y, w, h, pen);
}

extern "C" QGraphicsRectItem * bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h, const QPen & pen, const QBrush & brush) {
  return _self_->addRect(x, y, w, h, pen, brush);
}

extern "C" void bg_QGraphicsScene_removeItem_QGraphicsItem_X(QGraphicsScene * _self_, QGraphicsItem * item) {
  _self_->removeItem(item);
}

extern "C" QGraphicsItem * bg_QGraphicsScene_focusItem_(QGraphicsScene * _self_) {
  return _self_->focusItem();
}

extern "C" void bg_QGraphicsScene_setFocusItem_QGraphicsItem_X_Qt__FocusReason(QGraphicsScene * _self_, QGraphicsItem * item, Qt::FocusReason focusReason) {
  _self_->setFocusItem(item, focusReason);
}

extern "C" bool bg_QGraphicsScene_hasFocus_(QGraphicsScene * _self_) {
  return _self_->hasFocus();
}

extern "C" void bg_QGraphicsScene_setFocus_Qt__FocusReason(QGraphicsScene * _self_, Qt::FocusReason focusReason) {
  _self_->setFocus(focusReason);
}

extern "C" void bg_QGraphicsScene_clearFocus_(QGraphicsScene * _self_) {
  _self_->clearFocus();
}

extern "C" void bg_QGraphicsScene_setStickyFocus_bool(QGraphicsScene * _self_, bool enabled) {
  _self_->setStickyFocus(enabled);
}

extern "C" bool bg_QGraphicsScene_stickyFocus_(QGraphicsScene * _self_) {
  return _self_->stickyFocus();
}

extern "C" QGraphicsItem * bg_QGraphicsScene_mouseGrabberItem_(QGraphicsScene * _self_) {
  return _self_->mouseGrabberItem();
}

extern "C" QBrush * bg_QGraphicsScene_backgroundBrush_(QGraphicsScene * _self_) {
  return new (UseGC) QBrush (_self_->backgroundBrush());
}

extern "C" void bg_QGraphicsScene_setBackgroundBrush_const_QBrush_R(QGraphicsScene * _self_, const QBrush & brush) {
  _self_->setBackgroundBrush(brush);
}

extern "C" QBrush * bg_QGraphicsScene_foregroundBrush_(QGraphicsScene * _self_) {
  return new (UseGC) QBrush (_self_->foregroundBrush());
}

extern "C" void bg_QGraphicsScene_setForegroundBrush_const_QBrush_R(QGraphicsScene * _self_, const QBrush & brush) {
  _self_->setForegroundBrush(brush);
}

extern "C" CrystalVariant bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery(QGraphicsScene * _self_, Qt::InputMethodQuery query) {
  return qvariant_to_crystal(_self_->inputMethodQuery(query));
}

extern "C" Container_QList_QGraphicsView_X * bg_QGraphicsScene_views_(QGraphicsScene * _self_) {
  return new (UseGC) Container_QList_QGraphicsView_X (_self_->views());
}

extern "C" void bg_QGraphicsScene_update_qreal_qreal_qreal_qreal(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h) {
  _self_->update(x, y, w, h);
}

extern "C" void bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h) {
  _self_->invalidate(x, y, w, h);
}

extern "C" void bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal_QGraphicsScene__SceneLayers(QGraphicsScene * _self_, qreal x, qreal y, qreal w, qreal h, QGraphicsScene::SceneLayers layers) {
  _self_->invalidate(x, y, w, h, layers);
}

extern "C" QStyle * bg_QGraphicsScene_style_(QGraphicsScene * _self_) {
  return _self_->style();
}

extern "C" void bg_QGraphicsScene_setStyle_QStyle_X(QGraphicsScene * _self_, QStyle * style) {
  _self_->setStyle(style);
}

extern "C" QFont * bg_QGraphicsScene_font_(QGraphicsScene * _self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QGraphicsScene_setFont_const_QFont_R(QGraphicsScene * _self_, const QFont & font) {
  _self_->setFont(font);
}

extern "C" QPalette * bg_QGraphicsScene_palette_(QGraphicsScene * _self_) {
  return new (UseGC) QPalette (_self_->palette());
}

extern "C" void bg_QGraphicsScene_setPalette_const_QPalette_R(QGraphicsScene * _self_, const QPalette & palette) {
  _self_->setPalette(palette);
}

extern "C" bool bg_QGraphicsScene_isActive_(QGraphicsScene * _self_) {
  return _self_->isActive();
}

extern "C" QGraphicsItem * bg_QGraphicsScene_activePanel_(QGraphicsScene * _self_) {
  return _self_->activePanel();
}

extern "C" void bg_QGraphicsScene_setActivePanel_QGraphicsItem_X(QGraphicsScene * _self_, QGraphicsItem * item) {
  _self_->setActivePanel(item);
}

extern "C" QGraphicsWidget * bg_QGraphicsScene_activeWindow_(QGraphicsScene * _self_) {
  return _self_->activeWindow();
}

extern "C" void bg_QGraphicsScene_setActiveWindow_QGraphicsWidget_X(QGraphicsScene * _self_, QGraphicsWidget * widget) {
  _self_->setActiveWindow(widget);
}

extern "C" bool bg_QGraphicsScene_sendEvent_QGraphicsItem_X_QEvent_X(QGraphicsScene * _self_, QGraphicsItem * item, QEvent * event) {
  return _self_->sendEvent(item, event);
}

extern "C" qreal bg_QGraphicsScene_minimumRenderSize_(QGraphicsScene * _self_) {
  return _self_->minimumRenderSize();
}

extern "C" void bg_QGraphicsScene_setMinimumRenderSize_qreal(QGraphicsScene * _self_, qreal minSize) {
  _self_->setMinimumRenderSize(minSize);
}

extern "C" void bg_QGraphicsScene_update_(QGraphicsScene * _self_) {
  _self_->update();
}

extern "C" void bg_QGraphicsScene_update_const_QRectF_R(QGraphicsScene * _self_, const QRectF & rect) {
  _self_->update(rect);
}

extern "C" void bg_QGraphicsScene_invalidate_(QGraphicsScene * _self_) {
  _self_->invalidate();
}

extern "C" void bg_QGraphicsScene_invalidate_const_QRectF_R(QGraphicsScene * _self_, const QRectF & rect) {
  _self_->invalidate(rect);
}

extern "C" void bg_QGraphicsScene_invalidate_const_QRectF_R_QGraphicsScene__SceneLayers(QGraphicsScene * _self_, const QRectF & rect, QGraphicsScene::SceneLayers layers) {
  _self_->invalidate(rect, layers);
}

extern "C" void bg_QGraphicsScene_advance_(QGraphicsScene * _self_) {
  _self_->advance();
}

extern "C" void bg_QGraphicsScene_clearSelection_(QGraphicsScene * _self_) {
  _self_->clearSelection();
}

extern "C" void bg_QGraphicsScene_clear_(QGraphicsScene * _self_) {
  _self_->clear();
}

extern "C" bool bg_QGraphicsScene_event_QEvent_X(QGraphicsScene * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" bool bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X(QGraphicsScene * _self_, QObject * watched, QEvent * event) {
  return _self_->eventFilter(watched, event);
}

extern "C" void bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(QGraphicsScene * _self_, QGraphicsSceneContextMenuEvent * event) {
  _self_->contextMenuEvent(event);
}

extern "C" void bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X(QGraphicsScene * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragEnterEvent(event);
}

extern "C" void bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsScene * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragMoveEvent(event);
}

extern "C" void bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsScene * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragLeaveEvent(event);
}

extern "C" void bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X(QGraphicsScene * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dropEvent(event);
}

extern "C" void bg_QGraphicsScene_focusInEvent_QFocusEvent_X(QGraphicsScene * _self_, QFocusEvent * event) {
  _self_->focusInEvent(event);
}

extern "C" void bg_QGraphicsScene_focusOutEvent_QFocusEvent_X(QGraphicsScene * _self_, QFocusEvent * event) {
  _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X(QGraphicsScene * _self_, QGraphicsSceneHelpEvent * event) {
  _self_->helpEvent(event);
}

extern "C" void bg_QGraphicsScene_keyPressEvent_QKeyEvent_X(QGraphicsScene * _self_, QKeyEvent * event) {
  _self_->keyPressEvent(event);
}

extern "C" void bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X(QGraphicsScene * _self_, QKeyEvent * event) {
  _self_->keyReleaseEvent(event);
}

extern "C" void bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X(QGraphicsScene * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mousePressEvent(event);
}

extern "C" void bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X(QGraphicsScene * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(QGraphicsScene * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(QGraphicsScene * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X(QGraphicsScene * _self_, QGraphicsSceneWheelEvent * event) {
  _self_->wheelEvent(event);
}

extern "C" void bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X(QGraphicsScene * _self_, QInputMethodEvent * event) {
  _self_->inputMethodEvent(event);
}

extern "C" void bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R(QGraphicsScene * _self_, QPainter * painter, const QRectF & rect) {
  _self_->drawBackground(painter, rect);
}

extern "C" void bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R(QGraphicsScene * _self_, QPainter * painter, const QRectF & rect) {
  _self_->drawForeground(painter, rect);
}

extern "C" void bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsScene * _self_, QPainter * painter, int numItems, QGraphicsItem ** items, const QStyleOptionGraphicsItem * options, QWidget * widget) {
  _self_->drawItems(painter, numItems, items, options, widget);
}

extern "C" bool bg_QGraphicsScene_focusNextPrevChild_bool(QGraphicsScene * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QGraphicsScene_changed_const_QList_QRectF__R(QGraphicsScene * _self_, const Container_QList_QRectF * region) {
  _self_->changed(*(region));
}

extern "C" void bg_QGraphicsScene_sceneRectChanged_const_QRectF_R(QGraphicsScene * _self_, const QRectF & rect) {
  _self_->sceneRectChanged(rect);
}

extern "C" void bg_QGraphicsScene_selectionChanged_(QGraphicsScene * _self_) {
  _self_->selectionChanged();
}

extern "C" void bg_QGraphicsScene_focusItemChanged_QGraphicsItem_X_QGraphicsItem_X_Qt__FocusReason(QGraphicsScene * _self_, QGraphicsItem * newFocus, QGraphicsItem * oldFocus, Qt::FocusReason reason) {
  _self_->focusItemChanged(newFocus, oldFocus, reason);
}

extern "C" QMetaObject::Connection * bg_QGraphicsScene_CONNECT_changed_CrystalProc_void_const_QList_QRectF__R(QGraphicsScene * _self_, CrystalProc<void, const Container_QList_QRectF *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsScene::*)(const QList<QRectF> &))&QGraphicsScene::changed, [_proc_](const QList<QRectF> & region){ _proc_(new (UseGC) Container_QList_QRectF (region)); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsScene_CONNECT_sceneRectChanged_CrystalProc_void_const_QRectF_R(QGraphicsScene * _self_, CrystalProc<void, const QRectF *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsScene::*)(const QRectF &))&QGraphicsScene::sceneRectChanged, [_proc_](const QRectF & rect){ _proc_(&(rect)); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsScene_CONNECT_selectionChanged_CrystalProc_void(QGraphicsScene * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsScene::*)())&QGraphicsScene::selectionChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsScene_CONNECT_focusItemChanged_CrystalProc_void_QGraphicsItem_X_QGraphicsItem_X_Qt__FocusReason(QGraphicsScene * _self_, CrystalProc<void, QGraphicsItem *, QGraphicsItem *, Qt::FocusReason> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsScene::*)(QGraphicsItem *, QGraphicsItem *, Qt::FocusReason))&QGraphicsScene::focusItemChanged, [_proc_](QGraphicsItem * newFocus, QGraphicsItem * oldFocus, Qt::FocusReason reason){ _proc_(newFocus, oldFocus, reason); }));
}

extern "C" void bg_BgInherit_GraphicsScene_JUMPTABLE_BgJumptable_GraphicsScene_R(BgInherit_GraphicsScene * _self_, const BgJumptable_GraphicsScene & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsView {
  CrystalProc<const QMetaObject *> bg_QGraphicsView_metaObject_;
  CrystalProc<void *, const char *> bg_QGraphicsView_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSize &> bg_QGraphicsView_sizeHint_;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<void, QWidget *> bg_QGraphicsView_setupViewport_QWidget_X;
  CrystalProc<bool, QEvent *> bg_QGraphicsView_event_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QGraphicsView_viewportEvent_QEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QGraphicsView_dropEvent_QDropEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsView_focusInEvent_QFocusEvent_X;
  CrystalProc<bool, bool> bg_QGraphicsView_focusNextPrevChild_bool;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsView_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsView_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QGraphicsView_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QGraphicsView_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QGraphicsView_paintEvent_QPaintEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QGraphicsView_resizeEvent_QResizeEvent_X;
  CrystalProc<void, int, int> bg_QGraphicsView_scrollContentsBy_int_int;
  CrystalProc<void, QShowEvent *> bg_QGraphicsView_showEvent_QShowEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<void, QPainter *, const QRectF *> bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R;
  CrystalProc<void, QPainter *, const QRectF *> bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R;
  CrystalProc<void, QPainter *, int, QGraphicsItem **, const QStyleOptionGraphicsItem *> bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X;
  CrystalProc<QSize &> bg_QAbstractScrollArea_minimumSizeHint_;
  CrystalProc<bool, QObject *, QEvent *> bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X;
  CrystalProc<QSize &> bg_QAbstractScrollArea_viewportSizeHint_;
};
struct BgInherit_GraphicsView : public QGraphicsView {
  using QGraphicsView::QGraphicsView;
  BgJumptable_GraphicsView bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGraphicsView_metaObject_();
    } else {
      return QGraphicsView::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsView_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsView::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGraphicsView::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QGraphicsView_sizeHint_();
    } else {
      return QGraphicsView::sizeHint();
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery query) const override {
    const BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery(query));
    } else {
      return QGraphicsView::inputMethodQuery(query);
    }
  }
  
  void setupViewport(QWidget * widget) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_setupViewport_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_setupViewport_QWidget_X(widget);
    } else {
      QGraphicsView::setupViewport(widget);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsView_event_QEvent_X(event);
    } else {
      return QGraphicsView::event(event);
    }
  }
  
  bool viewportEvent(QEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_viewportEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsView_viewportEvent_QEvent_X(event);
    } else {
      return QGraphicsView::viewportEvent(event);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      QGraphicsView::contextMenuEvent(event);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      QGraphicsView::dragEnterEvent(event);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      QGraphicsView::dragLeaveEvent(event);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      QGraphicsView::dragMoveEvent(event);
    }
  }
  
  void dropEvent(QDropEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_dropEvent_QDropEvent_X(event);
    } else {
      QGraphicsView::dropEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_focusInEvent_QFocusEvent_X(event);
    } else {
      QGraphicsView::focusInEvent(event);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QGraphicsView_focusNextPrevChild_bool(next);
    } else {
      return QGraphicsView::focusNextPrevChild(next);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_focusOutEvent_QFocusEvent_X(event);
    } else {
      QGraphicsView::focusOutEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_keyPressEvent_QKeyEvent_X(event);
    } else {
      QGraphicsView::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QGraphicsView::keyReleaseEvent(event);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      QGraphicsView::mouseDoubleClickEvent(event);
    }
  }
  
  void mousePressEvent(QMouseEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_mousePressEvent_QMouseEvent_X(event);
    } else {
      QGraphicsView::mousePressEvent(event);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      QGraphicsView::mouseMoveEvent(event);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      QGraphicsView::mouseReleaseEvent(event);
    }
  }
  
  void wheelEvent(QWheelEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_wheelEvent_QWheelEvent_X(event);
    } else {
      QGraphicsView::wheelEvent(event);
    }
  }
  
  void paintEvent(QPaintEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_paintEvent_QPaintEvent_X(event);
    } else {
      QGraphicsView::paintEvent(event);
    }
  }
  
  void resizeEvent(QResizeEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_resizeEvent_QResizeEvent_X(event);
    } else {
      QGraphicsView::resizeEvent(event);
    }
  }
  
  void scrollContentsBy(int dx, int dy) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_scrollContentsBy_int_int.isValid()) {
      _self_->bgJump.bg_QGraphicsView_scrollContentsBy_int_int(dx, dy);
    } else {
      QGraphicsView::scrollContentsBy(dx, dy);
    }
  }
  
  void showEvent(QShowEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_showEvent_QShowEvent_X(event);
    } else {
      QGraphicsView::showEvent(event);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * event) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      QGraphicsView::inputMethodEvent(event);
    }
  }
  
  void drawBackground(QPainter * painter, const QRectF & rect) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R.isValid()) {
      _self_->bgJump.bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R(painter, &(rect));
    } else {
      QGraphicsView::drawBackground(painter, rect);
    }
  }
  
  void drawForeground(QPainter * painter, const QRectF & rect) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R.isValid()) {
      _self_->bgJump.bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R(painter, &(rect));
    } else {
      QGraphicsView::drawForeground(painter, rect);
    }
  }
  
  void drawItems(QPainter * painter, int numItems, QGraphicsItem ** items, const QStyleOptionGraphicsItem * options) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X.isValid()) {
      _self_->bgJump.bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(painter, numItems, items, options);
    } else {
      QGraphicsView::drawItems(painter, numItems, items, options);
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_minimumSizeHint_();
    } else {
      return QGraphicsView::minimumSizeHint();
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QGraphicsView::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  QSize viewportSizeHint() const override {
    const BgInherit_GraphicsView *_self_ = this;
    if (_self_->bgJump.bg_QAbstractScrollArea_viewportSizeHint_.isValid()) {
      return _self_->bgJump.bg_QAbstractScrollArea_viewportSizeHint_();
    } else {
      return QGraphicsView::viewportSizeHint();
    }
  }
  
};
extern "C" const QMetaObject * bg_QGraphicsView_metaObject_(QGraphicsView * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGraphicsView_qt_metacast_const_char_X(QGraphicsView * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX(QGraphicsView * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGraphicsView_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsView::tr(s));
}

extern "C" CrystalString bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsView::tr(s, c));
}

extern "C" CrystalString bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsView::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsView_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsView::trUtf8(s));
}

extern "C" CrystalString bg_QGraphicsView_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsView::trUtf8(s, c));
}

extern "C" CrystalString bg_QGraphicsView_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsView::trUtf8(s, c, n));
}

extern "C" QGraphicsView * bg_QGraphicsView__CONSTRUCT_QWidget_X(QWidget * parent) {
  return new (UseGC) BgInherit_GraphicsView(parent);
}

extern "C" QGraphicsView * bg_QGraphicsView__CONSTRUCT_QGraphicsScene_X_QWidget_X(QGraphicsScene * scene, QWidget * parent) {
  return new (UseGC) BgInherit_GraphicsView(scene, parent);
}

extern "C" QSize * bg_QGraphicsView_sizeHint_(QGraphicsView * _self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QPainter::RenderHints bg_QGraphicsView_renderHints_(QGraphicsView * _self_) {
  return _self_->renderHints();
}

extern "C" void bg_QGraphicsView_setRenderHint_QPainter__RenderHint_bool(QGraphicsView * _self_, QPainter::RenderHint hint, bool enabled) {
  _self_->setRenderHint(hint, enabled);
}

extern "C" void bg_QGraphicsView_setRenderHints_QPainter__RenderHints(QGraphicsView * _self_, QPainter::RenderHints hints) {
  _self_->setRenderHints(hints);
}

extern "C" Qt::Alignment bg_QGraphicsView_alignment_(QGraphicsView * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QGraphicsView_setAlignment_Qt__Alignment(QGraphicsView * _self_, Qt::Alignment alignment) {
  _self_->setAlignment(alignment);
}

extern "C" QGraphicsView::ViewportAnchor bg_QGraphicsView_transformationAnchor_(QGraphicsView * _self_) {
  return _self_->transformationAnchor();
}

extern "C" void bg_QGraphicsView_setTransformationAnchor_QGraphicsView__ViewportAnchor(QGraphicsView * _self_, QGraphicsView::ViewportAnchor anchor) {
  _self_->setTransformationAnchor(anchor);
}

extern "C" QGraphicsView::ViewportAnchor bg_QGraphicsView_resizeAnchor_(QGraphicsView * _self_) {
  return _self_->resizeAnchor();
}

extern "C" void bg_QGraphicsView_setResizeAnchor_QGraphicsView__ViewportAnchor(QGraphicsView * _self_, QGraphicsView::ViewportAnchor anchor) {
  _self_->setResizeAnchor(anchor);
}

extern "C" QGraphicsView::ViewportUpdateMode bg_QGraphicsView_viewportUpdateMode_(QGraphicsView * _self_) {
  return _self_->viewportUpdateMode();
}

extern "C" void bg_QGraphicsView_setViewportUpdateMode_QGraphicsView__ViewportUpdateMode(QGraphicsView * _self_, QGraphicsView::ViewportUpdateMode mode) {
  _self_->setViewportUpdateMode(mode);
}

extern "C" QGraphicsView::OptimizationFlags bg_QGraphicsView_optimizationFlags_(QGraphicsView * _self_) {
  return _self_->optimizationFlags();
}

extern "C" void bg_QGraphicsView_setOptimizationFlag_QGraphicsView__OptimizationFlag_bool(QGraphicsView * _self_, QGraphicsView::OptimizationFlag flag, bool enabled) {
  _self_->setOptimizationFlag(flag, enabled);
}

extern "C" void bg_QGraphicsView_setOptimizationFlags_QGraphicsView__OptimizationFlags(QGraphicsView * _self_, QGraphicsView::OptimizationFlags flags) {
  _self_->setOptimizationFlags(flags);
}

extern "C" QGraphicsView::DragMode bg_QGraphicsView_dragMode_(QGraphicsView * _self_) {
  return _self_->dragMode();
}

extern "C" void bg_QGraphicsView_setDragMode_QGraphicsView__DragMode(QGraphicsView * _self_, QGraphicsView::DragMode mode) {
  _self_->setDragMode(mode);
}

extern "C" Qt::ItemSelectionMode bg_QGraphicsView_rubberBandSelectionMode_(QGraphicsView * _self_) {
  return _self_->rubberBandSelectionMode();
}

extern "C" void bg_QGraphicsView_setRubberBandSelectionMode_Qt__ItemSelectionMode(QGraphicsView * _self_, Qt::ItemSelectionMode mode) {
  _self_->setRubberBandSelectionMode(mode);
}

extern "C" QRect * bg_QGraphicsView_rubberBandRect_(QGraphicsView * _self_) {
  return new (UseGC) QRect (_self_->rubberBandRect());
}

extern "C" QGraphicsView::CacheMode bg_QGraphicsView_cacheMode_(QGraphicsView * _self_) {
  return _self_->cacheMode();
}

extern "C" void bg_QGraphicsView_setCacheMode_QGraphicsView__CacheMode(QGraphicsView * _self_, QGraphicsView::CacheMode mode) {
  _self_->setCacheMode(mode);
}

extern "C" void bg_QGraphicsView_resetCachedContent_(QGraphicsView * _self_) {
  _self_->resetCachedContent();
}

extern "C" bool bg_QGraphicsView_isInteractive_(QGraphicsView * _self_) {
  return _self_->isInteractive();
}

extern "C" void bg_QGraphicsView_setInteractive_bool(QGraphicsView * _self_, bool allowed) {
  _self_->setInteractive(allowed);
}

extern "C" QGraphicsScene * bg_QGraphicsView_scene_(QGraphicsView * _self_) {
  return _self_->scene();
}

extern "C" void bg_QGraphicsView_setScene_QGraphicsScene_X(QGraphicsView * _self_, QGraphicsScene * scene) {
  _self_->setScene(scene);
}

extern "C" QRectF * bg_QGraphicsView_sceneRect_(QGraphicsView * _self_) {
  return new (UseGC) QRectF (_self_->sceneRect());
}

extern "C" void bg_QGraphicsView_setSceneRect_const_QRectF_R(QGraphicsView * _self_, const QRectF & rect) {
  _self_->setSceneRect(rect);
}

extern "C" void bg_QGraphicsView_setSceneRect_qreal_qreal_qreal_qreal(QGraphicsView * _self_, qreal x, qreal y, qreal w, qreal h) {
  _self_->setSceneRect(x, y, w, h);
}

extern "C" QMatrix * bg_QGraphicsView_matrix_(QGraphicsView * _self_) {
  return new (UseGC) QMatrix (_self_->matrix());
}

extern "C" void bg_QGraphicsView_setMatrix_const_QMatrix_R_bool(QGraphicsView * _self_, const QMatrix & matrix, bool combine) {
  _self_->setMatrix(matrix, combine);
}

extern "C" void bg_QGraphicsView_resetMatrix_(QGraphicsView * _self_) {
  _self_->resetMatrix();
}

extern "C" QTransform * bg_QGraphicsView_transform_(QGraphicsView * _self_) {
  return new (UseGC) QTransform (_self_->transform());
}

extern "C" QTransform * bg_QGraphicsView_viewportTransform_(QGraphicsView * _self_) {
  return new (UseGC) QTransform (_self_->viewportTransform());
}

extern "C" bool bg_QGraphicsView_isTransformed_(QGraphicsView * _self_) {
  return _self_->isTransformed();
}

extern "C" void bg_QGraphicsView_setTransform_const_QTransform_R_bool(QGraphicsView * _self_, const QTransform & matrix, bool combine) {
  _self_->setTransform(matrix, combine);
}

extern "C" void bg_QGraphicsView_resetTransform_(QGraphicsView * _self_) {
  _self_->resetTransform();
}

extern "C" void bg_QGraphicsView_rotate_qreal(QGraphicsView * _self_, qreal angle) {
  _self_->rotate(angle);
}

extern "C" void bg_QGraphicsView_scale_qreal_qreal(QGraphicsView * _self_, qreal sx, qreal sy) {
  _self_->scale(sx, sy);
}

extern "C" void bg_QGraphicsView_shear_qreal_qreal(QGraphicsView * _self_, qreal sh, qreal sv) {
  _self_->shear(sh, sv);
}

extern "C" void bg_QGraphicsView_translate_qreal_qreal(QGraphicsView * _self_, qreal dx, qreal dy) {
  _self_->translate(dx, dy);
}

extern "C" void bg_QGraphicsView_centerOn_const_QPointF_R(QGraphicsView * _self_, const QPointF pos) {
  _self_->centerOn(pos);
}

extern "C" void bg_QGraphicsView_centerOn_qreal_qreal(QGraphicsView * _self_, qreal x, qreal y) {
  _self_->centerOn(x, y);
}

extern "C" void bg_QGraphicsView_centerOn_const_QGraphicsItem_X(QGraphicsView * _self_, const QGraphicsItem * item) {
  _self_->centerOn(item);
}

extern "C" void bg_QGraphicsView_ensureVisible_const_QRectF_R_int_int(QGraphicsView * _self_, const QRectF & rect, int xmargin, int ymargin) {
  _self_->ensureVisible(rect, xmargin, ymargin);
}

extern "C" void bg_QGraphicsView_ensureVisible_qreal_qreal_qreal_qreal_int_int(QGraphicsView * _self_, qreal x, qreal y, qreal w, qreal h, int xmargin, int ymargin) {
  _self_->ensureVisible(x, y, w, h, xmargin, ymargin);
}

extern "C" void bg_QGraphicsView_ensureVisible_const_QGraphicsItem_X_int_int(QGraphicsView * _self_, const QGraphicsItem * item, int xmargin, int ymargin) {
  _self_->ensureVisible(item, xmargin, ymargin);
}

extern "C" void bg_QGraphicsView_fitInView_const_QRectF_R_Qt__AspectRatioMode(QGraphicsView * _self_, const QRectF & rect, Qt::AspectRatioMode aspectRadioMode) {
  _self_->fitInView(rect, aspectRadioMode);
}

extern "C" void bg_QGraphicsView_fitInView_qreal_qreal_qreal_qreal_Qt__AspectRatioMode(QGraphicsView * _self_, qreal x, qreal y, qreal w, qreal h, Qt::AspectRatioMode aspectRadioMode) {
  _self_->fitInView(x, y, w, h, aspectRadioMode);
}

extern "C" void bg_QGraphicsView_fitInView_const_QGraphicsItem_X_Qt__AspectRatioMode(QGraphicsView * _self_, const QGraphicsItem * item, Qt::AspectRatioMode aspectRadioMode) {
  _self_->fitInView(item, aspectRadioMode);
}

extern "C" void bg_QGraphicsView_render_QPainter_X(QGraphicsView * _self_, QPainter * painter) {
  _self_->render(painter);
}

extern "C" void bg_QGraphicsView_render_QPainter_X_const_QRectF_R(QGraphicsView * _self_, QPainter * painter, const QRectF & target) {
  _self_->render(painter, target);
}

extern "C" void bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R(QGraphicsView * _self_, QPainter * painter, const QRectF & target, const QRect & source) {
  _self_->render(painter, target, source);
}

extern "C" void bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R_Qt__AspectRatioMode(QGraphicsView * _self_, QPainter * painter, const QRectF & target, const QRect & source, Qt::AspectRatioMode aspectRatioMode) {
  _self_->render(painter, target, source, aspectRatioMode);
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsView_items_(QGraphicsView * _self_) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items());
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsView_items_const_QPoint_R(QGraphicsView * _self_, const QPoint pos) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(pos));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsView_items_int_int(QGraphicsView * _self_, int x, int y) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(x, y));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsView_items_const_QRect_R_Qt__ItemSelectionMode(QGraphicsView * _self_, const QRect & rect, Qt::ItemSelectionMode mode) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(rect, mode));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsView_items_int_int_int_int_Qt__ItemSelectionMode(QGraphicsView * _self_, int x, int y, int w, int h, Qt::ItemSelectionMode mode) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(x, y, w, h, mode));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsView_items_const_QPolygon_R_Qt__ItemSelectionMode(QGraphicsView * _self_, const QPolygon & polygon, Qt::ItemSelectionMode mode) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(polygon, mode));
}

extern "C" Container_QList_QGraphicsItem_X * bg_QGraphicsView_items_const_QPainterPath_R_Qt__ItemSelectionMode(QGraphicsView * _self_, const QPainterPath & path, Qt::ItemSelectionMode mode) {
  return new (UseGC) Container_QList_QGraphicsItem_X (_self_->items(path, mode));
}

extern "C" QGraphicsItem * bg_QGraphicsView_itemAt_const_QPoint_R(QGraphicsView * _self_, const QPoint pos) {
  return _self_->itemAt(pos);
}

extern "C" QGraphicsItem * bg_QGraphicsView_itemAt_int_int(QGraphicsView * _self_, int x, int y) {
  return _self_->itemAt(x, y);
}

extern "C" QPointF bg_QGraphicsView_mapToScene_const_QPoint_R(QGraphicsView * _self_, const QPoint point) {
  return _self_->mapToScene(point);
}

extern "C" QPolygonF * bg_QGraphicsView_mapToScene_const_QRect_R(QGraphicsView * _self_, const QRect & rect) {
  return new (UseGC) QPolygonF (_self_->mapToScene(rect));
}

extern "C" QPolygonF * bg_QGraphicsView_mapToScene_const_QPolygon_R(QGraphicsView * _self_, const QPolygon & polygon) {
  return new (UseGC) QPolygonF (_self_->mapToScene(polygon));
}

extern "C" QPainterPath * bg_QGraphicsView_mapToScene_const_QPainterPath_R(QGraphicsView * _self_, const QPainterPath & path) {
  return new (UseGC) QPainterPath (_self_->mapToScene(path));
}

extern "C" QPoint bg_QGraphicsView_mapFromScene_const_QPointF_R(QGraphicsView * _self_, const QPointF point) {
  return _self_->mapFromScene(point);
}

extern "C" QPolygon * bg_QGraphicsView_mapFromScene_const_QRectF_R(QGraphicsView * _self_, const QRectF & rect) {
  return new (UseGC) QPolygon (_self_->mapFromScene(rect));
}

extern "C" QPolygon * bg_QGraphicsView_mapFromScene_const_QPolygonF_R(QGraphicsView * _self_, const QPolygonF & polygon) {
  return new (UseGC) QPolygon (_self_->mapFromScene(polygon));
}

extern "C" QPainterPath * bg_QGraphicsView_mapFromScene_const_QPainterPath_R(QGraphicsView * _self_, const QPainterPath & path) {
  return new (UseGC) QPainterPath (_self_->mapFromScene(path));
}

extern "C" QPointF bg_QGraphicsView_mapToScene_int_int(QGraphicsView * _self_, int x, int y) {
  return _self_->mapToScene(x, y);
}

extern "C" QPolygonF * bg_QGraphicsView_mapToScene_int_int_int_int(QGraphicsView * _self_, int x, int y, int w, int h) {
  return new (UseGC) QPolygonF (_self_->mapToScene(x, y, w, h));
}

extern "C" QPoint bg_QGraphicsView_mapFromScene_qreal_qreal(QGraphicsView * _self_, qreal x, qreal y) {
  return _self_->mapFromScene(x, y);
}

extern "C" QPolygon * bg_QGraphicsView_mapFromScene_qreal_qreal_qreal_qreal(QGraphicsView * _self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygon (_self_->mapFromScene(x, y, w, h));
}

extern "C" CrystalVariant bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery(QGraphicsView * _self_, Qt::InputMethodQuery query) {
  return qvariant_to_crystal(_self_->inputMethodQuery(query));
}

extern "C" QBrush * bg_QGraphicsView_backgroundBrush_(QGraphicsView * _self_) {
  return new (UseGC) QBrush (_self_->backgroundBrush());
}

extern "C" void bg_QGraphicsView_setBackgroundBrush_const_QBrush_R(QGraphicsView * _self_, const QBrush & brush) {
  _self_->setBackgroundBrush(brush);
}

extern "C" QBrush * bg_QGraphicsView_foregroundBrush_(QGraphicsView * _self_) {
  return new (UseGC) QBrush (_self_->foregroundBrush());
}

extern "C" void bg_QGraphicsView_setForegroundBrush_const_QBrush_R(QGraphicsView * _self_, const QBrush & brush) {
  _self_->setForegroundBrush(brush);
}

extern "C" void bg_QGraphicsView_updateScene_const_QList_QRectF__R(QGraphicsView * _self_, const Container_QList_QRectF * rects) {
  _self_->updateScene(*(rects));
}

extern "C" void bg_QGraphicsView_invalidateScene_(QGraphicsView * _self_) {
  _self_->invalidateScene();
}

extern "C" void bg_QGraphicsView_invalidateScene_const_QRectF_R(QGraphicsView * _self_, const QRectF & rect) {
  _self_->invalidateScene(rect);
}

extern "C" void bg_QGraphicsView_invalidateScene_const_QRectF_R_QGraphicsScene__SceneLayers(QGraphicsView * _self_, const QRectF & rect, QGraphicsScene::SceneLayers layers) {
  _self_->invalidateScene(rect, layers);
}

extern "C" void bg_QGraphicsView_updateSceneRect_const_QRectF_R(QGraphicsView * _self_, const QRectF & rect) {
  _self_->updateSceneRect(rect);
}

extern "C" void bg_QGraphicsView_rubberBandChanged_QRect_QPointF_QPointF(QGraphicsView * _self_, QRect & viewportRect, QPointF fromScenePoint, QPointF toScenePoint) {
  _self_->rubberBandChanged(viewportRect, fromScenePoint, toScenePoint);
}

extern "C" void bg_QGraphicsView_setupViewport_QWidget_X(QGraphicsView * _self_, QWidget * widget) {
  _self_->setupViewport(widget);
}

extern "C" QGraphicsView * bg_QGraphicsView__CONSTRUCT_QGraphicsViewPrivate_R_QWidget_X(QGraphicsViewPrivate & unnamed_arg_0, QWidget * parent) {
  return new (UseGC) BgInherit_GraphicsView(unnamed_arg_0, parent);
}

extern "C" bool bg_QGraphicsView_event_QEvent_X(QGraphicsView * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" bool bg_QGraphicsView_viewportEvent_QEvent_X(QGraphicsView * _self_, QEvent * event) {
  return _self_->viewportEvent(event);
}

extern "C" void bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X(QGraphicsView * _self_, QContextMenuEvent * event) {
  _self_->contextMenuEvent(event);
}

extern "C" void bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X(QGraphicsView * _self_, QDragEnterEvent * event) {
  _self_->dragEnterEvent(event);
}

extern "C" void bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X(QGraphicsView * _self_, QDragLeaveEvent * event) {
  _self_->dragLeaveEvent(event);
}

extern "C" void bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X(QGraphicsView * _self_, QDragMoveEvent * event) {
  _self_->dragMoveEvent(event);
}

extern "C" void bg_QGraphicsView_dropEvent_QDropEvent_X(QGraphicsView * _self_, QDropEvent * event) {
  _self_->dropEvent(event);
}

extern "C" void bg_QGraphicsView_focusInEvent_QFocusEvent_X(QGraphicsView * _self_, QFocusEvent * event) {
  _self_->focusInEvent(event);
}

extern "C" bool bg_QGraphicsView_focusNextPrevChild_bool(QGraphicsView * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QGraphicsView_focusOutEvent_QFocusEvent_X(QGraphicsView * _self_, QFocusEvent * event) {
  _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsView_keyPressEvent_QKeyEvent_X(QGraphicsView * _self_, QKeyEvent * event) {
  _self_->keyPressEvent(event);
}

extern "C" void bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X(QGraphicsView * _self_, QKeyEvent * event) {
  _self_->keyReleaseEvent(event);
}

extern "C" void bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X(QGraphicsView * _self_, QMouseEvent * event) {
  _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QGraphicsView_mousePressEvent_QMouseEvent_X(QGraphicsView * _self_, QMouseEvent * event) {
  _self_->mousePressEvent(event);
}

extern "C" void bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X(QGraphicsView * _self_, QMouseEvent * event) {
  _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X(QGraphicsView * _self_, QMouseEvent * event) {
  _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGraphicsView_wheelEvent_QWheelEvent_X(QGraphicsView * _self_, QWheelEvent * event) {
  _self_->wheelEvent(event);
}

extern "C" void bg_QGraphicsView_paintEvent_QPaintEvent_X(QGraphicsView * _self_, QPaintEvent * event) {
  _self_->paintEvent(event);
}

extern "C" void bg_QGraphicsView_resizeEvent_QResizeEvent_X(QGraphicsView * _self_, QResizeEvent * event) {
  _self_->resizeEvent(event);
}

extern "C" void bg_QGraphicsView_scrollContentsBy_int_int(QGraphicsView * _self_, int dx, int dy) {
  _self_->scrollContentsBy(dx, dy);
}

extern "C" void bg_QGraphicsView_showEvent_QShowEvent_X(QGraphicsView * _self_, QShowEvent * event) {
  _self_->showEvent(event);
}

extern "C" void bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X(QGraphicsView * _self_, QInputMethodEvent * event) {
  _self_->inputMethodEvent(event);
}

extern "C" void bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R(QGraphicsView * _self_, QPainter * painter, const QRectF & rect) {
  _self_->drawBackground(painter, rect);
}

extern "C" void bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R(QGraphicsView * _self_, QPainter * painter, const QRectF & rect) {
  _self_->drawForeground(painter, rect);
}

extern "C" void bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(QGraphicsView * _self_, QPainter * painter, int numItems, QGraphicsItem ** items, const QStyleOptionGraphicsItem * options) {
  _self_->drawItems(painter, numItems, items, options);
}

extern "C" QMetaObject::Connection * bg_QGraphicsView_CONNECT_rubberBandChanged_CrystalProc_void_QRect_QPointF_QPointF(QGraphicsView * _self_, CrystalProc<void, QRect *, QPointF, QPointF> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsView::*)(QRect, QPointF, QPointF))&QGraphicsView::rubberBandChanged, [_proc_](QRect viewportRect, QPointF fromScenePoint, QPointF toScenePoint){ _proc_(new (UseGC) QRect (viewportRect), fromScenePoint, toScenePoint); }));
}

extern "C" void bg_BgInherit_GraphicsView_JUMPTABLE_BgJumptable_GraphicsView_R(BgInherit_GraphicsView * _self_, const BgJumptable_GraphicsView & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsObject {
  CrystalProc<const QMetaObject *> bg_QGraphicsObject_metaObject_;
  CrystalProc<void *, const char *> bg_QGraphicsObject_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QGraphicsObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
  CrystalProc<void, int> bg_QGraphicsItem_advance_int;
  CrystalProc<QRectF &> bg_QGraphicsItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsItem_contains_const_QPointF_R;
  CrystalProc<bool, const QGraphicsItem *, Qt::ItemSelectionMode> bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
  CrystalProc<bool, const QPainterPath *, Qt::ItemSelectionMode> bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsItem_opaqueArea_;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<int> bg_QGraphicsItem_type_;
  CrystalProc<bool, QGraphicsItem *, QEvent *> bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QGraphicsItem_sceneEvent_QEvent_X;
  CrystalProc<void, QGraphicsSceneContextMenuEvent *> bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneWheelEvent *> bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<CrystalVariant, QGraphicsItem::GraphicsItemChange, const CrystalVariant> bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsItem_extension_const_QVariant_R;
};
struct BgInherit_GraphicsObject : public QGraphicsObject {
  using QGraphicsObject::QGraphicsObject;
  BgJumptable_GraphicsObject bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsObject_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGraphicsObject_metaObject_();
    } else {
      return QGraphicsObject::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsObject_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsObject_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsObject::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGraphicsObject::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * ev) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsObject_event_QEvent_X(ev);
    } else {
      return QGraphicsObject::event(ev);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QGraphicsObject::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QGraphicsObject::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QGraphicsObject::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QGraphicsObject::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QGraphicsObject::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QGraphicsObject::disconnectNotify(signal);
    }
  }
  
  void advance(int phase) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_advance_int.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_advance_int(phase);
    } else {
      QGraphicsObject::advance(phase);
    }
  }
  
  QRectF boundingRect() const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QGraphicsItem_boundingRect_.isValid())) {
      return _self_->bgJump.bg_QGraphicsItem_boundingRect_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QGraphicsItem::boundingRect");
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_shape_();
    } else {
      return QGraphicsObject::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsObject::contains(point);
    }
  }
  
  bool collidesWithItem(const QGraphicsItem * other, Qt::ItemSelectionMode mode) const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsObject::collidesWithItem(other, mode);
    }
  }
  
  bool collidesWithPath(const QPainterPath & path, Qt::ItemSelectionMode mode) const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(&(path), mode);
    } else {
      return QGraphicsObject::collidesWithPath(path, mode);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsObject::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_opaqueArea_();
    } else {
      return QGraphicsObject::opaqueArea();
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid())) {
      _self_->bgJump.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      bindgen_fatal_panic("No implementation for pure method QGraphicsItem::paint");
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_type_();
    } else {
      return QGraphicsObject::type();
    }
  }
  
  bool sceneEventFilter(QGraphicsItem * watched, QEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsObject::sceneEventFilter(watched, event);
    }
  }
  
  bool sceneEvent(QEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsObject::sceneEvent(event);
    }
  }
  
  void contextMenuEvent(QGraphicsSceneContextMenuEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      QGraphicsObject::contextMenuEvent(event);
    }
  }
  
  void dragEnterEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsObject::dragEnterEvent(event);
    }
  }
  
  void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsObject::dragLeaveEvent(event);
    }
  }
  
  void dragMoveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsObject::dragMoveEvent(event);
    }
  }
  
  void dropEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsObject::dropEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      QGraphicsObject::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      QGraphicsObject::focusOutEvent(event);
    }
  }
  
  void hoverEnterEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsObject::hoverEnterEvent(event);
    }
  }
  
  void hoverMoveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsObject::hoverMoveEvent(event);
    }
  }
  
  void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsObject::hoverLeaveEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      QGraphicsObject::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QGraphicsObject::keyReleaseEvent(event);
    }
  }
  
  void mousePressEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsObject::mousePressEvent(event);
    }
  }
  
  void mouseMoveEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsObject::mouseMoveEvent(event);
    }
  }
  
  void mouseReleaseEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsObject::mouseReleaseEvent(event);
    }
  }
  
  void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsObject::mouseDoubleClickEvent(event);
    }
  }
  
  void wheelEvent(QGraphicsSceneWheelEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      QGraphicsObject::wheelEvent(event);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * event) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      QGraphicsObject::inputMethodEvent(event);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery query) const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(query));
    } else {
      return QGraphicsObject::inputMethodQuery(query);
    }
  }
  
  QVariant itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant & value) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(change, qvariant_to_crystal(value)));
    } else {
      return QGraphicsObject::itemChange(change, value);
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsObject::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsObject::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsObject *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsObject::extension(variant);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGraphicsObject_metaObject_(QGraphicsObject * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGraphicsObject_qt_metacast_const_char_X(QGraphicsObject * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX(QGraphicsObject * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGraphicsObject_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsObject::tr(s));
}

extern "C" CrystalString bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsObject::tr(s, c));
}

extern "C" CrystalString bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsObject::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsObject_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsObject::trUtf8(s));
}

extern "C" CrystalString bg_QGraphicsObject_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsObject::trUtf8(s, c));
}

extern "C" CrystalString bg_QGraphicsObject_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsObject::trUtf8(s, c, n));
}

extern "C" QGraphicsObject * bg_QGraphicsObject__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsObject(parent);
}

extern "C" void bg_QGraphicsObject_grabGesture_Qt__GestureType(QGraphicsObject * _self_, Qt::GestureType type) {
  _self_->grabGesture(type);
}

extern "C" void bg_QGraphicsObject_grabGesture_Qt__GestureType_Qt__GestureFlags(QGraphicsObject * _self_, Qt::GestureType type, Qt::GestureFlags flags) {
  _self_->grabGesture(type, flags);
}

extern "C" void bg_QGraphicsObject_ungrabGesture_Qt__GestureType(QGraphicsObject * _self_, Qt::GestureType type) {
  _self_->ungrabGesture(type);
}

extern "C" void bg_QGraphicsObject_updateMicroFocus_(QGraphicsObject * _self_) {
  _self_->updateMicroFocus();
}

extern "C" void bg_QGraphicsObject_parentChanged_(QGraphicsObject * _self_) {
  _self_->parentChanged();
}

extern "C" void bg_QGraphicsObject_opacityChanged_(QGraphicsObject * _self_) {
  _self_->opacityChanged();
}

extern "C" void bg_QGraphicsObject_visibleChanged_(QGraphicsObject * _self_) {
  _self_->visibleChanged();
}

extern "C" void bg_QGraphicsObject_enabledChanged_(QGraphicsObject * _self_) {
  _self_->enabledChanged();
}

extern "C" void bg_QGraphicsObject_xChanged_(QGraphicsObject * _self_) {
  _self_->xChanged();
}

extern "C" void bg_QGraphicsObject_yChanged_(QGraphicsObject * _self_) {
  _self_->yChanged();
}

extern "C" void bg_QGraphicsObject_zChanged_(QGraphicsObject * _self_) {
  _self_->zChanged();
}

extern "C" void bg_QGraphicsObject_rotationChanged_(QGraphicsObject * _self_) {
  _self_->rotationChanged();
}

extern "C" void bg_QGraphicsObject_scaleChanged_(QGraphicsObject * _self_) {
  _self_->scaleChanged();
}

extern "C" void bg_QGraphicsObject_childrenChanged_(QGraphicsObject * _self_) {
  _self_->childrenChanged();
}

extern "C" void bg_QGraphicsObject_widthChanged_(QGraphicsObject * _self_) {
  _self_->widthChanged();
}

extern "C" void bg_QGraphicsObject_heightChanged_(QGraphicsObject * _self_) {
  _self_->heightChanged();
}

extern "C" QGraphicsObject * bg_QGraphicsObject__CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(QGraphicsItemPrivate & dd, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsObject(dd, parent);
}

extern "C" bool bg_QGraphicsObject_event_QEvent_X(QGraphicsObject * _self_, QEvent * ev) {
  return _self_->event(ev);
}

extern "C" QGraphicsItem * bg_QGraphicsObject_AS_GraphicsItem_(QGraphicsObject * _self_) {
  return static_cast<QGraphicsItem *>(_self_);
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_parentChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::parentChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_opacityChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::opacityChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_visibleChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::visibleChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_enabledChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::enabledChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_xChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::xChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_yChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::yChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_zChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::zChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_rotationChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::rotationChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_scaleChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::scaleChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_childrenChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::childrenChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_widthChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::widthChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsObject_CONNECT_heightChanged_CrystalProc_void(QGraphicsObject * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::heightChanged, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_GraphicsObject_JUMPTABLE_BgJumptable_GraphicsObject_R(BgInherit_GraphicsObject * _self_, const BgJumptable_GraphicsObject & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsWidget {
  CrystalProc<const QMetaObject *> bg_QGraphicsWidget_metaObject_;
  CrystalProc<void *, const char *> bg_QGraphicsWidget_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, const QRectF *> bg_QGraphicsWidget_setGeometry_const_QRectF_R;
  CrystalProc<void, qreal *, qreal *, qreal *, qreal *> bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X;
  CrystalProc<int> bg_QGraphicsWidget_type_;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<QRectF &> bg_QGraphicsWidget_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsWidget_shape_;
  CrystalProc<void, QStyleOption *> bg_QGraphicsWidget_initStyleOption_QStyleOption_X;
  CrystalProc<QSizeF &, Qt::SizeHint> bg_QGraphicsWidget_sizeHint_Qt__SizeHint;
  CrystalProc<QSizeF &, Qt::SizeHint, const QSizeF *> bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R;
  CrystalProc<void> bg_QGraphicsWidget_updateGeometry_;
  CrystalProc<CrystalVariant, QGraphicsItem::GraphicsItemChange, const CrystalVariant> bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalString, const CrystalVariant> bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R;
  CrystalProc<bool, QEvent *> bg_QGraphicsWidget_sceneEvent_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QGraphicsWidget_windowFrameEvent_QEvent_X;
  CrystalProc<Qt::WindowFrameSection, const QPointF> bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R;
  CrystalProc<bool, QEvent *> bg_QGraphicsWidget_event_QEvent_X;
  CrystalProc<void, QEvent *> bg_QGraphicsWidget_changeEvent_QEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QGraphicsWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<bool, bool> bg_QGraphicsWidget_focusNextPrevChild_bool;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QHideEvent *> bg_QGraphicsWidget_hideEvent_QHideEvent_X;
  CrystalProc<void, QGraphicsSceneMoveEvent *> bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X;
  CrystalProc<void> bg_QGraphicsWidget_polishEvent_;
  CrystalProc<void, QGraphicsSceneResizeEvent *> bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X;
  CrystalProc<void, QShowEvent *> bg_QGraphicsWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QEvent *> bg_QGraphicsWidget_grabMouseEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X;
};
struct BgInherit_GraphicsWidget : public QGraphicsWidget {
  using QGraphicsWidget::QGraphicsWidget;
  BgJumptable_GraphicsWidget bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_metaObject_();
    } else {
      return QGraphicsWidget::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsWidget::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGraphicsWidget::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void setGeometry(const QRectF & rect) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_setGeometry_const_QRectF_R.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_setGeometry_const_QRectF_R(&(rect));
    } else {
      QGraphicsWidget::setGeometry(rect);
    }
  }
  
  void getContentsMargins(qreal * left, qreal * top, qreal * right, qreal * bottom) const override {
    const BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X(left, top, right, bottom);
    } else {
      QGraphicsWidget::getContentsMargins(left, top, right, bottom);
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_type_();
    } else {
      return QGraphicsWidget::type();
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsWidget::paint(painter, option, widget);
    }
  }
  
  void paintWindowFrame(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsWidget::paintWindowFrame(painter, option, widget);
    }
  }
  
  QRectF boundingRect() const override {
    const BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_boundingRect_.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_boundingRect_();
    } else {
      return QGraphicsWidget::boundingRect();
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_shape_();
    } else {
      return QGraphicsWidget::shape();
    }
  }
  
  void initStyleOption(QStyleOption * option) const override {
    const BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_initStyleOption_QStyleOption_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_initStyleOption_QStyleOption_X(option);
    } else {
      QGraphicsWidget::initStyleOption(option);
    }
  }
  
  QSizeF sizeHint(Qt::SizeHint which, const QSizeF & constraint) const override {
    const BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R(which, &(constraint));
    } else {
      return QGraphicsWidget::sizeHint(which, constraint);
    }
  }
  
  void updateGeometry() override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_updateGeometry_.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_updateGeometry_();
    } else {
      QGraphicsWidget::updateGeometry();
    }
  }
  
  QVariant itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant & value) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(change, qvariant_to_crystal(value)));
    } else {
      return QGraphicsWidget::itemChange(change, value);
    }
  }
  
  QVariant propertyChange(const QString & propertyName, const QVariant & value) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R(qstring_to_crystal(propertyName), qvariant_to_crystal(value)));
    } else {
      return QGraphicsWidget::propertyChange(propertyName, value);
    }
  }
  
  bool sceneEvent(QEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_sceneEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsWidget::sceneEvent(event);
    }
  }
  
  bool windowFrameEvent(QEvent * e) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_windowFrameEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_windowFrameEvent_QEvent_X(e);
    } else {
      return QGraphicsWidget::windowFrameEvent(e);
    }
  }
  
  Qt::WindowFrameSection windowFrameSectionAt(const QPointF & pos) const override {
    const BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R(pos);
    } else {
      return QGraphicsWidget::windowFrameSectionAt(pos);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_event_QEvent_X(event);
    } else {
      return QGraphicsWidget::event(event);
    }
  }
  
  void changeEvent(QEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_changeEvent_QEvent_X(event);
    } else {
      QGraphicsWidget::changeEvent(event);
    }
  }
  
  void closeEvent(QCloseEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_closeEvent_QCloseEvent_X(event);
    } else {
      QGraphicsWidget::closeEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      QGraphicsWidget::focusInEvent(event);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QGraphicsWidget_focusNextPrevChild_bool(next);
    } else {
      return QGraphicsWidget::focusNextPrevChild(next);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      QGraphicsWidget::focusOutEvent(event);
    }
  }
  
  void hideEvent(QHideEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_hideEvent_QHideEvent_X(event);
    } else {
      QGraphicsWidget::hideEvent(event);
    }
  }
  
  void moveEvent(QGraphicsSceneMoveEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X(event);
    } else {
      QGraphicsWidget::moveEvent(event);
    }
  }
  
  void polishEvent() override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_polishEvent_.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_polishEvent_();
    } else {
      QGraphicsWidget::polishEvent();
    }
  }
  
  void resizeEvent(QGraphicsSceneResizeEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X(event);
    } else {
      QGraphicsWidget::resizeEvent(event);
    }
  }
  
  void showEvent(QShowEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_showEvent_QShowEvent_X(event);
    } else {
      QGraphicsWidget::showEvent(event);
    }
  }
  
  void hoverMoveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsWidget::hoverMoveEvent(event);
    }
  }
  
  void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsWidget::hoverLeaveEvent(event);
    }
  }
  
  void grabMouseEvent(QEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_grabMouseEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_grabMouseEvent_QEvent_X(event);
    } else {
      QGraphicsWidget::grabMouseEvent(event);
    }
  }
  
  void ungrabMouseEvent(QEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X(event);
    } else {
      QGraphicsWidget::ungrabMouseEvent(event);
    }
  }
  
  void grabKeyboardEvent(QEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X(event);
    } else {
      QGraphicsWidget::grabKeyboardEvent(event);
    }
  }
  
  void ungrabKeyboardEvent(QEvent * event) override {
    BgInherit_GraphicsWidget *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X(event);
    } else {
      QGraphicsWidget::ungrabKeyboardEvent(event);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGraphicsWidget_metaObject_(QGraphicsWidget * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGraphicsWidget_qt_metacast_const_char_X(QGraphicsWidget * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX(QGraphicsWidget * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGraphicsWidget_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsWidget::tr(s));
}

extern "C" CrystalString bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsWidget::tr(s, c));
}

extern "C" CrystalString bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsWidget::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsWidget_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsWidget::trUtf8(s));
}

extern "C" CrystalString bg_QGraphicsWidget_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsWidget::trUtf8(s, c));
}

extern "C" CrystalString bg_QGraphicsWidget_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsWidget::trUtf8(s, c, n));
}

extern "C" QGraphicsWidget * bg_QGraphicsWidget__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsWidget(parent);
}

extern "C" QGraphicsWidget * bg_QGraphicsWidget__CONSTRUCT_QGraphicsItem_X_Qt__WindowFlags(QGraphicsItem * parent, Qt::WindowFlags wFlags) {
  return new (UseGC) BgInherit_GraphicsWidget(parent, wFlags);
}

extern "C" QGraphicsLayout * bg_QGraphicsWidget_layout_(QGraphicsWidget * _self_) {
  return _self_->layout();
}

extern "C" void bg_QGraphicsWidget_setLayout_QGraphicsLayout_X(QGraphicsWidget * _self_, QGraphicsLayout * layout) {
  _self_->setLayout(layout);
}

extern "C" void bg_QGraphicsWidget_adjustSize_(QGraphicsWidget * _self_) {
  _self_->adjustSize();
}

extern "C" Qt::LayoutDirection bg_QGraphicsWidget_layoutDirection_(QGraphicsWidget * _self_) {
  return _self_->layoutDirection();
}

extern "C" void bg_QGraphicsWidget_setLayoutDirection_Qt__LayoutDirection(QGraphicsWidget * _self_, Qt::LayoutDirection direction) {
  _self_->setLayoutDirection(direction);
}

extern "C" void bg_QGraphicsWidget_unsetLayoutDirection_(QGraphicsWidget * _self_) {
  _self_->unsetLayoutDirection();
}

extern "C" QStyle * bg_QGraphicsWidget_style_(QGraphicsWidget * _self_) {
  return _self_->style();
}

extern "C" void bg_QGraphicsWidget_setStyle_QStyle_X(QGraphicsWidget * _self_, QStyle * style) {
  _self_->setStyle(style);
}

extern "C" QFont * bg_QGraphicsWidget_font_(QGraphicsWidget * _self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QGraphicsWidget_setFont_const_QFont_R(QGraphicsWidget * _self_, const QFont & font) {
  _self_->setFont(font);
}

extern "C" QPalette * bg_QGraphicsWidget_palette_(QGraphicsWidget * _self_) {
  return new (UseGC) QPalette (_self_->palette());
}

extern "C" void bg_QGraphicsWidget_setPalette_const_QPalette_R(QGraphicsWidget * _self_, const QPalette & palette) {
  _self_->setPalette(palette);
}

extern "C" bool bg_QGraphicsWidget_autoFillBackground_(QGraphicsWidget * _self_) {
  return _self_->autoFillBackground();
}

extern "C" void bg_QGraphicsWidget_setAutoFillBackground_bool(QGraphicsWidget * _self_, bool enabled) {
  _self_->setAutoFillBackground(enabled);
}

extern "C" void bg_QGraphicsWidget_resize_const_QSizeF_R(QGraphicsWidget * _self_, const QSizeF & size) {
  _self_->resize(size);
}

extern "C" void bg_QGraphicsWidget_resize_qreal_qreal(QGraphicsWidget * _self_, qreal w, qreal h) {
  _self_->resize(w, h);
}

extern "C" QSizeF * bg_QGraphicsWidget_size_(QGraphicsWidget * _self_) {
  return new (UseGC) QSizeF (_self_->size());
}

extern "C" void bg_QGraphicsWidget_setGeometry_const_QRectF_R(QGraphicsWidget * _self_, const QRectF & rect) {
  _self_->setGeometry(rect);
}

extern "C" void bg_QGraphicsWidget_setGeometry_qreal_qreal_qreal_qreal(QGraphicsWidget * _self_, qreal x, qreal y, qreal w, qreal h) {
  _self_->setGeometry(x, y, w, h);
}

extern "C" QRectF * bg_QGraphicsWidget_rect_(QGraphicsWidget * _self_) {
  return new (UseGC) QRectF (_self_->rect());
}

extern "C" void bg_QGraphicsWidget_setContentsMargins_qreal_qreal_qreal_qreal(QGraphicsWidget * _self_, qreal left, qreal top, qreal right, qreal bottom) {
  _self_->setContentsMargins(left, top, right, bottom);
}

extern "C" void bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X(QGraphicsWidget * _self_, qreal * left, qreal * top, qreal * right, qreal * bottom) {
  _self_->getContentsMargins(left, top, right, bottom);
}

extern "C" void bg_QGraphicsWidget_setWindowFrameMargins_qreal_qreal_qreal_qreal(QGraphicsWidget * _self_, qreal left, qreal top, qreal right, qreal bottom) {
  _self_->setWindowFrameMargins(left, top, right, bottom);
}

extern "C" void bg_QGraphicsWidget_getWindowFrameMargins_qreal_X_qreal_X_qreal_X_qreal_X(QGraphicsWidget * _self_, qreal * left, qreal * top, qreal * right, qreal * bottom) {
  _self_->getWindowFrameMargins(left, top, right, bottom);
}

extern "C" void bg_QGraphicsWidget_unsetWindowFrameMargins_(QGraphicsWidget * _self_) {
  _self_->unsetWindowFrameMargins();
}

extern "C" QRectF * bg_QGraphicsWidget_windowFrameGeometry_(QGraphicsWidget * _self_) {
  return new (UseGC) QRectF (_self_->windowFrameGeometry());
}

extern "C" QRectF * bg_QGraphicsWidget_windowFrameRect_(QGraphicsWidget * _self_) {
  return new (UseGC) QRectF (_self_->windowFrameRect());
}

extern "C" Qt::WindowFlags bg_QGraphicsWidget_windowFlags_(QGraphicsWidget * _self_) {
  return _self_->windowFlags();
}

extern "C" Qt::WindowType bg_QGraphicsWidget_windowType_(QGraphicsWidget * _self_) {
  return _self_->windowType();
}

extern "C" void bg_QGraphicsWidget_setWindowFlags_Qt__WindowFlags(QGraphicsWidget * _self_, Qt::WindowFlags wFlags) {
  _self_->setWindowFlags(wFlags);
}

extern "C" bool bg_QGraphicsWidget_isActiveWindow_(QGraphicsWidget * _self_) {
  return _self_->isActiveWindow();
}

extern "C" void bg_QGraphicsWidget_setWindowTitle_const_QString_R(QGraphicsWidget * _self_, const CrystalString title) {
  _self_->setWindowTitle(QString::fromUtf8(title.ptr, title.size));
}

extern "C" CrystalString bg_QGraphicsWidget_windowTitle_(QGraphicsWidget * _self_) {
  return qstring_to_crystal(_self_->windowTitle());
}

extern "C" Qt::FocusPolicy bg_QGraphicsWidget_focusPolicy_(QGraphicsWidget * _self_) {
  return _self_->focusPolicy();
}

extern "C" void bg_QGraphicsWidget_setFocusPolicy_Qt__FocusPolicy(QGraphicsWidget * _self_, Qt::FocusPolicy policy) {
  _self_->setFocusPolicy(policy);
}

extern "C" void bg_QGraphicsWidget_setTabOrder_STATIC_QGraphicsWidget_X_QGraphicsWidget_X(QGraphicsWidget * first, QGraphicsWidget * second) {
  QGraphicsWidget::setTabOrder(first, second);
}

extern "C" QGraphicsWidget * bg_QGraphicsWidget_focusWidget_(QGraphicsWidget * _self_) {
  return _self_->focusWidget();
}

extern "C" int bg_QGraphicsWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(QGraphicsWidget * _self_, const QKeySequence & sequence, Qt::ShortcutContext context) {
  return _self_->grabShortcut(sequence, context);
}

extern "C" void bg_QGraphicsWidget_releaseShortcut_int(QGraphicsWidget * _self_, int id) {
  _self_->releaseShortcut(id);
}

extern "C" void bg_QGraphicsWidget_setShortcutEnabled_int_bool(QGraphicsWidget * _self_, int id, bool enabled) {
  _self_->setShortcutEnabled(id, enabled);
}

extern "C" void bg_QGraphicsWidget_setShortcutAutoRepeat_int_bool(QGraphicsWidget * _self_, int id, bool enabled) {
  _self_->setShortcutAutoRepeat(id, enabled);
}

extern "C" void bg_QGraphicsWidget_addAction_QAction_X(QGraphicsWidget * _self_, QAction * action) {
  _self_->addAction(action);
}

extern "C" void bg_QGraphicsWidget_addActions_QList_QAction_X_(QGraphicsWidget * _self_, Container_QList_QAction_X * actions) {
  _self_->addActions(*(actions));
}

extern "C" void bg_QGraphicsWidget_insertAction_QAction_X_QAction_X(QGraphicsWidget * _self_, QAction * before, QAction * action) {
  _self_->insertAction(before, action);
}

extern "C" void bg_QGraphicsWidget_insertActions_QAction_X_QList_QAction_X_(QGraphicsWidget * _self_, QAction * before, Container_QList_QAction_X * actions) {
  _self_->insertActions(before, *(actions));
}

extern "C" void bg_QGraphicsWidget_removeAction_QAction_X(QGraphicsWidget * _self_, QAction * action) {
  _self_->removeAction(action);
}

extern "C" Container_QList_QAction_X * bg_QGraphicsWidget_actions_(QGraphicsWidget * _self_) {
  return new (UseGC) Container_QList_QAction_X (_self_->actions());
}

extern "C" void bg_QGraphicsWidget_setAttribute_Qt__WidgetAttribute_bool(QGraphicsWidget * _self_, Qt::WidgetAttribute attribute, bool on) {
  _self_->setAttribute(attribute, on);
}

extern "C" bool bg_QGraphicsWidget_testAttribute_Qt__WidgetAttribute(QGraphicsWidget * _self_, Qt::WidgetAttribute attribute) {
  return _self_->testAttribute(attribute);
}

extern "C" int bg_QGraphicsWidget_type_(QGraphicsWidget * _self_) {
  return _self_->type();
}

extern "C" void bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsWidget * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" void bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsWidget * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paintWindowFrame(painter, option, widget);
}

extern "C" QRectF * bg_QGraphicsWidget_boundingRect_(QGraphicsWidget * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath * bg_QGraphicsWidget_shape_(QGraphicsWidget * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" void bg_QGraphicsWidget_geometryChanged_(QGraphicsWidget * _self_) {
  _self_->geometryChanged();
}

extern "C" void bg_QGraphicsWidget_layoutChanged_(QGraphicsWidget * _self_) {
  _self_->layoutChanged();
}

extern "C" bool bg_QGraphicsWidget_close_(QGraphicsWidget * _self_) {
  return _self_->close();
}

extern "C" void bg_QGraphicsWidget_initStyleOption_QStyleOption_X(QGraphicsWidget * _self_, QStyleOption * option) {
  _self_->initStyleOption(option);
}

extern "C" QSizeF * bg_QGraphicsWidget_sizeHint_Qt__SizeHint(QGraphicsWidget * _self_, Qt::SizeHint which) {
  return new (UseGC) QSizeF (_self_->sizeHint(which));
}

extern "C" QSizeF * bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R(QGraphicsWidget * _self_, Qt::SizeHint which, const QSizeF & constraint) {
  return new (UseGC) QSizeF (_self_->sizeHint(which, constraint));
}

extern "C" void bg_QGraphicsWidget_updateGeometry_(QGraphicsWidget * _self_) {
  _self_->updateGeometry();
}

extern "C" CrystalVariant bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(QGraphicsWidget * _self_, QGraphicsItem::GraphicsItemChange change, const CrystalVariant value) {
  return qvariant_to_crystal(_self_->itemChange(change, crystal_to_qvariant(value)));
}

extern "C" CrystalVariant bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R(QGraphicsWidget * _self_, const CrystalString propertyName, const CrystalVariant value) {
  return qvariant_to_crystal(_self_->propertyChange(QString::fromUtf8(propertyName.ptr, propertyName.size), crystal_to_qvariant(value)));
}

extern "C" bool bg_QGraphicsWidget_sceneEvent_QEvent_X(QGraphicsWidget * _self_, QEvent * event) {
  return _self_->sceneEvent(event);
}

extern "C" bool bg_QGraphicsWidget_windowFrameEvent_QEvent_X(QGraphicsWidget * _self_, QEvent * e) {
  return _self_->windowFrameEvent(e);
}

extern "C" Qt::WindowFrameSection bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R(QGraphicsWidget * _self_, const QPointF pos) {
  return _self_->windowFrameSectionAt(pos);
}

extern "C" bool bg_QGraphicsWidget_event_QEvent_X(QGraphicsWidget * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" void bg_QGraphicsWidget_changeEvent_QEvent_X(QGraphicsWidget * _self_, QEvent * event) {
  _self_->changeEvent(event);
}

extern "C" void bg_QGraphicsWidget_closeEvent_QCloseEvent_X(QGraphicsWidget * _self_, QCloseEvent * event) {
  _self_->closeEvent(event);
}

extern "C" void bg_QGraphicsWidget_focusInEvent_QFocusEvent_X(QGraphicsWidget * _self_, QFocusEvent * event) {
  _self_->focusInEvent(event);
}

extern "C" bool bg_QGraphicsWidget_focusNextPrevChild_bool(QGraphicsWidget * _self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X(QGraphicsWidget * _self_, QFocusEvent * event) {
  _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsWidget_hideEvent_QHideEvent_X(QGraphicsWidget * _self_, QHideEvent * event) {
  _self_->hideEvent(event);
}

extern "C" void bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X(QGraphicsWidget * _self_, QGraphicsSceneMoveEvent * event) {
  _self_->moveEvent(event);
}

extern "C" void bg_QGraphicsWidget_polishEvent_(QGraphicsWidget * _self_) {
  _self_->polishEvent();
}

extern "C" void bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X(QGraphicsWidget * _self_, QGraphicsSceneResizeEvent * event) {
  _self_->resizeEvent(event);
}

extern "C" void bg_QGraphicsWidget_showEvent_QShowEvent_X(QGraphicsWidget * _self_, QShowEvent * event) {
  _self_->showEvent(event);
}

extern "C" void bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X(QGraphicsWidget * _self_, QGraphicsSceneHoverEvent * event) {
  _self_->hoverMoveEvent(event);
}

extern "C" void bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(QGraphicsWidget * _self_, QGraphicsSceneHoverEvent * event) {
  _self_->hoverLeaveEvent(event);
}

extern "C" void bg_QGraphicsWidget_grabMouseEvent_QEvent_X(QGraphicsWidget * _self_, QEvent * event) {
  _self_->grabMouseEvent(event);
}

extern "C" void bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X(QGraphicsWidget * _self_, QEvent * event) {
  _self_->ungrabMouseEvent(event);
}

extern "C" void bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X(QGraphicsWidget * _self_, QEvent * event) {
  _self_->grabKeyboardEvent(event);
}

extern "C" void bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X(QGraphicsWidget * _self_, QEvent * event) {
  _self_->ungrabKeyboardEvent(event);
}

extern "C" QGraphicsWidget * bg_QGraphicsWidget__CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X(QGraphicsWidgetPrivate & unnamed_arg_0, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsWidget(unnamed_arg_0, parent);
}

extern "C" QGraphicsWidget * bg_QGraphicsWidget__CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X_Qt__WindowFlags(QGraphicsWidgetPrivate & unnamed_arg_0, QGraphicsItem * parent, Qt::WindowFlags wFlags) {
  return new (UseGC) BgInherit_GraphicsWidget(unnamed_arg_0, parent, wFlags);
}

extern "C" QMetaObject::Connection * bg_QGraphicsWidget_CONNECT_geometryChanged_CrystalProc_void(QGraphicsWidget * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsWidget::*)())&QGraphicsWidget::geometryChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsWidget_CONNECT_layoutChanged_CrystalProc_void(QGraphicsWidget * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsWidget::*)())&QGraphicsWidget::layoutChanged, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_GraphicsWidget_JUMPTABLE_BgJumptable_GraphicsWidget_R(BgInherit_GraphicsWidget * _self_, const BgJumptable_GraphicsWidget & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsTextItem {
  CrystalProc<const QMetaObject *> bg_QGraphicsTextItem_metaObject_;
  CrystalProc<void *, const char *> bg_QGraphicsTextItem_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QRectF &> bg_QGraphicsTextItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsTextItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsTextItem_contains_const_QPointF_R;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsTextItem_opaqueArea_;
  CrystalProc<int> bg_QGraphicsTextItem_type_;
  CrystalProc<bool, QEvent *> bg_QGraphicsTextItem_sceneEvent_QEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneContextMenuEvent *> bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsTextItem_extension_const_QVariant_R;
  CrystalProc<bool, QEvent *> bg_QGraphicsObject_event_QEvent_X;
};
struct BgInherit_GraphicsTextItem : public QGraphicsTextItem {
  using QGraphicsTextItem::QGraphicsTextItem;
  BgJumptable_GraphicsTextItem bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_metaObject_();
    } else {
      return QGraphicsTextItem::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsTextItem::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGraphicsTextItem::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QRectF boundingRect() const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_boundingRect_.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_boundingRect_();
    } else {
      return QGraphicsTextItem::boundingRect();
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_shape_();
    } else {
      return QGraphicsTextItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsTextItem::contains(point);
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsTextItem::paint(painter, option, widget);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsTextItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_opaqueArea_();
    } else {
      return QGraphicsTextItem::opaqueArea();
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_type_();
    } else {
      return QGraphicsTextItem::type();
    }
  }
  
  bool sceneEvent(QEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_sceneEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsTextItem::sceneEvent(event);
    }
  }
  
  void mousePressEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsTextItem::mousePressEvent(event);
    }
  }
  
  void mouseMoveEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsTextItem::mouseMoveEvent(event);
    }
  }
  
  void mouseReleaseEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsTextItem::mouseReleaseEvent(event);
    }
  }
  
  void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsTextItem::mouseDoubleClickEvent(event);
    }
  }
  
  void contextMenuEvent(QGraphicsSceneContextMenuEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      QGraphicsTextItem::contextMenuEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      QGraphicsTextItem::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QGraphicsTextItem::keyReleaseEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X(event);
    } else {
      QGraphicsTextItem::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      QGraphicsTextItem::focusOutEvent(event);
    }
  }
  
  void dragEnterEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsTextItem::dragEnterEvent(event);
    }
  }
  
  void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsTextItem::dragLeaveEvent(event);
    }
  }
  
  void dragMoveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsTextItem::dragMoveEvent(event);
    }
  }
  
  void dropEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsTextItem::dropEvent(event);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      QGraphicsTextItem::inputMethodEvent(event);
    }
  }
  
  void hoverEnterEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsTextItem::hoverEnterEvent(event);
    }
  }
  
  void hoverMoveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsTextItem::hoverMoveEvent(event);
    }
  }
  
  void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsTextItem::hoverLeaveEvent(event);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery query) const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery(query));
    } else {
      return QGraphicsTextItem::inputMethodQuery(query);
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsTextItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsTextItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTextItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsTextItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsTextItem::extension(variant);
    }
  }
  
  bool event(QEvent * ev) override {
    BgInherit_GraphicsTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsObject_event_QEvent_X(ev);
    } else {
      return QGraphicsTextItem::event(ev);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGraphicsTextItem_metaObject_(QGraphicsTextItem * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGraphicsTextItem_qt_metacast_const_char_X(QGraphicsTextItem * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX(QGraphicsTextItem * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGraphicsTextItem_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsTextItem::tr(s));
}

extern "C" CrystalString bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsTextItem::tr(s, c));
}

extern "C" CrystalString bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsTextItem::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsTextItem_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsTextItem::trUtf8(s));
}

extern "C" CrystalString bg_QGraphicsTextItem_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsTextItem::trUtf8(s, c));
}

extern "C" CrystalString bg_QGraphicsTextItem_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsTextItem::trUtf8(s, c, n));
}

extern "C" QGraphicsTextItem * bg_QGraphicsTextItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsTextItem(parent);
}

extern "C" QGraphicsTextItem * bg_QGraphicsTextItem__CONSTRUCT_const_QString_R_QGraphicsItem_X(const CrystalString text, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsTextItem(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" CrystalString bg_QGraphicsTextItem_toHtml_(QGraphicsTextItem * _self_) {
  return qstring_to_crystal(_self_->toHtml());
}

extern "C" void bg_QGraphicsTextItem_setHtml_const_QString_R(QGraphicsTextItem * _self_, const CrystalString html) {
  _self_->setHtml(QString::fromUtf8(html.ptr, html.size));
}

extern "C" CrystalString bg_QGraphicsTextItem_toPlainText_(QGraphicsTextItem * _self_) {
  return qstring_to_crystal(_self_->toPlainText());
}

extern "C" void bg_QGraphicsTextItem_setPlainText_const_QString_R(QGraphicsTextItem * _self_, const CrystalString text) {
  _self_->setPlainText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QFont * bg_QGraphicsTextItem_font_(QGraphicsTextItem * _self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QGraphicsTextItem_setFont_const_QFont_R(QGraphicsTextItem * _self_, const QFont & font) {
  _self_->setFont(font);
}

extern "C" void bg_QGraphicsTextItem_setDefaultTextColor_const_QColor_R(QGraphicsTextItem * _self_, const QColor & c) {
  _self_->setDefaultTextColor(c);
}

extern "C" QColor * bg_QGraphicsTextItem_defaultTextColor_(QGraphicsTextItem * _self_) {
  return new (UseGC) QColor (_self_->defaultTextColor());
}

extern "C" QRectF * bg_QGraphicsTextItem_boundingRect_(QGraphicsTextItem * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath * bg_QGraphicsTextItem_shape_(QGraphicsTextItem * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsTextItem_contains_const_QPointF_R(QGraphicsTextItem * _self_, const QPointF point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsTextItem * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsTextItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QGraphicsTextItem_opaqueArea_(QGraphicsTextItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsTextItem_type_(QGraphicsTextItem * _self_) {
  return _self_->type();
}

extern "C" void bg_QGraphicsTextItem_setTextWidth_qreal(QGraphicsTextItem * _self_, qreal width) {
  _self_->setTextWidth(width);
}

extern "C" qreal bg_QGraphicsTextItem_textWidth_(QGraphicsTextItem * _self_) {
  return _self_->textWidth();
}

extern "C" void bg_QGraphicsTextItem_adjustSize_(QGraphicsTextItem * _self_) {
  _self_->adjustSize();
}

extern "C" void bg_QGraphicsTextItem_setDocument_QTextDocument_X(QGraphicsTextItem * _self_, QTextDocument * document) {
  _self_->setDocument(document);
}

extern "C" QTextDocument * bg_QGraphicsTextItem_document_(QGraphicsTextItem * _self_) {
  return _self_->document();
}

extern "C" void bg_QGraphicsTextItem_setTextInteractionFlags_Qt__TextInteractionFlags(QGraphicsTextItem * _self_, Qt::TextInteractionFlags flags) {
  _self_->setTextInteractionFlags(flags);
}

extern "C" Qt::TextInteractionFlags bg_QGraphicsTextItem_textInteractionFlags_(QGraphicsTextItem * _self_) {
  return _self_->textInteractionFlags();
}

extern "C" void bg_QGraphicsTextItem_setTabChangesFocus_bool(QGraphicsTextItem * _self_, bool b) {
  _self_->setTabChangesFocus(b);
}

extern "C" bool bg_QGraphicsTextItem_tabChangesFocus_(QGraphicsTextItem * _self_) {
  return _self_->tabChangesFocus();
}

extern "C" void bg_QGraphicsTextItem_setOpenExternalLinks_bool(QGraphicsTextItem * _self_, bool open) {
  _self_->setOpenExternalLinks(open);
}

extern "C" bool bg_QGraphicsTextItem_openExternalLinks_(QGraphicsTextItem * _self_) {
  return _self_->openExternalLinks();
}

extern "C" void bg_QGraphicsTextItem_setTextCursor_const_QTextCursor_R(QGraphicsTextItem * _self_, const QTextCursor & cursor) {
  _self_->setTextCursor(cursor);
}

extern "C" QTextCursor * bg_QGraphicsTextItem_textCursor_(QGraphicsTextItem * _self_) {
  return new (UseGC) QTextCursor (_self_->textCursor());
}

extern "C" void bg_QGraphicsTextItem_linkActivated_const_QString_R(QGraphicsTextItem * _self_, const CrystalString unnamed_arg_0) {
  _self_->linkActivated(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QGraphicsTextItem_linkHovered_const_QString_R(QGraphicsTextItem * _self_, const CrystalString unnamed_arg_0) {
  _self_->linkHovered(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" bool bg_QGraphicsTextItem_sceneEvent_QEvent_X(QGraphicsTextItem * _self_, QEvent * event) {
  return _self_->sceneEvent(event);
}

extern "C" void bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mousePressEvent(event);
}

extern "C" void bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneMouseEvent * event) {
  _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneContextMenuEvent * event) {
  _self_->contextMenuEvent(event);
}

extern "C" void bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X(QGraphicsTextItem * _self_, QKeyEvent * event) {
  _self_->keyPressEvent(event);
}

extern "C" void bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X(QGraphicsTextItem * _self_, QKeyEvent * event) {
  _self_->keyReleaseEvent(event);
}

extern "C" void bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X(QGraphicsTextItem * _self_, QFocusEvent * event) {
  _self_->focusInEvent(event);
}

extern "C" void bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X(QGraphicsTextItem * _self_, QFocusEvent * event) {
  _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragEnterEvent(event);
}

extern "C" void bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragLeaveEvent(event);
}

extern "C" void bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dragMoveEvent(event);
}

extern "C" void bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneDragDropEvent * event) {
  _self_->dropEvent(event);
}

extern "C" void bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X(QGraphicsTextItem * _self_, QInputMethodEvent * event) {
  _self_->inputMethodEvent(event);
}

extern "C" void bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneHoverEvent * event) {
  _self_->hoverEnterEvent(event);
}

extern "C" void bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneHoverEvent * event) {
  _self_->hoverMoveEvent(event);
}

extern "C" void bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(QGraphicsTextItem * _self_, QGraphicsSceneHoverEvent * event) {
  _self_->hoverLeaveEvent(event);
}

extern "C" CrystalVariant bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery(QGraphicsTextItem * _self_, Qt::InputMethodQuery query) {
  return qvariant_to_crystal(_self_->inputMethodQuery(query));
}

extern "C" bool bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension(QGraphicsTextItem * _self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" void bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(QGraphicsTextItem * _self_, QGraphicsItem::Extension extension, const CrystalVariant variant) {
  _self_->setExtension(extension, crystal_to_qvariant(variant));
}

extern "C" CrystalVariant bg_QGraphicsTextItem_extension_const_QVariant_R(QGraphicsTextItem * _self_, const CrystalVariant variant) {
  return qvariant_to_crystal(_self_->extension(crystal_to_qvariant(variant)));
}

extern "C" QMetaObject::Connection * bg_QGraphicsTextItem_CONNECT_linkActivated_CrystalProc_void_const_QString_R(QGraphicsTextItem * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsTextItem::*)(const QString &))&QGraphicsTextItem::linkActivated, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" QMetaObject::Connection * bg_QGraphicsTextItem_CONNECT_linkHovered_CrystalProc_void_const_QString_R(QGraphicsTextItem * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsTextItem::*)(const QString &))&QGraphicsTextItem::linkHovered, [_proc_](const QString & unnamed_arg_0){ _proc_(qstring_to_crystal(unnamed_arg_0)); }));
}

extern "C" void bg_BgInherit_GraphicsTextItem_JUMPTABLE_BgJumptable_GraphicsTextItem_R(BgInherit_GraphicsTextItem * _self_, const BgJumptable_GraphicsTextItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsTransform {
  CrystalProc<const QMetaObject *> bg_QGraphicsTransform_metaObject_;
  CrystalProc<void *, const char *> bg_QGraphicsTransform_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QMatrix4x4 *> bg_QGraphicsTransform_applyTo_QMatrix4x4_X;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_GraphicsTransform : public QGraphicsTransform {
  using QGraphicsTransform::QGraphicsTransform;
  BgJumptable_GraphicsTransform bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTransform_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGraphicsTransform_metaObject_();
    } else {
      return QGraphicsTransform::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTransform_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsTransform_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsTransform::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGraphicsTransform::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void applyTo(QMatrix4x4 * matrix) const override {
    const BgInherit_GraphicsTransform *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QGraphicsTransform_applyTo_QMatrix4x4_X.isValid())) {
      _self_->bgJump.bg_QGraphicsTransform_applyTo_QMatrix4x4_X(matrix);
    } else {
      bindgen_fatal_panic("No implementation for pure method QGraphicsTransform::applyTo");
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QGraphicsTransform::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QGraphicsTransform::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QGraphicsTransform::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QGraphicsTransform::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QGraphicsTransform::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QGraphicsTransform::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_GraphicsTransform *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QGraphicsTransform::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGraphicsTransform_metaObject_(QGraphicsTransform * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGraphicsTransform_qt_metacast_const_char_X(QGraphicsTransform * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX(QGraphicsTransform * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGraphicsTransform_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsTransform::tr(s));
}

extern "C" CrystalString bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsTransform::tr(s, c));
}

extern "C" CrystalString bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsTransform::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsTransform_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGraphicsTransform::trUtf8(s));
}

extern "C" CrystalString bg_QGraphicsTransform_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGraphicsTransform::trUtf8(s, c));
}

extern "C" CrystalString bg_QGraphicsTransform_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGraphicsTransform::trUtf8(s, c, n));
}

extern "C" QGraphicsTransform * bg_QGraphicsTransform__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_GraphicsTransform(parent);
}

extern "C" void bg_QGraphicsTransform_applyTo_QMatrix4x4_X(QGraphicsTransform * _self_, QMatrix4x4 * matrix) {
  _self_->applyTo(matrix);
}

extern "C" void bg_QGraphicsTransform_update_(QGraphicsTransform * _self_) {
  _self_->update();
}

extern "C" QGraphicsTransform * bg_QGraphicsTransform__CONSTRUCT_QGraphicsTransformPrivate_R_QObject_X(QGraphicsTransformPrivate & p, QObject * parent) {
  return new (UseGC) BgInherit_GraphicsTransform(p, parent);
}

extern "C" void bg_BgInherit_GraphicsTransform_JUMPTABLE_BgJumptable_GraphicsTransform_R(BgInherit_GraphicsTransform * _self_, const BgJumptable_GraphicsTransform & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_AbstractGraphicsShapeItem {
  CrystalProc<bool, const QGraphicsItem *> bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QAbstractGraphicsShapeItem_opaqueArea_;
  CrystalProc<void, int> bg_QGraphicsItem_advance_int;
  CrystalProc<QRectF &> bg_QGraphicsItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsItem_contains_const_QPointF_R;
  CrystalProc<bool, const QGraphicsItem *, Qt::ItemSelectionMode> bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
  CrystalProc<bool, const QPainterPath *, Qt::ItemSelectionMode> bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<int> bg_QGraphicsItem_type_;
  CrystalProc<bool, QGraphicsItem *, QEvent *> bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QGraphicsItem_sceneEvent_QEvent_X;
  CrystalProc<void, QGraphicsSceneContextMenuEvent *> bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneWheelEvent *> bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<CrystalVariant, QGraphicsItem::GraphicsItemChange, const CrystalVariant> bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsItem_extension_const_QVariant_R;
};
struct BgInherit_AbstractGraphicsShapeItem : public QAbstractGraphicsShapeItem {
  using QAbstractGraphicsShapeItem::QAbstractGraphicsShapeItem;
  BgJumptable_AbstractGraphicsShapeItem bgJump;
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QAbstractGraphicsShapeItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QAbstractGraphicsShapeItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QAbstractGraphicsShapeItem_opaqueArea_();
    } else {
      return QAbstractGraphicsShapeItem::opaqueArea();
    }
  }
  
  void advance(int phase) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_advance_int.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_advance_int(phase);
    } else {
      QAbstractGraphicsShapeItem::advance(phase);
    }
  }
  
  QRectF boundingRect() const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QGraphicsItem_boundingRect_.isValid())) {
      return _self_->bgJump.bg_QGraphicsItem_boundingRect_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QGraphicsItem::boundingRect");
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_shape_();
    } else {
      return QAbstractGraphicsShapeItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_contains_const_QPointF_R(point);
    } else {
      return QAbstractGraphicsShapeItem::contains(point);
    }
  }
  
  bool collidesWithItem(const QGraphicsItem * other, Qt::ItemSelectionMode mode) const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QAbstractGraphicsShapeItem::collidesWithItem(other, mode);
    }
  }
  
  bool collidesWithPath(const QPainterPath & path, Qt::ItemSelectionMode mode) const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(&(path), mode);
    } else {
      return QAbstractGraphicsShapeItem::collidesWithPath(path, mode);
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid())) {
      _self_->bgJump.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      bindgen_fatal_panic("No implementation for pure method QGraphicsItem::paint");
    }
  }
  
  int type() const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_type_();
    } else {
      return QAbstractGraphicsShapeItem::type();
    }
  }
  
  bool sceneEventFilter(QGraphicsItem * watched, QEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QAbstractGraphicsShapeItem::sceneEventFilter(watched, event);
    }
  }
  
  bool sceneEvent(QEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QAbstractGraphicsShapeItem::sceneEvent(event);
    }
  }
  
  void contextMenuEvent(QGraphicsSceneContextMenuEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::contextMenuEvent(event);
    }
  }
  
  void dragEnterEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::dragEnterEvent(event);
    }
  }
  
  void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::dragLeaveEvent(event);
    }
  }
  
  void dragMoveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::dragMoveEvent(event);
    }
  }
  
  void dropEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::dropEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::focusOutEvent(event);
    }
  }
  
  void hoverEnterEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::hoverEnterEvent(event);
    }
  }
  
  void hoverMoveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::hoverMoveEvent(event);
    }
  }
  
  void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::hoverLeaveEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::keyReleaseEvent(event);
    }
  }
  
  void mousePressEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::mousePressEvent(event);
    }
  }
  
  void mouseMoveEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::mouseMoveEvent(event);
    }
  }
  
  void mouseReleaseEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::mouseReleaseEvent(event);
    }
  }
  
  void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::mouseDoubleClickEvent(event);
    }
  }
  
  void wheelEvent(QGraphicsSceneWheelEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::wheelEvent(event);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * event) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      QAbstractGraphicsShapeItem::inputMethodEvent(event);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery query) const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(query));
    } else {
      return QAbstractGraphicsShapeItem::inputMethodQuery(query);
    }
  }
  
  QVariant itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant & value) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(change, qvariant_to_crystal(value)));
    } else {
      return QAbstractGraphicsShapeItem::itemChange(change, value);
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QAbstractGraphicsShapeItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QAbstractGraphicsShapeItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_AbstractGraphicsShapeItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QAbstractGraphicsShapeItem::extension(variant);
    }
  }
  
};
extern "C" QAbstractGraphicsShapeItem * bg_QAbstractGraphicsShapeItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_AbstractGraphicsShapeItem(parent);
}

extern "C" QPen * bg_QAbstractGraphicsShapeItem_pen_(QAbstractGraphicsShapeItem * _self_) {
  return new (UseGC) QPen (_self_->pen());
}

extern "C" void bg_QAbstractGraphicsShapeItem_setPen_const_QPen_R(QAbstractGraphicsShapeItem * _self_, const QPen & pen) {
  _self_->setPen(pen);
}

extern "C" QBrush * bg_QAbstractGraphicsShapeItem_brush_(QAbstractGraphicsShapeItem * _self_) {
  return new (UseGC) QBrush (_self_->brush());
}

extern "C" void bg_QAbstractGraphicsShapeItem_setBrush_const_QBrush_R(QAbstractGraphicsShapeItem * _self_, const QBrush & brush) {
  _self_->setBrush(brush);
}

extern "C" bool bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X(QAbstractGraphicsShapeItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QAbstractGraphicsShapeItem_opaqueArea_(QAbstractGraphicsShapeItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" QAbstractGraphicsShapeItem * bg_QAbstractGraphicsShapeItem__CONSTRUCT_QAbstractGraphicsShapeItemPrivate_R_QGraphicsItem_X(QAbstractGraphicsShapeItemPrivate & dd, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_AbstractGraphicsShapeItem(dd, parent);
}

extern "C" void bg_BgInherit_AbstractGraphicsShapeItem_JUMPTABLE_BgJumptable_AbstractGraphicsShapeItem_R(BgInherit_AbstractGraphicsShapeItem * _self_, const BgJumptable_AbstractGraphicsShapeItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsEllipseItem {
  CrystalProc<QRectF &> bg_QGraphicsEllipseItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsEllipseItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsEllipseItem_contains_const_QPointF_R;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsEllipseItem_opaqueArea_;
  CrystalProc<int> bg_QGraphicsEllipseItem_type_;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsEllipseItem_extension_const_QVariant_R;
};
struct BgInherit_GraphicsEllipseItem : public QGraphicsEllipseItem {
  using QGraphicsEllipseItem::QGraphicsEllipseItem;
  BgJumptable_GraphicsEllipseItem bgJump;
  QRectF boundingRect() const override {
    const BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_boundingRect_.isValid()) {
      return _self_->bgJump.bg_QGraphicsEllipseItem_boundingRect_();
    } else {
      return QGraphicsEllipseItem::boundingRect();
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsEllipseItem_shape_();
    } else {
      return QGraphicsEllipseItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsEllipseItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsEllipseItem::contains(point);
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsEllipseItem::paint(painter, option, widget);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsEllipseItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsEllipseItem_opaqueArea_();
    } else {
      return QGraphicsEllipseItem::opaqueArea();
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsEllipseItem_type_();
    } else {
      return QGraphicsEllipseItem::type();
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsEllipseItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsEllipseItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsEllipseItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsEllipseItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsEllipseItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsEllipseItem::extension(variant);
    }
  }
  
};
extern "C" QGraphicsEllipseItem * bg_QGraphicsEllipseItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsEllipseItem(parent);
}

extern "C" QGraphicsEllipseItem * bg_QGraphicsEllipseItem__CONSTRUCT_const_QRectF_R_QGraphicsItem_X(const QRectF & rect, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsEllipseItem(rect, parent);
}

extern "C" QGraphicsEllipseItem * bg_QGraphicsEllipseItem__CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(qreal x, qreal y, qreal w, qreal h, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsEllipseItem(x, y, w, h, parent);
}

extern "C" QRectF * bg_QGraphicsEllipseItem_rect_(QGraphicsEllipseItem * _self_) {
  return new (UseGC) QRectF (_self_->rect());
}

extern "C" void bg_QGraphicsEllipseItem_setRect_const_QRectF_R(QGraphicsEllipseItem * _self_, const QRectF & rect) {
  _self_->setRect(rect);
}

extern "C" void bg_QGraphicsEllipseItem_setRect_qreal_qreal_qreal_qreal(QGraphicsEllipseItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  _self_->setRect(x, y, w, h);
}

extern "C" int bg_QGraphicsEllipseItem_startAngle_(QGraphicsEllipseItem * _self_) {
  return _self_->startAngle();
}

extern "C" void bg_QGraphicsEllipseItem_setStartAngle_int(QGraphicsEllipseItem * _self_, int angle) {
  _self_->setStartAngle(angle);
}

extern "C" int bg_QGraphicsEllipseItem_spanAngle_(QGraphicsEllipseItem * _self_) {
  return _self_->spanAngle();
}

extern "C" void bg_QGraphicsEllipseItem_setSpanAngle_int(QGraphicsEllipseItem * _self_, int angle) {
  _self_->setSpanAngle(angle);
}

extern "C" QRectF * bg_QGraphicsEllipseItem_boundingRect_(QGraphicsEllipseItem * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath * bg_QGraphicsEllipseItem_shape_(QGraphicsEllipseItem * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsEllipseItem_contains_const_QPointF_R(QGraphicsEllipseItem * _self_, const QPointF point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsEllipseItem * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsEllipseItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QGraphicsEllipseItem_opaqueArea_(QGraphicsEllipseItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsEllipseItem_type_(QGraphicsEllipseItem * _self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension(QGraphicsEllipseItem * _self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" void bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(QGraphicsEllipseItem * _self_, QGraphicsItem::Extension extension, const CrystalVariant variant) {
  _self_->setExtension(extension, crystal_to_qvariant(variant));
}

extern "C" CrystalVariant bg_QGraphicsEllipseItem_extension_const_QVariant_R(QGraphicsEllipseItem * _self_, const CrystalVariant variant) {
  return qvariant_to_crystal(_self_->extension(crystal_to_qvariant(variant)));
}

extern "C" void bg_BgInherit_GraphicsEllipseItem_JUMPTABLE_BgJumptable_GraphicsEllipseItem_R(BgInherit_GraphicsEllipseItem * _self_, const BgJumptable_GraphicsEllipseItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsPathItem {
  CrystalProc<QRectF &> bg_QGraphicsPathItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsPathItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsPathItem_contains_const_QPointF_R;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsPathItem_opaqueArea_;
  CrystalProc<int> bg_QGraphicsPathItem_type_;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsPathItem_extension_const_QVariant_R;
};
struct BgInherit_GraphicsPathItem : public QGraphicsPathItem {
  using QGraphicsPathItem::QGraphicsPathItem;
  BgJumptable_GraphicsPathItem bgJump;
  QRectF boundingRect() const override {
    const BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_boundingRect_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPathItem_boundingRect_();
    } else {
      return QGraphicsPathItem::boundingRect();
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPathItem_shape_();
    } else {
      return QGraphicsPathItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsPathItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsPathItem::contains(point);
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsPathItem::paint(painter, option, widget);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsPathItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPathItem_opaqueArea_();
    } else {
      return QGraphicsPathItem::opaqueArea();
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPathItem_type_();
    } else {
      return QGraphicsPathItem::type();
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsPathItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsPathItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsPathItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPathItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsPathItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsPathItem::extension(variant);
    }
  }
  
};
extern "C" QGraphicsPathItem * bg_QGraphicsPathItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsPathItem(parent);
}

extern "C" QGraphicsPathItem * bg_QGraphicsPathItem__CONSTRUCT_const_QPainterPath_R_QGraphicsItem_X(const QPainterPath & path, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsPathItem(path, parent);
}

extern "C" QPainterPath * bg_QGraphicsPathItem_path_(QGraphicsPathItem * _self_) {
  return new (UseGC) QPainterPath (_self_->path());
}

extern "C" void bg_QGraphicsPathItem_setPath_const_QPainterPath_R(QGraphicsPathItem * _self_, const QPainterPath & path) {
  _self_->setPath(path);
}

extern "C" QRectF * bg_QGraphicsPathItem_boundingRect_(QGraphicsPathItem * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath * bg_QGraphicsPathItem_shape_(QGraphicsPathItem * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsPathItem_contains_const_QPointF_R(QGraphicsPathItem * _self_, const QPointF point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsPathItem * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsPathItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QGraphicsPathItem_opaqueArea_(QGraphicsPathItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsPathItem_type_(QGraphicsPathItem * _self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension(QGraphicsPathItem * _self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" void bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(QGraphicsPathItem * _self_, QGraphicsItem::Extension extension, const CrystalVariant variant) {
  _self_->setExtension(extension, crystal_to_qvariant(variant));
}

extern "C" CrystalVariant bg_QGraphicsPathItem_extension_const_QVariant_R(QGraphicsPathItem * _self_, const CrystalVariant variant) {
  return qvariant_to_crystal(_self_->extension(crystal_to_qvariant(variant)));
}

extern "C" void bg_BgInherit_GraphicsPathItem_JUMPTABLE_BgJumptable_GraphicsPathItem_R(BgInherit_GraphicsPathItem * _self_, const BgJumptable_GraphicsPathItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsPolygonItem {
  CrystalProc<QRectF &> bg_QGraphicsPolygonItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsPolygonItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsPolygonItem_contains_const_QPointF_R;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsPolygonItem_opaqueArea_;
  CrystalProc<int> bg_QGraphicsPolygonItem_type_;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsPolygonItem_extension_const_QVariant_R;
};
struct BgInherit_GraphicsPolygonItem : public QGraphicsPolygonItem {
  using QGraphicsPolygonItem::QGraphicsPolygonItem;
  BgJumptable_GraphicsPolygonItem bgJump;
  QRectF boundingRect() const override {
    const BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_boundingRect_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPolygonItem_boundingRect_();
    } else {
      return QGraphicsPolygonItem::boundingRect();
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPolygonItem_shape_();
    } else {
      return QGraphicsPolygonItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsPolygonItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsPolygonItem::contains(point);
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsPolygonItem::paint(painter, option, widget);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsPolygonItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPolygonItem_opaqueArea_();
    } else {
      return QGraphicsPolygonItem::opaqueArea();
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPolygonItem_type_();
    } else {
      return QGraphicsPolygonItem::type();
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsPolygonItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsPolygonItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsPolygonItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPolygonItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsPolygonItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsPolygonItem::extension(variant);
    }
  }
  
};
extern "C" QGraphicsPolygonItem * bg_QGraphicsPolygonItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsPolygonItem(parent);
}

extern "C" QGraphicsPolygonItem * bg_QGraphicsPolygonItem__CONSTRUCT_const_QPolygonF_R_QGraphicsItem_X(const QPolygonF & polygon, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsPolygonItem(polygon, parent);
}

extern "C" QPolygonF * bg_QGraphicsPolygonItem_polygon_(QGraphicsPolygonItem * _self_) {
  return new (UseGC) QPolygonF (_self_->polygon());
}

extern "C" void bg_QGraphicsPolygonItem_setPolygon_const_QPolygonF_R(QGraphicsPolygonItem * _self_, const QPolygonF & polygon) {
  _self_->setPolygon(polygon);
}

extern "C" Qt::FillRule bg_QGraphicsPolygonItem_fillRule_(QGraphicsPolygonItem * _self_) {
  return _self_->fillRule();
}

extern "C" void bg_QGraphicsPolygonItem_setFillRule_Qt__FillRule(QGraphicsPolygonItem * _self_, Qt::FillRule rule) {
  _self_->setFillRule(rule);
}

extern "C" QRectF * bg_QGraphicsPolygonItem_boundingRect_(QGraphicsPolygonItem * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath * bg_QGraphicsPolygonItem_shape_(QGraphicsPolygonItem * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsPolygonItem_contains_const_QPointF_R(QGraphicsPolygonItem * _self_, const QPointF point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsPolygonItem * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsPolygonItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QGraphicsPolygonItem_opaqueArea_(QGraphicsPolygonItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsPolygonItem_type_(QGraphicsPolygonItem * _self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension(QGraphicsPolygonItem * _self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" void bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(QGraphicsPolygonItem * _self_, QGraphicsItem::Extension extension, const CrystalVariant variant) {
  _self_->setExtension(extension, crystal_to_qvariant(variant));
}

extern "C" CrystalVariant bg_QGraphicsPolygonItem_extension_const_QVariant_R(QGraphicsPolygonItem * _self_, const CrystalVariant variant) {
  return qvariant_to_crystal(_self_->extension(crystal_to_qvariant(variant)));
}

extern "C" void bg_BgInherit_GraphicsPolygonItem_JUMPTABLE_BgJumptable_GraphicsPolygonItem_R(BgInherit_GraphicsPolygonItem * _self_, const BgJumptable_GraphicsPolygonItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsRectItem {
  CrystalProc<QRectF &> bg_QGraphicsRectItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsRectItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsRectItem_contains_const_QPointF_R;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsRectItem_opaqueArea_;
  CrystalProc<int> bg_QGraphicsRectItem_type_;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsRectItem_extension_const_QVariant_R;
};
struct BgInherit_GraphicsRectItem : public QGraphicsRectItem {
  using QGraphicsRectItem::QGraphicsRectItem;
  BgJumptable_GraphicsRectItem bgJump;
  QRectF boundingRect() const override {
    const BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_boundingRect_.isValid()) {
      return _self_->bgJump.bg_QGraphicsRectItem_boundingRect_();
    } else {
      return QGraphicsRectItem::boundingRect();
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsRectItem_shape_();
    } else {
      return QGraphicsRectItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsRectItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsRectItem::contains(point);
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsRectItem::paint(painter, option, widget);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsRectItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsRectItem_opaqueArea_();
    } else {
      return QGraphicsRectItem::opaqueArea();
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsRectItem_type_();
    } else {
      return QGraphicsRectItem::type();
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsRectItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsRectItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsRectItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsRectItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsRectItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsRectItem::extension(variant);
    }
  }
  
};
extern "C" QGraphicsRectItem * bg_QGraphicsRectItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsRectItem(parent);
}

extern "C" QGraphicsRectItem * bg_QGraphicsRectItem__CONSTRUCT_const_QRectF_R_QGraphicsItem_X(const QRectF & rect, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsRectItem(rect, parent);
}

extern "C" QGraphicsRectItem * bg_QGraphicsRectItem__CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(qreal x, qreal y, qreal w, qreal h, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsRectItem(x, y, w, h, parent);
}

extern "C" QRectF * bg_QGraphicsRectItem_rect_(QGraphicsRectItem * _self_) {
  return new (UseGC) QRectF (_self_->rect());
}

extern "C" void bg_QGraphicsRectItem_setRect_const_QRectF_R(QGraphicsRectItem * _self_, const QRectF & rect) {
  _self_->setRect(rect);
}

extern "C" void bg_QGraphicsRectItem_setRect_qreal_qreal_qreal_qreal(QGraphicsRectItem * _self_, qreal x, qreal y, qreal w, qreal h) {
  _self_->setRect(x, y, w, h);
}

extern "C" QRectF * bg_QGraphicsRectItem_boundingRect_(QGraphicsRectItem * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath * bg_QGraphicsRectItem_shape_(QGraphicsRectItem * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsRectItem_contains_const_QPointF_R(QGraphicsRectItem * _self_, const QPointF point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsRectItem * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsRectItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QGraphicsRectItem_opaqueArea_(QGraphicsRectItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsRectItem_type_(QGraphicsRectItem * _self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension(QGraphicsRectItem * _self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" void bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(QGraphicsRectItem * _self_, QGraphicsItem::Extension extension, const CrystalVariant variant) {
  _self_->setExtension(extension, crystal_to_qvariant(variant));
}

extern "C" CrystalVariant bg_QGraphicsRectItem_extension_const_QVariant_R(QGraphicsRectItem * _self_, const CrystalVariant variant) {
  return qvariant_to_crystal(_self_->extension(crystal_to_qvariant(variant)));
}

extern "C" void bg_BgInherit_GraphicsRectItem_JUMPTABLE_BgJumptable_GraphicsRectItem_R(BgInherit_GraphicsRectItem * _self_, const BgJumptable_GraphicsRectItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsSimpleTextItem {
  CrystalProc<QRectF &> bg_QGraphicsSimpleTextItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsSimpleTextItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsSimpleTextItem_contains_const_QPointF_R;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsSimpleTextItem_opaqueArea_;
  CrystalProc<int> bg_QGraphicsSimpleTextItem_type_;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsSimpleTextItem_extension_const_QVariant_R;
};
struct BgInherit_GraphicsSimpleTextItem : public QGraphicsSimpleTextItem {
  using QGraphicsSimpleTextItem::QGraphicsSimpleTextItem;
  BgJumptable_GraphicsSimpleTextItem bgJump;
  QRectF boundingRect() const override {
    const BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_boundingRect_.isValid()) {
      return _self_->bgJump.bg_QGraphicsSimpleTextItem_boundingRect_();
    } else {
      return QGraphicsSimpleTextItem::boundingRect();
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsSimpleTextItem_shape_();
    } else {
      return QGraphicsSimpleTextItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsSimpleTextItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsSimpleTextItem::contains(point);
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsSimpleTextItem::paint(painter, option, widget);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsSimpleTextItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsSimpleTextItem_opaqueArea_();
    } else {
      return QGraphicsSimpleTextItem::opaqueArea();
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsSimpleTextItem_type_();
    } else {
      return QGraphicsSimpleTextItem::type();
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsSimpleTextItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsSimpleTextItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsSimpleTextItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsSimpleTextItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsSimpleTextItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsSimpleTextItem::extension(variant);
    }
  }
  
};
extern "C" QGraphicsSimpleTextItem * bg_QGraphicsSimpleTextItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsSimpleTextItem(parent);
}

extern "C" QGraphicsSimpleTextItem * bg_QGraphicsSimpleTextItem__CONSTRUCT_const_QString_R_QGraphicsItem_X(const CrystalString text, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsSimpleTextItem(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" void bg_QGraphicsSimpleTextItem_setText_const_QString_R(QGraphicsSimpleTextItem * _self_, const CrystalString text) {
  _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QGraphicsSimpleTextItem_text_(QGraphicsSimpleTextItem * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" void bg_QGraphicsSimpleTextItem_setFont_const_QFont_R(QGraphicsSimpleTextItem * _self_, const QFont & font) {
  _self_->setFont(font);
}

extern "C" QFont * bg_QGraphicsSimpleTextItem_font_(QGraphicsSimpleTextItem * _self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" QRectF * bg_QGraphicsSimpleTextItem_boundingRect_(QGraphicsSimpleTextItem * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath * bg_QGraphicsSimpleTextItem_shape_(QGraphicsSimpleTextItem * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsSimpleTextItem_contains_const_QPointF_R(QGraphicsSimpleTextItem * _self_, const QPointF point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsSimpleTextItem * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsSimpleTextItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QGraphicsSimpleTextItem_opaqueArea_(QGraphicsSimpleTextItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsSimpleTextItem_type_(QGraphicsSimpleTextItem * _self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension(QGraphicsSimpleTextItem * _self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" void bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(QGraphicsSimpleTextItem * _self_, QGraphicsItem::Extension extension, const CrystalVariant variant) {
  _self_->setExtension(extension, crystal_to_qvariant(variant));
}

extern "C" CrystalVariant bg_QGraphicsSimpleTextItem_extension_const_QVariant_R(QGraphicsSimpleTextItem * _self_, const CrystalVariant variant) {
  return qvariant_to_crystal(_self_->extension(crystal_to_qvariant(variant)));
}

extern "C" void bg_BgInherit_GraphicsSimpleTextItem_JUMPTABLE_BgJumptable_GraphicsSimpleTextItem_R(BgInherit_GraphicsSimpleTextItem * _self_, const BgJumptable_GraphicsSimpleTextItem & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_GraphicsPixmapItem {
  CrystalProc<QRectF &> bg_QGraphicsPixmapItem_boundingRect_;
  CrystalProc<QPainterPath &> bg_QGraphicsPixmapItem_shape_;
  CrystalProc<bool, const QPointF> bg_QGraphicsPixmapItem_contains_const_QPointF_R;
  CrystalProc<void, QPainter *, const QStyleOptionGraphicsItem *, QWidget *> bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
  CrystalProc<bool, const QGraphicsItem *> bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X;
  CrystalProc<QPainterPath &> bg_QGraphicsPixmapItem_opaqueArea_;
  CrystalProc<int> bg_QGraphicsPixmapItem_type_;
  CrystalProc<bool, QGraphicsItem::Extension> bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension;
  CrystalProc<void, QGraphicsItem::Extension, const CrystalVariant> bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R;
  CrystalProc<CrystalVariant, const CrystalVariant> bg_QGraphicsPixmapItem_extension_const_QVariant_R;
  CrystalProc<void, int> bg_QGraphicsItem_advance_int;
  CrystalProc<bool, const QGraphicsItem *, Qt::ItemSelectionMode> bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
  CrystalProc<bool, const QPainterPath *, Qt::ItemSelectionMode> bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
  CrystalProc<bool, QGraphicsItem *, QEvent *> bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
  CrystalProc<bool, QEvent *> bg_QGraphicsItem_sceneEvent_QEvent_X;
  CrystalProc<void, QGraphicsSceneContextMenuEvent *> bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QGraphicsSceneDragDropEvent *> bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QGraphicsSceneHoverEvent *> bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneMouseEvent *> bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
  CrystalProc<void, QGraphicsSceneWheelEvent *> bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
  CrystalProc<void, QInputMethodEvent *> bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<CrystalVariant, QGraphicsItem::GraphicsItemChange, const CrystalVariant> bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R;
};
struct BgInherit_GraphicsPixmapItem : public QGraphicsPixmapItem {
  using QGraphicsPixmapItem::QGraphicsPixmapItem;
  BgJumptable_GraphicsPixmapItem bgJump;
  QRectF boundingRect() const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_boundingRect_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPixmapItem_boundingRect_();
    } else {
      return QGraphicsPixmapItem::boundingRect();
    }
  }
  
  QPainterPath shape() const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_shape_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPixmapItem_shape_();
    } else {
      return QGraphicsPixmapItem::shape();
    }
  }
  
  bool contains(const QPointF & point) const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_contains_const_QPointF_R.isValid()) {
      return _self_->bgJump.bg_QGraphicsPixmapItem_contains_const_QPointF_R(point);
    } else {
      return QGraphicsPixmapItem::contains(point);
    }
  }
  
  void paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      _self_->bgJump.bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      QGraphicsPixmapItem::paint(painter, option, widget);
    }
  }
  
  bool isObscuredBy(const QGraphicsItem * item) const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsPixmapItem::isObscuredBy(item);
    }
  }
  
  QPainterPath opaqueArea() const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_opaqueArea_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPixmapItem_opaqueArea_();
    } else {
      return QGraphicsPixmapItem::opaqueArea();
    }
  }
  
  int type() const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_type_.isValid()) {
      return _self_->bgJump.bg_QGraphicsPixmapItem_type_();
    } else {
      return QGraphicsPixmapItem::type();
    }
  }
  
  bool supportsExtension(QGraphicsItem::Extension extension) const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return _self_->bgJump.bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsPixmapItem::supportsExtension(extension);
    }
  }
  
  void setExtension(QGraphicsItem::Extension extension, const QVariant & variant) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R.isValid()) {
      _self_->bgJump.bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(extension, qvariant_to_crystal(variant));
    } else {
      QGraphicsPixmapItem::setExtension(extension, variant);
    }
  }
  
  QVariant extension(const QVariant & variant) const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsPixmapItem_extension_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsPixmapItem_extension_const_QVariant_R(qvariant_to_crystal(variant)));
    } else {
      return QGraphicsPixmapItem::extension(variant);
    }
  }
  
  void advance(int phase) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_advance_int.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_advance_int(phase);
    } else {
      QGraphicsPixmapItem::advance(phase);
    }
  }
  
  bool collidesWithItem(const QGraphicsItem * other, Qt::ItemSelectionMode mode) const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsPixmapItem::collidesWithItem(other, mode);
    }
  }
  
  bool collidesWithPath(const QPainterPath & path, Qt::ItemSelectionMode mode) const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(&(path), mode);
    } else {
      return QGraphicsPixmapItem::collidesWithPath(path, mode);
    }
  }
  
  bool sceneEventFilter(QGraphicsItem * watched, QEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsPixmapItem::sceneEventFilter(watched, event);
    }
  }
  
  bool sceneEvent(QEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsPixmapItem::sceneEvent(event);
    }
  }
  
  void contextMenuEvent(QGraphicsSceneContextMenuEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      QGraphicsPixmapItem::contextMenuEvent(event);
    }
  }
  
  void dragEnterEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsPixmapItem::dragEnterEvent(event);
    }
  }
  
  void dragLeaveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsPixmapItem::dragLeaveEvent(event);
    }
  }
  
  void dragMoveEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsPixmapItem::dragMoveEvent(event);
    }
  }
  
  void dropEvent(QGraphicsSceneDragDropEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      QGraphicsPixmapItem::dropEvent(event);
    }
  }
  
  void focusInEvent(QFocusEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      QGraphicsPixmapItem::focusInEvent(event);
    }
  }
  
  void focusOutEvent(QFocusEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      QGraphicsPixmapItem::focusOutEvent(event);
    }
  }
  
  void hoverEnterEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsPixmapItem::hoverEnterEvent(event);
    }
  }
  
  void hoverMoveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsPixmapItem::hoverMoveEvent(event);
    }
  }
  
  void hoverLeaveEvent(QGraphicsSceneHoverEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      QGraphicsPixmapItem::hoverLeaveEvent(event);
    }
  }
  
  void keyPressEvent(QKeyEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      QGraphicsPixmapItem::keyPressEvent(event);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      QGraphicsPixmapItem::keyReleaseEvent(event);
    }
  }
  
  void mousePressEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsPixmapItem::mousePressEvent(event);
    }
  }
  
  void mouseMoveEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsPixmapItem::mouseMoveEvent(event);
    }
  }
  
  void mouseReleaseEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsPixmapItem::mouseReleaseEvent(event);
    }
  }
  
  void mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      QGraphicsPixmapItem::mouseDoubleClickEvent(event);
    }
  }
  
  void wheelEvent(QGraphicsSceneWheelEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      QGraphicsPixmapItem::wheelEvent(event);
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * event) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      QGraphicsPixmapItem::inputMethodEvent(event);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery query) const override {
    const BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(query));
    } else {
      return QGraphicsPixmapItem::inputMethodQuery(query);
    }
  }
  
  QVariant itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant & value) override {
    BgInherit_GraphicsPixmapItem *_self_ = this;
    if (_self_->bgJump.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(change, qvariant_to_crystal(value)));
    } else {
      return QGraphicsPixmapItem::itemChange(change, value);
    }
  }
  
};
extern "C" QGraphicsPixmapItem * bg_QGraphicsPixmapItem__CONSTRUCT_QGraphicsItem_X(QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsPixmapItem(parent);
}

extern "C" QGraphicsPixmapItem * bg_QGraphicsPixmapItem__CONSTRUCT_const_QPixmap_R_QGraphicsItem_X(const QPixmap & pixmap, QGraphicsItem * parent) {
  return new (UseGC) BgInherit_GraphicsPixmapItem(pixmap, parent);
}

extern "C" QPixmap * bg_QGraphicsPixmapItem_pixmap_(QGraphicsPixmapItem * _self_) {
  return new (UseGC) QPixmap (_self_->pixmap());
}

extern "C" void bg_QGraphicsPixmapItem_setPixmap_const_QPixmap_R(QGraphicsPixmapItem * _self_, const QPixmap & pixmap) {
  _self_->setPixmap(pixmap);
}

extern "C" Qt::TransformationMode bg_QGraphicsPixmapItem_transformationMode_(QGraphicsPixmapItem * _self_) {
  return _self_->transformationMode();
}

extern "C" void bg_QGraphicsPixmapItem_setTransformationMode_Qt__TransformationMode(QGraphicsPixmapItem * _self_, Qt::TransformationMode mode) {
  _self_->setTransformationMode(mode);
}

extern "C" QPointF bg_QGraphicsPixmapItem_offset_(QGraphicsPixmapItem * _self_) {
  return _self_->offset();
}

extern "C" void bg_QGraphicsPixmapItem_setOffset_const_QPointF_R(QGraphicsPixmapItem * _self_, const QPointF offset) {
  _self_->setOffset(offset);
}

extern "C" void bg_QGraphicsPixmapItem_setOffset_qreal_qreal(QGraphicsPixmapItem * _self_, qreal x, qreal y) {
  _self_->setOffset(x, y);
}

extern "C" QRectF * bg_QGraphicsPixmapItem_boundingRect_(QGraphicsPixmapItem * _self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath * bg_QGraphicsPixmapItem_shape_(QGraphicsPixmapItem * _self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsPixmapItem_contains_const_QPointF_R(QGraphicsPixmapItem * _self_, const QPointF point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsPixmapItem * _self_, QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
  _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsPixmapItem * _self_, const QGraphicsItem * item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath * bg_QGraphicsPixmapItem_opaqueArea_(QGraphicsPixmapItem * _self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsPixmapItem_type_(QGraphicsPixmapItem * _self_) {
  return _self_->type();
}

extern "C" QGraphicsPixmapItem::ShapeMode bg_QGraphicsPixmapItem_shapeMode_(QGraphicsPixmapItem * _self_) {
  return _self_->shapeMode();
}

extern "C" void bg_QGraphicsPixmapItem_setShapeMode_QGraphicsPixmapItem__ShapeMode(QGraphicsPixmapItem * _self_, QGraphicsPixmapItem::ShapeMode mode) {
  _self_->setShapeMode(mode);
}

extern "C" bool bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension(QGraphicsPixmapItem * _self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" void bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(QGraphicsPixmapItem * _self_, QGraphicsItem::Extension extension, const CrystalVariant variant) {
  _self_->setExtension(extension, crystal_to_qvariant(variant));
}

extern "C" CrystalVariant bg_QGraphicsPixmapItem_extension_const_QVariant_R(QGraphicsPixmapItem * _self_, const CrystalVariant variant) {
  return qvariant_to_crystal(_self_->extension(crystal_to_qvariant(variant)));
}

extern "C" void bg_BgInherit_GraphicsPixmapItem_JUMPTABLE_BgJumptable_GraphicsPixmapItem_R(BgInherit_GraphicsPixmapItem * _self_, const BgJumptable_GraphicsPixmapItem & table) {
  _self_->bgJump = (table);
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_() {
  return new (UseGC) QBrush();
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_Qt__BrushStyle(Qt::BrushStyle bs) {
  return new (UseGC) QBrush(bs);
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_const_QColor_R_Qt__BrushStyle(const QColor & color, Qt::BrushStyle bs) {
  return new (UseGC) QBrush(color, bs);
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_Qt__GlobalColor_Qt__BrushStyle(Qt::GlobalColor color, Qt::BrushStyle bs) {
  return new (UseGC) QBrush(color, bs);
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_const_QColor_R_const_QPixmap_R(const QColor & color, const QPixmap & pixmap) {
  return new (UseGC) QBrush(color, pixmap);
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_Qt__GlobalColor_const_QPixmap_R(Qt::GlobalColor color, const QPixmap & pixmap) {
  return new (UseGC) QBrush(color, pixmap);
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_const_QPixmap_R(const QPixmap & pixmap) {
  return new (UseGC) QBrush(pixmap);
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_const_QImage_R(const QImage & image) {
  return new (UseGC) QBrush(image);
}

extern "C" QBrush * bg_QBrush__CONSTRUCT_const_QGradient_R(const QGradient & gradient) {
  return new (UseGC) QBrush(gradient);
}

extern "C" void bg_QBrush_swap_QBrush_R(QBrush * _self_, QBrush & other) {
  _self_->swap(other);
}

extern "C" Qt::BrushStyle bg_QBrush_style_(QBrush * _self_) {
  return _self_->style();
}

extern "C" void bg_QBrush_setStyle_Qt__BrushStyle(QBrush * _self_, Qt::BrushStyle unnamed_arg_0) {
  _self_->setStyle(unnamed_arg_0);
}

extern "C" const QMatrix * bg_QBrush_matrix_(QBrush * _self_) {
  return &(_self_->matrix());
}

extern "C" void bg_QBrush_setMatrix_const_QMatrix_R(QBrush * _self_, const QMatrix & mat) {
  _self_->setMatrix(mat);
}

extern "C" QTransform * bg_QBrush_transform_(QBrush * _self_) {
  return new (UseGC) QTransform (_self_->transform());
}

extern "C" void bg_QBrush_setTransform_const_QTransform_R(QBrush * _self_, const QTransform & unnamed_arg_0) {
  _self_->setTransform(unnamed_arg_0);
}

extern "C" QPixmap * bg_QBrush_texture_(QBrush * _self_) {
  return new (UseGC) QPixmap (_self_->texture());
}

extern "C" void bg_QBrush_setTexture_const_QPixmap_R(QBrush * _self_, const QPixmap & pixmap) {
  _self_->setTexture(pixmap);
}

extern "C" QImage * bg_QBrush_textureImage_(QBrush * _self_) {
  return new (UseGC) QImage (_self_->textureImage());
}

extern "C" void bg_QBrush_setTextureImage_const_QImage_R(QBrush * _self_, const QImage & image) {
  _self_->setTextureImage(image);
}

extern "C" const QColor * bg_QBrush_color_(QBrush * _self_) {
  return &(_self_->color());
}

extern "C" void bg_QBrush_setColor_const_QColor_R(QBrush * _self_, const QColor & color) {
  _self_->setColor(color);
}

extern "C" void bg_QBrush_setColor_Qt__GlobalColor(QBrush * _self_, Qt::GlobalColor color) {
  _self_->setColor(color);
}

extern "C" const QGradient * bg_QBrush_gradient_(QBrush * _self_) {
  return _self_->gradient();
}

extern "C" bool bg_QBrush_isOpaque_(QBrush * _self_) {
  return _self_->isOpaque();
}

extern "C" bool bg_QBrush_isDetached_(QBrush * _self_) {
  return _self_->isDetached();
}

extern "C" QColor * bg_QColor__CONSTRUCT_() {
  return new (UseGC) QColor();
}

extern "C" QColor * bg_QColor__CONSTRUCT_Qt__GlobalColor(Qt::GlobalColor color) {
  return new (UseGC) QColor(color);
}

extern "C" QColor * bg_QColor__CONSTRUCT_int_int_int_int(int r, int g, int b, int a) {
  return new (UseGC) QColor(r, g, b, a);
}

extern "C" QColor * bg_QColor__CONSTRUCT_QRgb(QRgb rgb) {
  return new (UseGC) QColor(rgb);
}

extern "C" QColor * bg_QColor__CONSTRUCT_QRgba64(QRgba64 & rgba64) {
  return new (UseGC) QColor(rgba64);
}

extern "C" QColor * bg_QColor__CONSTRUCT_const_QString_R(const CrystalString name) {
  return new (UseGC) QColor(QString::fromUtf8(name.ptr, name.size));
}

extern "C" QColor * bg_QColor__CONSTRUCT_const_char_X(const char * name) {
  return new (UseGC) QColor(name);
}

extern "C" QColor * bg_QColor__CONSTRUCT_QColor__Spec(QColor::Spec spec) {
  return new (UseGC) QColor(spec);
}

extern "C" bool bg_QColor_isValid_(QColor * _self_) {
  return _self_->isValid();
}

extern "C" CrystalString bg_QColor_name_(QColor * _self_) {
  return qstring_to_crystal(_self_->name());
}

extern "C" CrystalString bg_QColor_name_QColor__NameFormat(QColor * _self_, QColor::NameFormat format) {
  return qstring_to_crystal(_self_->name(format));
}

extern "C" void bg_QColor_setNamedColor_const_QString_R(QColor * _self_, const CrystalString name) {
  _self_->setNamedColor(QString::fromUtf8(name.ptr, name.size));
}

extern "C" QStringList * bg_QColor_colorNames_STATIC_() {
  return new (UseGC) QStringList (QColor::colorNames());
}

extern "C" QColor::Spec bg_QColor_spec_(QColor * _self_) {
  return _self_->spec();
}

extern "C" int bg_QColor_alpha_(QColor * _self_) {
  return _self_->alpha();
}

extern "C" void bg_QColor_setAlpha_int(QColor * _self_, int alpha) {
  _self_->setAlpha(alpha);
}

extern "C" qreal bg_QColor_alphaF_(QColor * _self_) {
  return _self_->alphaF();
}

extern "C" void bg_QColor_setAlphaF_qreal(QColor * _self_, qreal alpha) {
  _self_->setAlphaF(alpha);
}

extern "C" int bg_QColor_red_(QColor * _self_) {
  return _self_->red();
}

extern "C" int bg_QColor_green_(QColor * _self_) {
  return _self_->green();
}

extern "C" int bg_QColor_blue_(QColor * _self_) {
  return _self_->blue();
}

extern "C" void bg_QColor_setRed_int(QColor * _self_, int red) {
  _self_->setRed(red);
}

extern "C" void bg_QColor_setGreen_int(QColor * _self_, int green) {
  _self_->setGreen(green);
}

extern "C" void bg_QColor_setBlue_int(QColor * _self_, int blue) {
  _self_->setBlue(blue);
}

extern "C" qreal bg_QColor_redF_(QColor * _self_) {
  return _self_->redF();
}

extern "C" qreal bg_QColor_greenF_(QColor * _self_) {
  return _self_->greenF();
}

extern "C" qreal bg_QColor_blueF_(QColor * _self_) {
  return _self_->blueF();
}

extern "C" void bg_QColor_setRedF_qreal(QColor * _self_, qreal red) {
  _self_->setRedF(red);
}

extern "C" void bg_QColor_setGreenF_qreal(QColor * _self_, qreal green) {
  _self_->setGreenF(green);
}

extern "C" void bg_QColor_setBlueF_qreal(QColor * _self_, qreal blue) {
  _self_->setBlueF(blue);
}

extern "C" void bg_QColor_getRgb_int_X_int_X_int_X_int_X(QColor * _self_, int * r, int * g, int * b, int * a) {
  _self_->getRgb(r, g, b, a);
}

extern "C" void bg_QColor_setRgb_int_int_int_int(QColor * _self_, int r, int g, int b, int a) {
  _self_->setRgb(r, g, b, a);
}

extern "C" void bg_QColor_getRgbF_qreal_X_qreal_X_qreal_X_qreal_X(QColor * _self_, qreal * r, qreal * g, qreal * b, qreal * a) {
  _self_->getRgbF(r, g, b, a);
}

extern "C" void bg_QColor_setRgbF_qreal_qreal_qreal_qreal(QColor * _self_, qreal r, qreal g, qreal b, qreal a) {
  _self_->setRgbF(r, g, b, a);
}

extern "C" QRgb bg_QColor_rgba_(QColor * _self_) {
  return _self_->rgba();
}

extern "C" void bg_QColor_setRgba_QRgb(QColor * _self_, QRgb rgba) {
  _self_->setRgba(rgba);
}

extern "C" QRgba64 * bg_QColor_rgba64_(QColor * _self_) {
  return new (UseGC) QRgba64 (_self_->rgba64());
}

extern "C" void bg_QColor_setRgba64_QRgba64(QColor * _self_, QRgba64 & rgba) {
  _self_->setRgba64(rgba);
}

extern "C" QRgb bg_QColor_rgb_(QColor * _self_) {
  return _self_->rgb();
}

extern "C" void bg_QColor_setRgb_QRgb(QColor * _self_, QRgb rgb) {
  _self_->setRgb(rgb);
}

extern "C" int bg_QColor_hue_(QColor * _self_) {
  return _self_->hue();
}

extern "C" int bg_QColor_saturation_(QColor * _self_) {
  return _self_->saturation();
}

extern "C" int bg_QColor_hsvHue_(QColor * _self_) {
  return _self_->hsvHue();
}

extern "C" int bg_QColor_hsvSaturation_(QColor * _self_) {
  return _self_->hsvSaturation();
}

extern "C" int bg_QColor_value_(QColor * _self_) {
  return _self_->value();
}

extern "C" qreal bg_QColor_hueF_(QColor * _self_) {
  return _self_->hueF();
}

extern "C" qreal bg_QColor_saturationF_(QColor * _self_) {
  return _self_->saturationF();
}

extern "C" qreal bg_QColor_hsvHueF_(QColor * _self_) {
  return _self_->hsvHueF();
}

extern "C" qreal bg_QColor_hsvSaturationF_(QColor * _self_) {
  return _self_->hsvSaturationF();
}

extern "C" qreal bg_QColor_valueF_(QColor * _self_) {
  return _self_->valueF();
}

extern "C" void bg_QColor_getHsv_int_X_int_X_int_X_int_X(QColor * _self_, int * h, int * s, int * v, int * a) {
  _self_->getHsv(h, s, v, a);
}

extern "C" void bg_QColor_setHsv_int_int_int_int(QColor * _self_, int h, int s, int v, int a) {
  _self_->setHsv(h, s, v, a);
}

extern "C" void bg_QColor_getHsvF_qreal_X_qreal_X_qreal_X_qreal_X(QColor * _self_, qreal * h, qreal * s, qreal * v, qreal * a) {
  _self_->getHsvF(h, s, v, a);
}

extern "C" void bg_QColor_setHsvF_qreal_qreal_qreal_qreal(QColor * _self_, qreal h, qreal s, qreal v, qreal a) {
  _self_->setHsvF(h, s, v, a);
}

extern "C" int bg_QColor_cyan_(QColor * _self_) {
  return _self_->cyan();
}

extern "C" int bg_QColor_magenta_(QColor * _self_) {
  return _self_->magenta();
}

extern "C" int bg_QColor_yellow_(QColor * _self_) {
  return _self_->yellow();
}

extern "C" int bg_QColor_black_(QColor * _self_) {
  return _self_->black();
}

extern "C" qreal bg_QColor_cyanF_(QColor * _self_) {
  return _self_->cyanF();
}

extern "C" qreal bg_QColor_magentaF_(QColor * _self_) {
  return _self_->magentaF();
}

extern "C" qreal bg_QColor_yellowF_(QColor * _self_) {
  return _self_->yellowF();
}

extern "C" qreal bg_QColor_blackF_(QColor * _self_) {
  return _self_->blackF();
}

extern "C" void bg_QColor_getCmyk_int_X_int_X_int_X_int_X_int_X(QColor * _self_, int * c, int * m, int * y, int * k, int * a) {
  _self_->getCmyk(c, m, y, k, a);
}

extern "C" void bg_QColor_setCmyk_int_int_int_int_int(QColor * _self_, int c, int m, int y, int k, int a) {
  _self_->setCmyk(c, m, y, k, a);
}

extern "C" void bg_QColor_getCmykF_qreal_X_qreal_X_qreal_X_qreal_X_qreal_X(QColor * _self_, qreal * c, qreal * m, qreal * y, qreal * k, qreal * a) {
  _self_->getCmykF(c, m, y, k, a);
}

extern "C" void bg_QColor_setCmykF_qreal_qreal_qreal_qreal_qreal(QColor * _self_, qreal c, qreal m, qreal y, qreal k, qreal a) {
  _self_->setCmykF(c, m, y, k, a);
}

extern "C" int bg_QColor_hslHue_(QColor * _self_) {
  return _self_->hslHue();
}

extern "C" int bg_QColor_hslSaturation_(QColor * _self_) {
  return _self_->hslSaturation();
}

extern "C" int bg_QColor_lightness_(QColor * _self_) {
  return _self_->lightness();
}

extern "C" qreal bg_QColor_hslHueF_(QColor * _self_) {
  return _self_->hslHueF();
}

extern "C" qreal bg_QColor_hslSaturationF_(QColor * _self_) {
  return _self_->hslSaturationF();
}

extern "C" qreal bg_QColor_lightnessF_(QColor * _self_) {
  return _self_->lightnessF();
}

extern "C" void bg_QColor_getHsl_int_X_int_X_int_X_int_X(QColor * _self_, int * h, int * s, int * l, int * a) {
  _self_->getHsl(h, s, l, a);
}

extern "C" void bg_QColor_setHsl_int_int_int_int(QColor * _self_, int h, int s, int l, int a) {
  _self_->setHsl(h, s, l, a);
}

extern "C" void bg_QColor_getHslF_qreal_X_qreal_X_qreal_X_qreal_X(QColor * _self_, qreal * h, qreal * s, qreal * l, qreal * a) {
  _self_->getHslF(h, s, l, a);
}

extern "C" void bg_QColor_setHslF_qreal_qreal_qreal_qreal(QColor * _self_, qreal h, qreal s, qreal l, qreal a) {
  _self_->setHslF(h, s, l, a);
}

extern "C" QColor * bg_QColor_toRgb_(QColor * _self_) {
  return new (UseGC) QColor (_self_->toRgb());
}

extern "C" QColor * bg_QColor_toHsv_(QColor * _self_) {
  return new (UseGC) QColor (_self_->toHsv());
}

extern "C" QColor * bg_QColor_toCmyk_(QColor * _self_) {
  return new (UseGC) QColor (_self_->toCmyk());
}

extern "C" QColor * bg_QColor_toHsl_(QColor * _self_) {
  return new (UseGC) QColor (_self_->toHsl());
}

extern "C" QColor * bg_QColor_convertTo_QColor__Spec(QColor * _self_, QColor::Spec colorSpec) {
  return new (UseGC) QColor (_self_->convertTo(colorSpec));
}

extern "C" QColor * bg_QColor_fromRgb_STATIC_QRgb(QRgb rgb) {
  return new (UseGC) QColor (QColor::fromRgb(rgb));
}

extern "C" QColor * bg_QColor_fromRgba_STATIC_QRgb(QRgb rgba) {
  return new (UseGC) QColor (QColor::fromRgba(rgba));
}

extern "C" QColor * bg_QColor_fromRgb_STATIC_int_int_int_int(int r, int g, int b, int a) {
  return new (UseGC) QColor (QColor::fromRgb(r, g, b, a));
}

extern "C" QColor * bg_QColor_fromRgbF_STATIC_qreal_qreal_qreal_qreal(qreal r, qreal g, qreal b, qreal a) {
  return new (UseGC) QColor (QColor::fromRgbF(r, g, b, a));
}

extern "C" QColor * bg_QColor_fromRgba64_STATIC_ushort_ushort_ushort_ushort(ushort r, ushort g, ushort b, ushort a) {
  return new (UseGC) QColor (QColor::fromRgba64(r, g, b, a));
}

extern "C" QColor * bg_QColor_fromRgba64_STATIC_QRgba64(QRgba64 & rgba) {
  return new (UseGC) QColor (QColor::fromRgba64(rgba));
}

extern "C" QColor * bg_QColor_fromHsv_STATIC_int_int_int_int(int h, int s, int v, int a) {
  return new (UseGC) QColor (QColor::fromHsv(h, s, v, a));
}

extern "C" QColor * bg_QColor_fromHsvF_STATIC_qreal_qreal_qreal_qreal(qreal h, qreal s, qreal v, qreal a) {
  return new (UseGC) QColor (QColor::fromHsvF(h, s, v, a));
}

extern "C" QColor * bg_QColor_fromCmyk_STATIC_int_int_int_int_int(int c, int m, int y, int k, int a) {
  return new (UseGC) QColor (QColor::fromCmyk(c, m, y, k, a));
}

extern "C" QColor * bg_QColor_fromCmykF_STATIC_qreal_qreal_qreal_qreal_qreal(qreal c, qreal m, qreal y, qreal k, qreal a) {
  return new (UseGC) QColor (QColor::fromCmykF(c, m, y, k, a));
}

extern "C" QColor * bg_QColor_fromHsl_STATIC_int_int_int_int(int h, int s, int l, int a) {
  return new (UseGC) QColor (QColor::fromHsl(h, s, l, a));
}

extern "C" QColor * bg_QColor_fromHslF_STATIC_qreal_qreal_qreal_qreal(qreal h, qreal s, qreal l, qreal a) {
  return new (UseGC) QColor (QColor::fromHslF(h, s, l, a));
}

extern "C" QColor * bg_QColor_light_int(QColor * _self_, int f) {
  return new (UseGC) QColor (_self_->light(f));
}

extern "C" QColor * bg_QColor_lighter_int(QColor * _self_, int f) {
  return new (UseGC) QColor (_self_->lighter(f));
}

extern "C" QColor * bg_QColor_dark_int(QColor * _self_, int f) {
  return new (UseGC) QColor (_self_->dark(f));
}

extern "C" QColor * bg_QColor_darker_int(QColor * _self_, int f) {
  return new (UseGC) QColor (_self_->darker(f));
}

extern "C" bool bg_QColor_isValidColor_STATIC_const_QString_R(const CrystalString name) {
  return QColor::isValidColor(QString::fromUtf8(name.ptr, name.size));
}

extern "C" QEvent * bg_QEvent__CONSTRUCT_QEvent__Type(QEvent::Type type) {
  return new (UseGC) QEvent(type);
}

extern "C" QEvent::Type bg_QEvent_type_(QEvent * _self_) {
  return _self_->type();
}

extern "C" bool bg_QEvent_spontaneous_(QEvent * _self_) {
  return _self_->spontaneous();
}

extern "C" void bg_QEvent_setAccepted_bool(QEvent * _self_, bool accepted) {
  _self_->setAccepted(accepted);
}

extern "C" bool bg_QEvent_isAccepted_(QEvent * _self_) {
  return _self_->isAccepted();
}

extern "C" void bg_QEvent_accept_(QEvent * _self_) {
  _self_->accept();
}

extern "C" void bg_QEvent_ignore_(QEvent * _self_) {
  _self_->ignore();
}

extern "C" int bg_QEvent_registerEventType_STATIC_int(int hint) {
  return QEvent::registerEventType(hint);
}

extern "C" QTimerEvent * bg_QTimerEvent__CONSTRUCT_int(int timerId) {
  return new (UseGC) QTimerEvent(timerId);
}

extern "C" int bg_QTimerEvent_timerId_(QTimerEvent * _self_) {
  return _self_->timerId();
}

extern "C" QDynamicPropertyChangeEvent * bg_QDynamicPropertyChangeEvent__CONSTRUCT_const_QByteArray_R(const QByteArray & name) {
  return new (UseGC) QDynamicPropertyChangeEvent(name);
}

extern "C" QByteArray * bg_QDynamicPropertyChangeEvent_propertyName_(QDynamicPropertyChangeEvent * _self_) {
  return new (UseGC) QByteArray (_self_->propertyName());
}

extern "C" QDeferredDeleteEvent * bg_QDeferredDeleteEvent__CONSTRUCT_() {
  return new (UseGC) QDeferredDeleteEvent();
}

extern "C" int bg_QDeferredDeleteEvent_loopLevel_(QDeferredDeleteEvent * _self_) {
  return _self_->loopLevel();
}

extern "C" QInputEvent * bg_QInputEvent__CONSTRUCT_QEvent__Type(QEvent::Type type) {
  return new (UseGC) QInputEvent(type);
}

extern "C" QInputEvent * bg_QInputEvent__CONSTRUCT_QEvent__Type_Qt__KeyboardModifiers(QEvent::Type type, Qt::KeyboardModifiers modifiers) {
  return new (UseGC) QInputEvent(type, modifiers);
}

extern "C" Qt::KeyboardModifiers bg_QInputEvent_modifiers_(QInputEvent * _self_) {
  return _self_->modifiers();
}

extern "C" void bg_QInputEvent_setModifiers_Qt__KeyboardModifiers(QInputEvent * _self_, Qt::KeyboardModifiers amodifiers) {
  _self_->setModifiers(amodifiers);
}

extern "C" ulong bg_QInputEvent_timestamp_(QInputEvent * _self_) {
  return _self_->timestamp();
}

extern "C" void bg_QInputEvent_setTimestamp_ulong(QInputEvent * _self_, ulong atimestamp) {
  _self_->setTimestamp(atimestamp);
}

extern "C" QKeyEvent * bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_const_QString_R_bool_ushort(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, const CrystalString text, bool autorep, ushort count) {
  return new (UseGC) QKeyEvent(type, key, modifiers, QString::fromUtf8(text.ptr, text.size), autorep, count);
}

extern "C" QKeyEvent * bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32_const_QString_R_bool_ushort(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers, const CrystalString text, bool autorep, ushort count) {
  return new (UseGC) QKeyEvent(type, key, modifiers, nativeScanCode, nativeVirtualKey, nativeModifiers, QString::fromUtf8(text.ptr, text.size), autorep, count);
}

extern "C" int bg_QKeyEvent_key_(QKeyEvent * _self_) {
  return _self_->key();
}

extern "C" bool bg_QKeyEvent_matches_QKeySequence__StandardKey(QKeyEvent * _self_, QKeySequence::StandardKey key) {
  return _self_->matches(key);
}

extern "C" Qt::KeyboardModifiers bg_QKeyEvent_modifiers_(QKeyEvent * _self_) {
  return _self_->modifiers();
}

extern "C" CrystalString bg_QKeyEvent_text_(QKeyEvent * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" bool bg_QKeyEvent_isAutoRepeat_(QKeyEvent * _self_) {
  return _self_->isAutoRepeat();
}

extern "C" int bg_QKeyEvent_count_(QKeyEvent * _self_) {
  return _self_->count();
}

extern "C" quint32 bg_QKeyEvent_nativeScanCode_(QKeyEvent * _self_) {
  return _self_->nativeScanCode();
}

extern "C" quint32 bg_QKeyEvent_nativeVirtualKey_(QKeyEvent * _self_) {
  return _self_->nativeVirtualKey();
}

extern "C" quint32 bg_QKeyEvent_nativeModifiers_(QKeyEvent * _self_) {
  return _self_->nativeModifiers();
}

extern "C" QMouseEvent * bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(QEvent::Type type, const QPointF localPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers) {
  return new (UseGC) QMouseEvent(type, localPos, button, buttons, modifiers);
}

extern "C" QMouseEvent * bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(QEvent::Type type, const QPointF localPos, const QPointF screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers) {
  return new (UseGC) QMouseEvent(type, localPos, screenPos, button, buttons, modifiers);
}

extern "C" QMouseEvent * bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(QEvent::Type type, const QPointF localPos, const QPointF windowPos, const QPointF screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers) {
  return new (UseGC) QMouseEvent(type, localPos, windowPos, screenPos, button, buttons, modifiers);
}

extern "C" QMouseEvent * bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers_Qt__MouseEventSource(QEvent::Type type, const QPointF localPos, const QPointF windowPos, const QPointF screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::MouseEventSource source) {
  return new (UseGC) QMouseEvent(type, localPos, windowPos, screenPos, button, buttons, modifiers, source);
}

extern "C" QPoint bg_QMouseEvent_pos_(QMouseEvent * _self_) {
  return _self_->pos();
}

extern "C" QPoint bg_QMouseEvent_globalPos_(QMouseEvent * _self_) {
  return _self_->globalPos();
}

extern "C" int bg_QMouseEvent_x_(QMouseEvent * _self_) {
  return _self_->x();
}

extern "C" int bg_QMouseEvent_y_(QMouseEvent * _self_) {
  return _self_->y();
}

extern "C" int bg_QMouseEvent_globalX_(QMouseEvent * _self_) {
  return _self_->globalX();
}

extern "C" int bg_QMouseEvent_globalY_(QMouseEvent * _self_) {
  return _self_->globalY();
}

extern "C" const QPointF bg_QMouseEvent_localPos_(QMouseEvent * _self_) {
  return _self_->localPos();
}

extern "C" const QPointF bg_QMouseEvent_windowPos_(QMouseEvent * _self_) {
  return _self_->windowPos();
}

extern "C" const QPointF bg_QMouseEvent_screenPos_(QMouseEvent * _self_) {
  return _self_->screenPos();
}

extern "C" Qt::MouseButton bg_QMouseEvent_button_(QMouseEvent * _self_) {
  return _self_->button();
}

extern "C" Qt::MouseButtons bg_QMouseEvent_buttons_(QMouseEvent * _self_) {
  return _self_->buttons();
}

extern "C" Qt::MouseEventSource bg_QMouseEvent_source_(QMouseEvent * _self_) {
  return _self_->source();
}

extern "C" Qt::MouseEventFlags bg_QMouseEvent_flags_(QMouseEvent * _self_) {
  return _self_->flags();
}

extern "C" QEnterEvent * bg_QEnterEvent__CONSTRUCT_const_QPointF_R_const_QPointF_R_const_QPointF_R(const QPointF localPos, const QPointF windowPos, const QPointF screenPos) {
  return new (UseGC) QEnterEvent(localPos, windowPos, screenPos);
}

extern "C" QPoint bg_QEnterEvent_pos_(QEnterEvent * _self_) {
  return _self_->pos();
}

extern "C" QPoint bg_QEnterEvent_globalPos_(QEnterEvent * _self_) {
  return _self_->globalPos();
}

extern "C" int bg_QEnterEvent_x_(QEnterEvent * _self_) {
  return _self_->x();
}

extern "C" int bg_QEnterEvent_y_(QEnterEvent * _self_) {
  return _self_->y();
}

extern "C" int bg_QEnterEvent_globalX_(QEnterEvent * _self_) {
  return _self_->globalX();
}

extern "C" int bg_QEnterEvent_globalY_(QEnterEvent * _self_) {
  return _self_->globalY();
}

extern "C" const QPointF bg_QEnterEvent_localPos_(QEnterEvent * _self_) {
  return _self_->localPos();
}

extern "C" const QPointF bg_QEnterEvent_windowPos_(QEnterEvent * _self_) {
  return _self_->windowPos();
}

extern "C" const QPointF bg_QEnterEvent_screenPos_(QEnterEvent * _self_) {
  return _self_->screenPos();
}

extern "C" QFocusEvent * bg_QFocusEvent__CONSTRUCT_QEvent__Type_Qt__FocusReason(QEvent::Type type, Qt::FocusReason reason) {
  return new (UseGC) QFocusEvent(type, reason);
}

extern "C" bool bg_QFocusEvent_gotFocus_(QFocusEvent * _self_) {
  return _self_->gotFocus();
}

extern "C" bool bg_QFocusEvent_lostFocus_(QFocusEvent * _self_) {
  return _self_->lostFocus();
}

extern "C" Qt::FocusReason bg_QFocusEvent_reason_(QFocusEvent * _self_) {
  return _self_->reason();
}

extern "C" QPaintEvent * bg_QPaintEvent__CONSTRUCT_const_QRegion_R(const QRegion & paintRegion) {
  return new (UseGC) QPaintEvent(paintRegion);
}

extern "C" QPaintEvent * bg_QPaintEvent__CONSTRUCT_const_QRect_R(const QRect & paintRect) {
  return new (UseGC) QPaintEvent(paintRect);
}

extern "C" const QRect * bg_QPaintEvent_rect_(QPaintEvent * _self_) {
  return &(_self_->rect());
}

extern "C" const QRegion * bg_QPaintEvent_region_(QPaintEvent * _self_) {
  return &(_self_->region());
}

extern "C" QMoveEvent * bg_QMoveEvent__CONSTRUCT_const_QPoint_R_const_QPoint_R(const QPoint pos, const QPoint oldPos) {
  return new (UseGC) QMoveEvent(pos, oldPos);
}

extern "C" const QPoint bg_QMoveEvent_pos_(QMoveEvent * _self_) {
  return _self_->pos();
}

extern "C" const QPoint bg_QMoveEvent_oldPos_(QMoveEvent * _self_) {
  return _self_->oldPos();
}

extern "C" QExposeEvent * bg_QExposeEvent__CONSTRUCT_const_QRegion_R(const QRegion & rgn) {
  return new (UseGC) QExposeEvent(rgn);
}

extern "C" const QRegion * bg_QExposeEvent_region_(QExposeEvent * _self_) {
  return &(_self_->region());
}

extern "C" QPlatformSurfaceEvent * bg_QPlatformSurfaceEvent__CONSTRUCT_QPlatformSurfaceEvent__SurfaceEventType(QPlatformSurfaceEvent::SurfaceEventType surfaceEventType) {
  return new (UseGC) QPlatformSurfaceEvent(surfaceEventType);
}

extern "C" QPlatformSurfaceEvent::SurfaceEventType bg_QPlatformSurfaceEvent_surfaceEventType_(QPlatformSurfaceEvent * _self_) {
  return _self_->surfaceEventType();
}

extern "C" QResizeEvent * bg_QResizeEvent__CONSTRUCT_const_QSize_R_const_QSize_R(const QSize & size, const QSize & oldSize) {
  return new (UseGC) QResizeEvent(size, oldSize);
}

extern "C" const QSize * bg_QResizeEvent_size_(QResizeEvent * _self_) {
  return &(_self_->size());
}

extern "C" const QSize * bg_QResizeEvent_oldSize_(QResizeEvent * _self_) {
  return &(_self_->oldSize());
}

extern "C" QCloseEvent * bg_QCloseEvent__CONSTRUCT_() {
  return new (UseGC) QCloseEvent();
}

extern "C" QIconDragEvent * bg_QIconDragEvent__CONSTRUCT_() {
  return new (UseGC) QIconDragEvent();
}

extern "C" QShowEvent * bg_QShowEvent__CONSTRUCT_() {
  return new (UseGC) QShowEvent();
}

extern "C" QHideEvent * bg_QHideEvent__CONSTRUCT_() {
  return new (UseGC) QHideEvent();
}

extern "C" QInputMethodEvent * bg_QInputMethodEvent__CONSTRUCT_() {
  return new (UseGC) QInputMethodEvent();
}

extern "C" void bg_QInputMethodEvent_setCommitString_const_QString_R_int_int(QInputMethodEvent * _self_, const CrystalString commitString, int replaceFrom, int replaceLength) {
  _self_->setCommitString(QString::fromUtf8(commitString.ptr, commitString.size), replaceFrom, replaceLength);
}

extern "C" const CrystalString bg_QInputMethodEvent_preeditString_(QInputMethodEvent * _self_) {
  return qstring_to_crystal(_self_->preeditString());
}

extern "C" const CrystalString bg_QInputMethodEvent_commitString_(QInputMethodEvent * _self_) {
  return qstring_to_crystal(_self_->commitString());
}

extern "C" int bg_QInputMethodEvent_replacementStart_(QInputMethodEvent * _self_) {
  return _self_->replacementStart();
}

extern "C" int bg_QInputMethodEvent_replacementLength_(QInputMethodEvent * _self_) {
  return _self_->replacementLength();
}

extern "C" QInputMethodQueryEvent * bg_QInputMethodQueryEvent__CONSTRUCT_Qt__InputMethodQueries(Qt::InputMethodQueries queries) {
  return new (UseGC) QInputMethodQueryEvent(queries);
}

extern "C" Qt::InputMethodQueries bg_QInputMethodQueryEvent_queries_(QInputMethodQueryEvent * _self_) {
  return _self_->queries();
}

extern "C" void bg_QInputMethodQueryEvent_setValue_Qt__InputMethodQuery_const_QVariant_R(QInputMethodQueryEvent * _self_, Qt::InputMethodQuery query, const CrystalVariant value) {
  _self_->setValue(query, crystal_to_qvariant(value));
}

extern "C" CrystalVariant bg_QInputMethodQueryEvent_value_Qt__InputMethodQuery(QInputMethodQueryEvent * _self_, Qt::InputMethodQuery query) {
  return qvariant_to_crystal(_self_->value(query));
}

struct BgJumptable_Drag {
  CrystalProc<const QMetaObject *> bg_QDrag_metaObject_;
  CrystalProc<void *, const char *> bg_QDrag_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_Drag : public QDrag {
  using QDrag::QDrag;
  BgJumptable_Drag bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QDrag_metaObject_.isValid()) {
      return _self_->bgJump.bg_QDrag_metaObject_();
    } else {
      return QDrag::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QDrag_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QDrag_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QDrag::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QDrag::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QDrag::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QDrag::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QDrag::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QDrag::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDrag::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QDrag::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Drag *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QDrag::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QDrag_metaObject_(QDrag * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QDrag_qt_metacast_const_char_X(QDrag * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX(QDrag * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QDrag_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDrag::tr(s));
}

extern "C" CrystalString bg_QDrag_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDrag::tr(s, c));
}

extern "C" CrystalString bg_QDrag_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDrag::tr(s, c, n));
}

extern "C" CrystalString bg_QDrag_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDrag::trUtf8(s));
}

extern "C" CrystalString bg_QDrag_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDrag::trUtf8(s, c));
}

extern "C" CrystalString bg_QDrag_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDrag::trUtf8(s, c, n));
}

extern "C" QDrag * bg_QDrag__CONSTRUCT_QObject_X(QObject * dragSource) {
  return new (UseGC) BgInherit_Drag(dragSource);
}

extern "C" void bg_QDrag_setMimeData_QMimeData_X(QDrag * _self_, QMimeData * data) {
  _self_->setMimeData(data);
}

extern "C" QMimeData * bg_QDrag_mimeData_(QDrag * _self_) {
  return _self_->mimeData();
}

extern "C" void bg_QDrag_setPixmap_const_QPixmap_R(QDrag * _self_, const QPixmap & unnamed_arg_0) {
  _self_->setPixmap(unnamed_arg_0);
}

extern "C" QPixmap * bg_QDrag_pixmap_(QDrag * _self_) {
  return new (UseGC) QPixmap (_self_->pixmap());
}

extern "C" void bg_QDrag_setHotSpot_const_QPoint_R(QDrag * _self_, const QPoint hotspot) {
  _self_->setHotSpot(hotspot);
}

extern "C" QPoint bg_QDrag_hotSpot_(QDrag * _self_) {
  return _self_->hotSpot();
}

extern "C" QObject * bg_QDrag_source_(QDrag * _self_) {
  return _self_->source();
}

extern "C" QObject * bg_QDrag_target_(QDrag * _self_) {
  return _self_->target();
}

extern "C" Qt::DropAction bg_QDrag_start_(QDrag * _self_) {
  return _self_->start();
}

extern "C" Qt::DropAction bg_QDrag_start_Qt__DropActions(QDrag * _self_, Qt::DropActions supportedActions) {
  return _self_->start(supportedActions);
}

extern "C" Qt::DropAction bg_QDrag_exec_(QDrag * _self_) {
  return _self_->exec();
}

extern "C" Qt::DropAction bg_QDrag_exec_Qt__DropActions(QDrag * _self_, Qt::DropActions supportedActions) {
  return _self_->exec(supportedActions);
}

extern "C" Qt::DropAction bg_QDrag_exec_Qt__DropActions_Qt__DropAction(QDrag * _self_, Qt::DropActions supportedActions, Qt::DropAction defaultAction) {
  return _self_->exec(supportedActions, defaultAction);
}

extern "C" void bg_QDrag_setDragCursor_const_QPixmap_R_Qt__DropAction(QDrag * _self_, const QPixmap & cursor, Qt::DropAction action) {
  _self_->setDragCursor(cursor, action);
}

extern "C" QPixmap * bg_QDrag_dragCursor_Qt__DropAction(QDrag * _self_, Qt::DropAction action) {
  return new (UseGC) QPixmap (_self_->dragCursor(action));
}

extern "C" Qt::DropActions bg_QDrag_supportedActions_(QDrag * _self_) {
  return _self_->supportedActions();
}

extern "C" Qt::DropAction bg_QDrag_defaultAction_(QDrag * _self_) {
  return _self_->defaultAction();
}

extern "C" void bg_QDrag_actionChanged_Qt__DropAction(QDrag * _self_, Qt::DropAction action) {
  _self_->actionChanged(action);
}

extern "C" void bg_QDrag_targetChanged_QObject_X(QDrag * _self_, QObject * newTarget) {
  _self_->targetChanged(newTarget);
}

extern "C" QMetaObject::Connection * bg_QDrag_CONNECT_actionChanged_CrystalProc_void_Qt__DropAction(QDrag * _self_, CrystalProc<void, Qt::DropAction> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDrag::*)(Qt::DropAction))&QDrag::actionChanged, [_proc_](Qt::DropAction action){ _proc_(action); }));
}

extern "C" QMetaObject::Connection * bg_QDrag_CONNECT_targetChanged_CrystalProc_void_QObject_X(QDrag * _self_, CrystalProc<void, QObject *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDrag::*)(QObject *))&QDrag::targetChanged, [_proc_](QObject * newTarget){ _proc_(newTarget); }));
}

extern "C" void bg_BgInherit_Drag_JUMPTABLE_BgJumptable_Drag_R(BgInherit_Drag * _self_, const BgJumptable_Drag & table) {
  _self_->bgJump = (table);
}

extern "C" QDropEvent * bg_QDropEvent__CONSTRUCT_const_QPointF_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(const QPointF pos, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type type) {
  return new (UseGC) QDropEvent(pos, actions, data, buttons, modifiers, type);
}

extern "C" QPoint bg_QDropEvent_pos_(QDropEvent * _self_) {
  return _self_->pos();
}

extern "C" const QPointF bg_QDropEvent_posF_(QDropEvent * _self_) {
  return _self_->posF();
}

extern "C" Qt::MouseButtons bg_QDropEvent_mouseButtons_(QDropEvent * _self_) {
  return _self_->mouseButtons();
}

extern "C" Qt::KeyboardModifiers bg_QDropEvent_keyboardModifiers_(QDropEvent * _self_) {
  return _self_->keyboardModifiers();
}

extern "C" Qt::DropActions bg_QDropEvent_possibleActions_(QDropEvent * _self_) {
  return _self_->possibleActions();
}

extern "C" Qt::DropAction bg_QDropEvent_proposedAction_(QDropEvent * _self_) {
  return _self_->proposedAction();
}

extern "C" void bg_QDropEvent_acceptProposedAction_(QDropEvent * _self_) {
  _self_->acceptProposedAction();
}

extern "C" Qt::DropAction bg_QDropEvent_dropAction_(QDropEvent * _self_) {
  return _self_->dropAction();
}

extern "C" void bg_QDropEvent_setDropAction_Qt__DropAction(QDropEvent * _self_, Qt::DropAction action) {
  _self_->setDropAction(action);
}

extern "C" QObject * bg_QDropEvent_source_(QDropEvent * _self_) {
  return _self_->source();
}

extern "C" const QMimeData * bg_QDropEvent_mimeData_(QDropEvent * _self_) {
  return _self_->mimeData();
}

extern "C" QDragMoveEvent * bg_QDragMoveEvent__CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(const QPoint pos, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type type) {
  return new (UseGC) QDragMoveEvent(pos, actions, data, buttons, modifiers, type);
}

extern "C" QRect * bg_QDragMoveEvent_answerRect_(QDragMoveEvent * _self_) {
  return new (UseGC) QRect (_self_->answerRect());
}

extern "C" void bg_QDragMoveEvent_accept_(QDragMoveEvent * _self_) {
  _self_->accept();
}

extern "C" void bg_QDragMoveEvent_ignore_(QDragMoveEvent * _self_) {
  _self_->ignore();
}

extern "C" void bg_QDragMoveEvent_accept_const_QRect_R(QDragMoveEvent * _self_, const QRect & r) {
  _self_->accept(r);
}

extern "C" void bg_QDragMoveEvent_ignore_const_QRect_R(QDragMoveEvent * _self_, const QRect & r) {
  _self_->ignore(r);
}

extern "C" QDragEnterEvent * bg_QDragEnterEvent__CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers(const QPoint pos, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers) {
  return new (UseGC) QDragEnterEvent(pos, actions, data, buttons, modifiers);
}

extern "C" QDragLeaveEvent * bg_QDragLeaveEvent__CONSTRUCT_() {
  return new (UseGC) QDragLeaveEvent();
}

extern "C" QHelpEvent * bg_QHelpEvent__CONSTRUCT_QEvent__Type_const_QPoint_R_const_QPoint_R(QEvent::Type type, const QPoint pos, const QPoint globalPos) {
  return new (UseGC) QHelpEvent(type, pos, globalPos);
}

extern "C" int bg_QHelpEvent_x_(QHelpEvent * _self_) {
  return _self_->x();
}

extern "C" int bg_QHelpEvent_y_(QHelpEvent * _self_) {
  return _self_->y();
}

extern "C" int bg_QHelpEvent_globalX_(QHelpEvent * _self_) {
  return _self_->globalX();
}

extern "C" int bg_QHelpEvent_globalY_(QHelpEvent * _self_) {
  return _self_->globalY();
}

extern "C" const QPoint bg_QHelpEvent_pos_(QHelpEvent * _self_) {
  return _self_->pos();
}

extern "C" const QPoint bg_QHelpEvent_globalPos_(QHelpEvent * _self_) {
  return _self_->globalPos();
}

extern "C" QStatusTipEvent * bg_QStatusTipEvent__CONSTRUCT_const_QString_R(const CrystalString tip) {
  return new (UseGC) QStatusTipEvent(QString::fromUtf8(tip.ptr, tip.size));
}

extern "C" CrystalString bg_QStatusTipEvent_tip_(QStatusTipEvent * _self_) {
  return qstring_to_crystal(_self_->tip());
}

extern "C" QWhatsThisClickedEvent * bg_QWhatsThisClickedEvent__CONSTRUCT_const_QString_R(const CrystalString href) {
  return new (UseGC) QWhatsThisClickedEvent(QString::fromUtf8(href.ptr, href.size));
}

extern "C" CrystalString bg_QWhatsThisClickedEvent_href_(QWhatsThisClickedEvent * _self_) {
  return qstring_to_crystal(_self_->href());
}

extern "C" QActionEvent * bg_QActionEvent__CONSTRUCT_int_QAction_X_QAction_X(int type, QAction * action, QAction * before) {
  return new (UseGC) QActionEvent(type, action, before);
}

extern "C" QAction * bg_QActionEvent_action_(QActionEvent * _self_) {
  return _self_->action();
}

extern "C" QAction * bg_QActionEvent_before_(QActionEvent * _self_) {
  return _self_->before();
}

extern "C" QFileOpenEvent * bg_QFileOpenEvent__CONSTRUCT_const_QString_R(const CrystalString file) {
  return new (UseGC) QFileOpenEvent(QString::fromUtf8(file.ptr, file.size));
}

extern "C" QFileOpenEvent * bg_QFileOpenEvent__CONSTRUCT_const_QUrl_R(const QUrl & url) {
  return new (UseGC) QFileOpenEvent(url);
}

extern "C" CrystalString bg_QFileOpenEvent_file_(QFileOpenEvent * _self_) {
  return qstring_to_crystal(_self_->file());
}

extern "C" QUrl * bg_QFileOpenEvent_url_(QFileOpenEvent * _self_) {
  return new (UseGC) QUrl (_self_->url());
}

extern "C" bool bg_QFileOpenEvent_openFile_QFile_R_QIODevice__OpenMode(QFileOpenEvent * _self_, QFile & file, QIODevice::OpenMode flags) {
  return _self_->openFile(file, flags);
}

extern "C" QToolBarChangeEvent * bg_QToolBarChangeEvent__CONSTRUCT_bool(bool t) {
  return new (UseGC) QToolBarChangeEvent(t);
}

extern "C" bool bg_QToolBarChangeEvent_toggle_(QToolBarChangeEvent * _self_) {
  return _self_->toggle();
}

extern "C" QShortcutEvent * bg_QShortcutEvent__CONSTRUCT_const_QKeySequence_R_int_bool(const QKeySequence & key, int id, bool ambiguous) {
  return new (UseGC) QShortcutEvent(key, id, ambiguous);
}

extern "C" const QKeySequence * bg_QShortcutEvent_key_(QShortcutEvent * _self_) {
  return &(_self_->key());
}

extern "C" int bg_QShortcutEvent_shortcutId_(QShortcutEvent * _self_) {
  return _self_->shortcutId();
}

extern "C" bool bg_QShortcutEvent_isAmbiguous_(QShortcutEvent * _self_) {
  return _self_->isAmbiguous();
}

extern "C" QScrollPrepareEvent * bg_QScrollPrepareEvent__CONSTRUCT_const_QPointF_R(const QPointF startPos) {
  return new (UseGC) QScrollPrepareEvent(startPos);
}

extern "C" QPointF bg_QScrollPrepareEvent_startPos_(QScrollPrepareEvent * _self_) {
  return _self_->startPos();
}

extern "C" QSizeF * bg_QScrollPrepareEvent_viewportSize_(QScrollPrepareEvent * _self_) {
  return new (UseGC) QSizeF (_self_->viewportSize());
}

extern "C" QRectF * bg_QScrollPrepareEvent_contentPosRange_(QScrollPrepareEvent * _self_) {
  return new (UseGC) QRectF (_self_->contentPosRange());
}

extern "C" QPointF bg_QScrollPrepareEvent_contentPos_(QScrollPrepareEvent * _self_) {
  return _self_->contentPos();
}

extern "C" void bg_QScrollPrepareEvent_setViewportSize_const_QSizeF_R(QScrollPrepareEvent * _self_, const QSizeF & size) {
  _self_->setViewportSize(size);
}

extern "C" void bg_QScrollPrepareEvent_setContentPosRange_const_QRectF_R(QScrollPrepareEvent * _self_, const QRectF & rect) {
  _self_->setContentPosRange(rect);
}

extern "C" void bg_QScrollPrepareEvent_setContentPos_const_QPointF_R(QScrollPrepareEvent * _self_, const QPointF pos) {
  _self_->setContentPos(pos);
}

extern "C" QScrollEvent * bg_QScrollEvent__CONSTRUCT_const_QPointF_R_const_QPointF_R_QScrollEvent__ScrollState(const QPointF contentPos, const QPointF overshoot, QScrollEvent::ScrollState scrollState) {
  return new (UseGC) QScrollEvent(contentPos, overshoot, scrollState);
}

extern "C" QPointF bg_QScrollEvent_contentPos_(QScrollEvent * _self_) {
  return _self_->contentPos();
}

extern "C" QPointF bg_QScrollEvent_overshootDistance_(QScrollEvent * _self_) {
  return _self_->overshootDistance();
}

extern "C" QScrollEvent::ScrollState bg_QScrollEvent_scrollState_(QScrollEvent * _self_) {
  return _self_->scrollState();
}

extern "C" QScreenOrientationChangeEvent * bg_QScreenOrientationChangeEvent__CONSTRUCT_QScreen_X_Qt__ScreenOrientation(QScreen * screen, Qt::ScreenOrientation orientation) {
  return new (UseGC) QScreenOrientationChangeEvent(screen, orientation);
}

extern "C" QScreen * bg_QScreenOrientationChangeEvent_screen_(QScreenOrientationChangeEvent * _self_) {
  return _self_->screen();
}

extern "C" Qt::ScreenOrientation bg_QScreenOrientationChangeEvent_orientation_(QScreenOrientationChangeEvent * _self_) {
  return _self_->orientation();
}

extern "C" QApplicationStateChangeEvent * bg_QApplicationStateChangeEvent__CONSTRUCT_Qt__ApplicationState(Qt::ApplicationState state) {
  return new (UseGC) QApplicationStateChangeEvent(state);
}

extern "C" Qt::ApplicationState bg_QApplicationStateChangeEvent_applicationState_(QApplicationStateChangeEvent * _self_) {
  return _self_->applicationState();
}

extern "C" QGestureEvent * bg_QGestureEvent__CONSTRUCT_const_QList_QGesture_X__R(const Container_QList_QGesture_X * gestures) {
  return new (UseGC) QGestureEvent(*(gestures));
}

extern "C" Container_QList_QGesture_X * bg_QGestureEvent_gestures_(QGestureEvent * _self_) {
  return new (UseGC) Container_QList_QGesture_X (_self_->gestures());
}

extern "C" QGesture * bg_QGestureEvent_gesture_Qt__GestureType(QGestureEvent * _self_, Qt::GestureType type) {
  return _self_->gesture(type);
}

extern "C" Container_QList_QGesture_X * bg_QGestureEvent_activeGestures_(QGestureEvent * _self_) {
  return new (UseGC) Container_QList_QGesture_X (_self_->activeGestures());
}

extern "C" Container_QList_QGesture_X * bg_QGestureEvent_canceledGestures_(QGestureEvent * _self_) {
  return new (UseGC) Container_QList_QGesture_X (_self_->canceledGestures());
}

extern "C" void bg_QGestureEvent_setAccepted_QGesture_X_bool(QGestureEvent * _self_, QGesture * unnamed_arg_0, bool unnamed_arg_1) {
  _self_->setAccepted(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QGestureEvent_accept_QGesture_X(QGestureEvent * _self_, QGesture * unnamed_arg_0) {
  _self_->accept(unnamed_arg_0);
}

extern "C" void bg_QGestureEvent_ignore_QGesture_X(QGestureEvent * _self_, QGesture * unnamed_arg_0) {
  _self_->ignore(unnamed_arg_0);
}

extern "C" bool bg_QGestureEvent_isAccepted_QGesture_X(QGestureEvent * _self_, QGesture * unnamed_arg_0) {
  return _self_->isAccepted(unnamed_arg_0);
}

extern "C" void bg_QGestureEvent_setAccepted_Qt__GestureType_bool(QGestureEvent * _self_, Qt::GestureType unnamed_arg_0, bool unnamed_arg_1) {
  _self_->setAccepted(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QGestureEvent_accept_Qt__GestureType(QGestureEvent * _self_, Qt::GestureType unnamed_arg_0) {
  _self_->accept(unnamed_arg_0);
}

extern "C" void bg_QGestureEvent_ignore_Qt__GestureType(QGestureEvent * _self_, Qt::GestureType unnamed_arg_0) {
  _self_->ignore(unnamed_arg_0);
}

extern "C" bool bg_QGestureEvent_isAccepted_Qt__GestureType(QGestureEvent * _self_, Qt::GestureType unnamed_arg_0) {
  return _self_->isAccepted(unnamed_arg_0);
}

extern "C" void bg_QGestureEvent_setWidget_QWidget_X(QGestureEvent * _self_, QWidget * widget) {
  _self_->setWidget(widget);
}

extern "C" QWidget * bg_QGestureEvent_widget_(QGestureEvent * _self_) {
  return _self_->widget();
}

extern "C" QPointF bg_QGestureEvent_mapToGraphicsScene_const_QPointF_R(QGestureEvent * _self_, const QPointF gesturePoint) {
  return _self_->mapToGraphicsScene(gesturePoint);
}

extern "C" QGraphicsSceneEvent * bg_QGraphicsSceneEvent__CONSTRUCT_QEvent__Type(QEvent::Type type) {
  return new (UseGC) QGraphicsSceneEvent(type);
}

extern "C" QWidget * bg_QGraphicsSceneEvent_widget_(QGraphicsSceneEvent * _self_) {
  return _self_->widget();
}

extern "C" void bg_QGraphicsSceneEvent_setWidget_QWidget_X(QGraphicsSceneEvent * _self_, QWidget * widget) {
  _self_->setWidget(widget);
}

extern "C" QGraphicsSceneEvent * bg_QGraphicsSceneEvent__CONSTRUCT_QGraphicsSceneEventPrivate_R_QEvent__Type(QGraphicsSceneEventPrivate & dd, QEvent::Type type) {
  return new (UseGC) QGraphicsSceneEvent(dd, type);
}

extern "C" QGraphicsSceneEventPrivate * bg_QGraphicsSceneEvent_d_func_(QGraphicsSceneEvent * _self_) {
  return _self_->d_func();
}

struct BgJumptable_IODevice {
  CrystalProc<const QMetaObject *> bg_QIODevice_metaObject_;
  CrystalProc<void *, const char *> bg_QIODevice_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool> bg_QIODevice_isSequential_;
  CrystalProc<bool, QIODevice::OpenMode> bg_QIODevice_open_QIODevice__OpenMode;
  CrystalProc<void> bg_QIODevice_close_;
  CrystalProc<qint64> bg_QIODevice_pos_;
  CrystalProc<qint64> bg_QIODevice_size_;
  CrystalProc<bool, qint64> bg_QIODevice_seek_qint64;
  CrystalProc<bool> bg_QIODevice_atEnd_;
  CrystalProc<bool> bg_QIODevice_reset_;
  CrystalProc<qint64> bg_QIODevice_bytesAvailable_;
  CrystalProc<qint64> bg_QIODevice_bytesToWrite_;
  CrystalProc<bool> bg_QIODevice_canReadLine_;
  CrystalProc<bool, int> bg_QIODevice_waitForReadyRead_int;
  CrystalProc<bool, int> bg_QIODevice_waitForBytesWritten_int;
  CrystalProc<qint64, char *, qint64> bg_QIODevice_readData_char_X_qint64;
  CrystalProc<qint64, char *, qint64> bg_QIODevice_readLineData_char_X_qint64;
  CrystalProc<qint64, const char *, qint64> bg_QIODevice_writeData_const_char_X_qint64;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_IODevice : public QIODevice {
  using QIODevice::QIODevice;
  BgJumptable_IODevice bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_metaObject_.isValid()) {
      return _self_->bgJump.bg_QIODevice_metaObject_();
    } else {
      return QIODevice::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QIODevice_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QIODevice::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QIODevice::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool isSequential() const override {
    const BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_isSequential_.isValid()) {
      return _self_->bgJump.bg_QIODevice_isSequential_();
    } else {
      return QIODevice::isSequential();
    }
  }
  
  bool open(QIODevice::OpenMode mode) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_open_QIODevice__OpenMode.isValid()) {
      return _self_->bgJump.bg_QIODevice_open_QIODevice__OpenMode(mode);
    } else {
      return QIODevice::open(mode);
    }
  }
  
  void close() override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_close_.isValid()) {
      _self_->bgJump.bg_QIODevice_close_();
    } else {
      QIODevice::close();
    }
  }
  
  qint64 pos() const override {
    const BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_pos_.isValid()) {
      return _self_->bgJump.bg_QIODevice_pos_();
    } else {
      return QIODevice::pos();
    }
  }
  
  qint64 size() const override {
    const BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_size_.isValid()) {
      return _self_->bgJump.bg_QIODevice_size_();
    } else {
      return QIODevice::size();
    }
  }
  
  bool seek(qint64 pos) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_seek_qint64.isValid()) {
      return _self_->bgJump.bg_QIODevice_seek_qint64(pos);
    } else {
      return QIODevice::seek(pos);
    }
  }
  
  bool atEnd() const override {
    const BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_atEnd_.isValid()) {
      return _self_->bgJump.bg_QIODevice_atEnd_();
    } else {
      return QIODevice::atEnd();
    }
  }
  
  bool reset() override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_reset_.isValid()) {
      return _self_->bgJump.bg_QIODevice_reset_();
    } else {
      return QIODevice::reset();
    }
  }
  
  qint64 bytesAvailable() const override {
    const BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_bytesAvailable_.isValid()) {
      return _self_->bgJump.bg_QIODevice_bytesAvailable_();
    } else {
      return QIODevice::bytesAvailable();
    }
  }
  
  qint64 bytesToWrite() const override {
    const BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_bytesToWrite_.isValid()) {
      return _self_->bgJump.bg_QIODevice_bytesToWrite_();
    } else {
      return QIODevice::bytesToWrite();
    }
  }
  
  bool canReadLine() const override {
    const BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_canReadLine_.isValid()) {
      return _self_->bgJump.bg_QIODevice_canReadLine_();
    } else {
      return QIODevice::canReadLine();
    }
  }
  
  bool waitForReadyRead(int msecs) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_waitForReadyRead_int.isValid()) {
      return _self_->bgJump.bg_QIODevice_waitForReadyRead_int(msecs);
    } else {
      return QIODevice::waitForReadyRead(msecs);
    }
  }
  
  bool waitForBytesWritten(int msecs) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_waitForBytesWritten_int.isValid()) {
      return _self_->bgJump.bg_QIODevice_waitForBytesWritten_int(msecs);
    } else {
      return QIODevice::waitForBytesWritten(msecs);
    }
  }
  
  qint64 readData(char * data, qint64 maxlen) override {
    BgInherit_IODevice *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QIODevice_readData_char_X_qint64.isValid())) {
      return _self_->bgJump.bg_QIODevice_readData_char_X_qint64(data, maxlen);
    } else {
      bindgen_fatal_panic("No implementation for pure method QIODevice::readData");
    }
  }
  
  qint64 readLineData(char * data, qint64 maxlen) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QIODevice_readLineData_char_X_qint64.isValid()) {
      return _self_->bgJump.bg_QIODevice_readLineData_char_X_qint64(data, maxlen);
    } else {
      return QIODevice::readLineData(data, maxlen);
    }
  }
  
  qint64 writeData(const char * data, qint64 len) override {
    BgInherit_IODevice *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QIODevice_writeData_const_char_X_qint64.isValid())) {
      return _self_->bgJump.bg_QIODevice_writeData_const_char_X_qint64(data, len);
    } else {
      bindgen_fatal_panic("No implementation for pure method QIODevice::writeData");
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QIODevice::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QIODevice::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QIODevice::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QIODevice::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QIODevice::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QIODevice::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_IODevice *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QIODevice::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QIODevice_metaObject_(QIODevice * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QIODevice_qt_metacast_const_char_X(QIODevice * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX(QIODevice * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QIODevice_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QIODevice::tr(s));
}

extern "C" CrystalString bg_QIODevice_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QIODevice::tr(s, c));
}

extern "C" CrystalString bg_QIODevice_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QIODevice::tr(s, c, n));
}

extern "C" CrystalString bg_QIODevice_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QIODevice::trUtf8(s));
}

extern "C" CrystalString bg_QIODevice_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QIODevice::trUtf8(s, c));
}

extern "C" CrystalString bg_QIODevice_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QIODevice::trUtf8(s, c, n));
}

extern "C" QIODevice * bg_QIODevice__CONSTRUCT_() {
  return new (UseGC) BgInherit_IODevice();
}

extern "C" QIODevice * bg_QIODevice__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_IODevice(parent);
}

extern "C" QIODevice::OpenMode bg_QIODevice_openMode_(QIODevice * _self_) {
  return _self_->openMode();
}

extern "C" void bg_QIODevice_setTextModeEnabled_bool(QIODevice * _self_, bool enabled) {
  _self_->setTextModeEnabled(enabled);
}

extern "C" bool bg_QIODevice_isTextModeEnabled_(QIODevice * _self_) {
  return _self_->isTextModeEnabled();
}

extern "C" bool bg_QIODevice_isOpen_(QIODevice * _self_) {
  return _self_->isOpen();
}

extern "C" bool bg_QIODevice_isReadable_(QIODevice * _self_) {
  return _self_->isReadable();
}

extern "C" bool bg_QIODevice_isWritable_(QIODevice * _self_) {
  return _self_->isWritable();
}

extern "C" bool bg_QIODevice_isSequential_(QIODevice * _self_) {
  return _self_->isSequential();
}

extern "C" bool bg_QIODevice_open_QIODevice__OpenMode(QIODevice * _self_, QIODevice::OpenMode mode) {
  return _self_->open(mode);
}

extern "C" void bg_QIODevice_close_(QIODevice * _self_) {
  _self_->close();
}

extern "C" qint64 bg_QIODevice_pos_(QIODevice * _self_) {
  return _self_->pos();
}

extern "C" qint64 bg_QIODevice_size_(QIODevice * _self_) {
  return _self_->size();
}

extern "C" bool bg_QIODevice_seek_qint64(QIODevice * _self_, qint64 pos) {
  return _self_->seek(pos);
}

extern "C" bool bg_QIODevice_atEnd_(QIODevice * _self_) {
  return _self_->atEnd();
}

extern "C" bool bg_QIODevice_reset_(QIODevice * _self_) {
  return _self_->reset();
}

extern "C" qint64 bg_QIODevice_bytesAvailable_(QIODevice * _self_) {
  return _self_->bytesAvailable();
}

extern "C" qint64 bg_QIODevice_bytesToWrite_(QIODevice * _self_) {
  return _self_->bytesToWrite();
}

extern "C" qint64 bg_QIODevice_read_char_X_qint64(QIODevice * _self_, char * data, qint64 maxlen) {
  return _self_->read(data, maxlen);
}

extern "C" QByteArray * bg_QIODevice_read_qint64(QIODevice * _self_, qint64 maxlen) {
  return new (UseGC) QByteArray (_self_->read(maxlen));
}

extern "C" QByteArray * bg_QIODevice_readAll_(QIODevice * _self_) {
  return new (UseGC) QByteArray (_self_->readAll());
}

extern "C" qint64 bg_QIODevice_readLine_char_X_qint64(QIODevice * _self_, char * data, qint64 maxlen) {
  return _self_->readLine(data, maxlen);
}

extern "C" QByteArray * bg_QIODevice_readLine_qint64(QIODevice * _self_, qint64 maxlen) {
  return new (UseGC) QByteArray (_self_->readLine(maxlen));
}

extern "C" bool bg_QIODevice_canReadLine_(QIODevice * _self_) {
  return _self_->canReadLine();
}

extern "C" qint64 bg_QIODevice_write_const_char_X_qint64(QIODevice * _self_, const char * data, qint64 len) {
  return _self_->write(data, len);
}

extern "C" qint64 bg_QIODevice_write_const_char_X(QIODevice * _self_, const char * data) {
  return _self_->write(data);
}

extern "C" qint64 bg_QIODevice_write_const_QByteArray_R(QIODevice * _self_, const QByteArray & data) {
  return _self_->write(data);
}

extern "C" qint64 bg_QIODevice_peek_char_X_qint64(QIODevice * _self_, char * data, qint64 maxlen) {
  return _self_->peek(data, maxlen);
}

extern "C" QByteArray * bg_QIODevice_peek_qint64(QIODevice * _self_, qint64 maxlen) {
  return new (UseGC) QByteArray (_self_->peek(maxlen));
}

extern "C" bool bg_QIODevice_waitForReadyRead_int(QIODevice * _self_, int msecs) {
  return _self_->waitForReadyRead(msecs);
}

extern "C" bool bg_QIODevice_waitForBytesWritten_int(QIODevice * _self_, int msecs) {
  return _self_->waitForBytesWritten(msecs);
}

extern "C" void bg_QIODevice_ungetChar_char(QIODevice * _self_, char c) {
  _self_->ungetChar(c);
}

extern "C" bool bg_QIODevice_putChar_char(QIODevice * _self_, char c) {
  return _self_->putChar(c);
}

extern "C" bool bg_QIODevice_getChar_char_X(QIODevice * _self_, char * c) {
  return _self_->getChar(c);
}

extern "C" CrystalString bg_QIODevice_errorString_(QIODevice * _self_) {
  return qstring_to_crystal(_self_->errorString());
}

extern "C" void bg_QIODevice_readyRead_(QIODevice * _self_) {
  _self_->readyRead();
}

extern "C" void bg_QIODevice_bytesWritten_qint64(QIODevice * _self_, qint64 bytes) {
  _self_->bytesWritten(bytes);
}

extern "C" void bg_QIODevice_aboutToClose_(QIODevice * _self_) {
  _self_->aboutToClose();
}

extern "C" void bg_QIODevice_readChannelFinished_(QIODevice * _self_) {
  _self_->readChannelFinished();
}

extern "C" QIODevice * bg_QIODevice__CONSTRUCT_QIODevicePrivate_R_QObject_X(QIODevicePrivate & dd, QObject * parent) {
  return new (UseGC) BgInherit_IODevice(dd, parent);
}

extern "C" qint64 bg_QIODevice_readData_char_X_qint64(QIODevice * _self_, char * data, qint64 maxlen) {
  return _self_->readData(data, maxlen);
}

extern "C" qint64 bg_QIODevice_readLineData_char_X_qint64(QIODevice * _self_, char * data, qint64 maxlen) {
  return _self_->readLineData(data, maxlen);
}

extern "C" qint64 bg_QIODevice_writeData_const_char_X_qint64(QIODevice * _self_, const char * data, qint64 len) {
  return _self_->writeData(data, len);
}

extern "C" void bg_QIODevice_setOpenMode_QIODevice__OpenMode(QIODevice * _self_, QIODevice::OpenMode openMode) {
  _self_->setOpenMode(openMode);
}

extern "C" void bg_QIODevice_setErrorString_const_QString_R(QIODevice * _self_, const CrystalString errorString) {
  _self_->setErrorString(QString::fromUtf8(errorString.ptr, errorString.size));
}

extern "C" QMetaObject::Connection * bg_QIODevice_CONNECT_readyRead_CrystalProc_void(QIODevice * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QIODevice::*)())&QIODevice::readyRead, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QIODevice_CONNECT_bytesWritten_CrystalProc_void_qint64(QIODevice * _self_, CrystalProc<void, qint64> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QIODevice::*)(qint64))&QIODevice::bytesWritten, [_proc_](qint64 bytes){ _proc_(bytes); }));
}

extern "C" QMetaObject::Connection * bg_QIODevice_CONNECT_aboutToClose_CrystalProc_void(QIODevice * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QIODevice::*)())&QIODevice::aboutToClose, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QIODevice_CONNECT_readChannelFinished_CrystalProc_void(QIODevice * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QIODevice::*)())&QIODevice::readChannelFinished, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_IODevice_JUMPTABLE_BgJumptable_IODevice_R(BgInherit_IODevice * _self_, const BgJumptable_IODevice & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Gesture {
  CrystalProc<const QMetaObject *> bg_QGesture_metaObject_;
  CrystalProc<void *, const char *> bg_QGesture_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_Gesture : public QGesture {
  using QGesture::QGesture;
  BgJumptable_Gesture bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QGesture_metaObject_.isValid()) {
      return _self_->bgJump.bg_QGesture_metaObject_();
    } else {
      return QGesture::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QGesture_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QGesture_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGesture::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QGesture::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QGesture::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QGesture::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QGesture::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QGesture::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QGesture::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QGesture::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Gesture *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QGesture::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QGesture_metaObject_(QGesture * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QGesture_qt_metacast_const_char_X(QGesture * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX(QGesture * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QGesture_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGesture::tr(s));
}

extern "C" CrystalString bg_QGesture_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGesture::tr(s, c));
}

extern "C" CrystalString bg_QGesture_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGesture::tr(s, c, n));
}

extern "C" CrystalString bg_QGesture_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QGesture::trUtf8(s));
}

extern "C" CrystalString bg_QGesture_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QGesture::trUtf8(s, c));
}

extern "C" CrystalString bg_QGesture_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QGesture::trUtf8(s, c, n));
}

extern "C" QGesture * bg_QGesture__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_Gesture(parent);
}

extern "C" Qt::GestureType bg_QGesture_gestureType_(QGesture * _self_) {
  return _self_->gestureType();
}

extern "C" Qt::GestureState bg_QGesture_state_(QGesture * _self_) {
  return _self_->state();
}

extern "C" QPointF bg_QGesture_hotSpot_(QGesture * _self_) {
  return _self_->hotSpot();
}

extern "C" void bg_QGesture_setHotSpot_const_QPointF_R(QGesture * _self_, const QPointF value) {
  _self_->setHotSpot(value);
}

extern "C" bool bg_QGesture_hasHotSpot_(QGesture * _self_) {
  return _self_->hasHotSpot();
}

extern "C" void bg_QGesture_unsetHotSpot_(QGesture * _self_) {
  _self_->unsetHotSpot();
}

extern "C" void bg_QGesture_setGestureCancelPolicy_QGesture__GestureCancelPolicy(QGesture * _self_, QGesture::GestureCancelPolicy policy) {
  _self_->setGestureCancelPolicy(policy);
}

extern "C" QGesture::GestureCancelPolicy bg_QGesture_gestureCancelPolicy_(QGesture * _self_) {
  return _self_->gestureCancelPolicy();
}

extern "C" QGesture * bg_QGesture__CONSTRUCT_QGesturePrivate_R_QObject_X(QGesturePrivate & dd, QObject * parent) {
  return new (UseGC) BgInherit_Gesture(dd, parent);
}

extern "C" void bg_BgInherit_Gesture_JUMPTABLE_BgJumptable_Gesture_R(BgInherit_Gesture * _self_, const BgJumptable_Gesture & table) {
  _self_->bgJump = (table);
}

extern "C" QPainter * bg_QPainter__CONSTRUCT_() {
  return new (UseGC) QPainter();
}

extern "C" QPainter * bg_QPainter__CONSTRUCT_QPaintDevice_X(QPaintDevice * unnamed_arg_0) {
  return new (UseGC) QPainter(unnamed_arg_0);
}

extern "C" QPaintDevice * bg_QPainter_device_(QPainter * _self_) {
  return _self_->device();
}

extern "C" bool bg_QPainter_begin_QPaintDevice_X(QPainter * _self_, QPaintDevice * unnamed_arg_0) {
  return _self_->begin(unnamed_arg_0);
}

extern "C" bool bg_QPainter_end_(QPainter * _self_) {
  return _self_->end();
}

extern "C" bool bg_QPainter_isActive_(QPainter * _self_) {
  return _self_->isActive();
}

extern "C" void bg_QPainter_initFrom_const_QPaintDevice_X(QPainter * _self_, const QPaintDevice * device) {
  _self_->initFrom(device);
}

extern "C" void bg_QPainter_setCompositionMode_QPainter__CompositionMode(QPainter * _self_, QPainter::CompositionMode mode) {
  _self_->setCompositionMode(mode);
}

extern "C" QPainter::CompositionMode bg_QPainter_compositionMode_(QPainter * _self_) {
  return _self_->compositionMode();
}

extern "C" const QFont * bg_QPainter_font_(QPainter * _self_) {
  return &(_self_->font());
}

extern "C" void bg_QPainter_setFont_const_QFont_R(QPainter * _self_, const QFont & f) {
  _self_->setFont(f);
}

extern "C" QFontMetrics * bg_QPainter_fontMetrics_(QPainter * _self_) {
  return new (UseGC) QFontMetrics (_self_->fontMetrics());
}

extern "C" QFontInfo * bg_QPainter_fontInfo_(QPainter * _self_) {
  return new (UseGC) QFontInfo (_self_->fontInfo());
}

extern "C" void bg_QPainter_setPen_const_QColor_R(QPainter * _self_, const QColor & color) {
  _self_->setPen(color);
}

extern "C" void bg_QPainter_setPen_const_QPen_R(QPainter * _self_, const QPen & pen) {
  _self_->setPen(pen);
}

extern "C" void bg_QPainter_setPen_Qt__PenStyle(QPainter * _self_, Qt::PenStyle style) {
  _self_->setPen(style);
}

extern "C" const QPen * bg_QPainter_pen_(QPainter * _self_) {
  return &(_self_->pen());
}

extern "C" void bg_QPainter_setBrush_const_QBrush_R(QPainter * _self_, const QBrush & brush) {
  _self_->setBrush(brush);
}

extern "C" void bg_QPainter_setBrush_Qt__BrushStyle(QPainter * _self_, Qt::BrushStyle style) {
  _self_->setBrush(style);
}

extern "C" const QBrush * bg_QPainter_brush_(QPainter * _self_) {
  return &(_self_->brush());
}

extern "C" void bg_QPainter_setBackgroundMode_Qt__BGMode(QPainter * _self_, Qt::BGMode mode) {
  _self_->setBackgroundMode(mode);
}

extern "C" Qt::BGMode bg_QPainter_backgroundMode_(QPainter * _self_) {
  return _self_->backgroundMode();
}

extern "C" QPoint bg_QPainter_brushOrigin_(QPainter * _self_) {
  return _self_->brushOrigin();
}

extern "C" void bg_QPainter_setBrushOrigin_int_int(QPainter * _self_, int x, int y) {
  _self_->setBrushOrigin(x, y);
}

extern "C" void bg_QPainter_setBrushOrigin_const_QPoint_R(QPainter * _self_, const QPoint unnamed_arg_0) {
  _self_->setBrushOrigin(unnamed_arg_0);
}

extern "C" void bg_QPainter_setBrushOrigin_const_QPointF_R(QPainter * _self_, const QPointF unnamed_arg_0) {
  _self_->setBrushOrigin(unnamed_arg_0);
}

extern "C" void bg_QPainter_setBackground_const_QBrush_R(QPainter * _self_, const QBrush & bg) {
  _self_->setBackground(bg);
}

extern "C" const QBrush * bg_QPainter_background_(QPainter * _self_) {
  return &(_self_->background());
}

extern "C" qreal bg_QPainter_opacity_(QPainter * _self_) {
  return _self_->opacity();
}

extern "C" void bg_QPainter_setOpacity_qreal(QPainter * _self_, qreal opacity) {
  _self_->setOpacity(opacity);
}

extern "C" QRegion * bg_QPainter_clipRegion_(QPainter * _self_) {
  return new (UseGC) QRegion (_self_->clipRegion());
}

extern "C" QPainterPath * bg_QPainter_clipPath_(QPainter * _self_) {
  return new (UseGC) QPainterPath (_self_->clipPath());
}

extern "C" void bg_QPainter_setClipRect_const_QRectF_R_Qt__ClipOperation(QPainter * _self_, const QRectF & unnamed_arg_0, Qt::ClipOperation op) {
  _self_->setClipRect(unnamed_arg_0, op);
}

extern "C" void bg_QPainter_setClipRect_const_QRect_R_Qt__ClipOperation(QPainter * _self_, const QRect & unnamed_arg_0, Qt::ClipOperation op) {
  _self_->setClipRect(unnamed_arg_0, op);
}

extern "C" void bg_QPainter_setClipRect_int_int_int_int_Qt__ClipOperation(QPainter * _self_, int x, int y, int w, int h, Qt::ClipOperation op) {
  _self_->setClipRect(x, y, w, h, op);
}

extern "C" void bg_QPainter_setClipRegion_const_QRegion_R_Qt__ClipOperation(QPainter * _self_, const QRegion & unnamed_arg_0, Qt::ClipOperation op) {
  _self_->setClipRegion(unnamed_arg_0, op);
}

extern "C" void bg_QPainter_setClipPath_const_QPainterPath_R_Qt__ClipOperation(QPainter * _self_, const QPainterPath & path, Qt::ClipOperation op) {
  _self_->setClipPath(path, op);
}

extern "C" void bg_QPainter_setClipping_bool(QPainter * _self_, bool enable) {
  _self_->setClipping(enable);
}

extern "C" bool bg_QPainter_hasClipping_(QPainter * _self_) {
  return _self_->hasClipping();
}

extern "C" QRectF * bg_QPainter_clipBoundingRect_(QPainter * _self_) {
  return new (UseGC) QRectF (_self_->clipBoundingRect());
}

extern "C" void bg_QPainter_save_(QPainter * _self_) {
  _self_->save();
}

extern "C" void bg_QPainter_restore_(QPainter * _self_) {
  _self_->restore();
}

extern "C" void bg_QPainter_setMatrix_const_QMatrix_R_bool(QPainter * _self_, const QMatrix & matrix, bool combine) {
  _self_->setMatrix(matrix, combine);
}

extern "C" const QMatrix * bg_QPainter_matrix_(QPainter * _self_) {
  return &(_self_->matrix());
}

extern "C" const QMatrix * bg_QPainter_deviceMatrix_(QPainter * _self_) {
  return &(_self_->deviceMatrix());
}

extern "C" void bg_QPainter_resetMatrix_(QPainter * _self_) {
  _self_->resetMatrix();
}

extern "C" void bg_QPainter_setTransform_const_QTransform_R_bool(QPainter * _self_, const QTransform & transform, bool combine) {
  _self_->setTransform(transform, combine);
}

extern "C" const QTransform * bg_QPainter_transform_(QPainter * _self_) {
  return &(_self_->transform());
}

extern "C" const QTransform * bg_QPainter_deviceTransform_(QPainter * _self_) {
  return &(_self_->deviceTransform());
}

extern "C" void bg_QPainter_resetTransform_(QPainter * _self_) {
  _self_->resetTransform();
}

extern "C" void bg_QPainter_setWorldMatrix_const_QMatrix_R_bool(QPainter * _self_, const QMatrix & matrix, bool combine) {
  _self_->setWorldMatrix(matrix, combine);
}

extern "C" const QMatrix * bg_QPainter_worldMatrix_(QPainter * _self_) {
  return &(_self_->worldMatrix());
}

extern "C" void bg_QPainter_setWorldTransform_const_QTransform_R_bool(QPainter * _self_, const QTransform & matrix, bool combine) {
  _self_->setWorldTransform(matrix, combine);
}

extern "C" const QTransform * bg_QPainter_worldTransform_(QPainter * _self_) {
  return &(_self_->worldTransform());
}

extern "C" QMatrix * bg_QPainter_combinedMatrix_(QPainter * _self_) {
  return new (UseGC) QMatrix (_self_->combinedMatrix());
}

extern "C" QTransform * bg_QPainter_combinedTransform_(QPainter * _self_) {
  return new (UseGC) QTransform (_self_->combinedTransform());
}

extern "C" void bg_QPainter_setMatrixEnabled_bool(QPainter * _self_, bool enabled) {
  _self_->setMatrixEnabled(enabled);
}

extern "C" bool bg_QPainter_matrixEnabled_(QPainter * _self_) {
  return _self_->matrixEnabled();
}

extern "C" void bg_QPainter_setWorldMatrixEnabled_bool(QPainter * _self_, bool enabled) {
  _self_->setWorldMatrixEnabled(enabled);
}

extern "C" bool bg_QPainter_worldMatrixEnabled_(QPainter * _self_) {
  return _self_->worldMatrixEnabled();
}

extern "C" void bg_QPainter_scale_qreal_qreal(QPainter * _self_, qreal sx, qreal sy) {
  _self_->scale(sx, sy);
}

extern "C" void bg_QPainter_shear_qreal_qreal(QPainter * _self_, qreal sh, qreal sv) {
  _self_->shear(sh, sv);
}

extern "C" void bg_QPainter_rotate_qreal(QPainter * _self_, qreal a) {
  _self_->rotate(a);
}

extern "C" void bg_QPainter_translate_const_QPointF_R(QPainter * _self_, const QPointF offset) {
  _self_->translate(offset);
}

extern "C" void bg_QPainter_translate_const_QPoint_R(QPainter * _self_, const QPoint offset) {
  _self_->translate(offset);
}

extern "C" void bg_QPainter_translate_qreal_qreal(QPainter * _self_, qreal dx, qreal dy) {
  _self_->translate(dx, dy);
}

extern "C" QRect * bg_QPainter_window_(QPainter * _self_) {
  return new (UseGC) QRect (_self_->window());
}

extern "C" void bg_QPainter_setWindow_const_QRect_R(QPainter * _self_, const QRect & window) {
  _self_->setWindow(window);
}

extern "C" void bg_QPainter_setWindow_int_int_int_int(QPainter * _self_, int x, int y, int w, int h) {
  _self_->setWindow(x, y, w, h);
}

extern "C" QRect * bg_QPainter_viewport_(QPainter * _self_) {
  return new (UseGC) QRect (_self_->viewport());
}

extern "C" void bg_QPainter_setViewport_const_QRect_R(QPainter * _self_, const QRect & viewport) {
  _self_->setViewport(viewport);
}

extern "C" void bg_QPainter_setViewport_int_int_int_int(QPainter * _self_, int x, int y, int w, int h) {
  _self_->setViewport(x, y, w, h);
}

extern "C" void bg_QPainter_setViewTransformEnabled_bool(QPainter * _self_, bool enable) {
  _self_->setViewTransformEnabled(enable);
}

extern "C" bool bg_QPainter_viewTransformEnabled_(QPainter * _self_) {
  return _self_->viewTransformEnabled();
}

extern "C" void bg_QPainter_strokePath_const_QPainterPath_R_const_QPen_R(QPainter * _self_, const QPainterPath & path, const QPen & pen) {
  _self_->strokePath(path, pen);
}

extern "C" void bg_QPainter_fillPath_const_QPainterPath_R_const_QBrush_R(QPainter * _self_, const QPainterPath & path, const QBrush & brush) {
  _self_->fillPath(path, brush);
}

extern "C" void bg_QPainter_drawPath_const_QPainterPath_R(QPainter * _self_, const QPainterPath & path) {
  _self_->drawPath(path);
}

extern "C" void bg_QPainter_drawPoint_const_QPointF_R(QPainter * _self_, const QPointF pt) {
  _self_->drawPoint(pt);
}

extern "C" void bg_QPainter_drawPoint_const_QPoint_R(QPainter * _self_, const QPoint p) {
  _self_->drawPoint(p);
}

extern "C" void bg_QPainter_drawPoint_int_int(QPainter * _self_, int x, int y) {
  _self_->drawPoint(x, y);
}

extern "C" void bg_QPainter_drawPoints_const_QPolygonF_R(QPainter * _self_, const QPolygonF & points) {
  _self_->drawPoints(points);
}

extern "C" void bg_QPainter_drawPoints_const_QPolygon_R(QPainter * _self_, const QPolygon & points) {
  _self_->drawPoints(points);
}

extern "C" void bg_QPainter_drawLine_const_QLineF_R(QPainter * _self_, const QLineF & line) {
  _self_->drawLine(line);
}

extern "C" void bg_QPainter_drawLine_const_QLine_R(QPainter * _self_, const QLine & line) {
  _self_->drawLine(line);
}

extern "C" void bg_QPainter_drawLine_int_int_int_int(QPainter * _self_, int x1, int y1, int x2, int y2) {
  _self_->drawLine(x1, y1, x2, y2);
}

extern "C" void bg_QPainter_drawLine_const_QPoint_R_const_QPoint_R(QPainter * _self_, const QPoint p1, const QPoint p2) {
  _self_->drawLine(p1, p2);
}

extern "C" void bg_QPainter_drawLine_const_QPointF_R_const_QPointF_R(QPainter * _self_, const QPointF p1, const QPointF p2) {
  _self_->drawLine(p1, p2);
}

extern "C" void bg_QPainter_drawLines_const_QLineF_X_int(QPainter * _self_, const QLineF * lines, int lineCount) {
  _self_->drawLines(lines, lineCount);
}

extern "C" void bg_QPainter_drawLines_const_QVector_QLineF__R(QPainter * _self_, const Container_QVector_QLineF * lines) {
  _self_->drawLines(*(lines));
}

extern "C" void bg_QPainter_drawLines_const_QVector_QPointF__R(QPainter * _self_, const Container_QVector_QPointF * pointPairs) {
  _self_->drawLines(*(pointPairs));
}

extern "C" void bg_QPainter_drawLines_const_QLine_X_int(QPainter * _self_, const QLine * lines, int lineCount) {
  _self_->drawLines(lines, lineCount);
}

extern "C" void bg_QPainter_drawLines_const_QVector_QLine__R(QPainter * _self_, const Container_QVector_QLine * lines) {
  _self_->drawLines(*(lines));
}

extern "C" void bg_QPainter_drawLines_const_QVector_QPoint__R(QPainter * _self_, const Container_QVector_QPoint * pointPairs) {
  _self_->drawLines(*(pointPairs));
}

extern "C" void bg_QPainter_drawRect_const_QRectF_R(QPainter * _self_, const QRectF & rect) {
  _self_->drawRect(rect);
}

extern "C" void bg_QPainter_drawRect_int_int_int_int(QPainter * _self_, int x1, int y1, int w, int h) {
  _self_->drawRect(x1, y1, w, h);
}

extern "C" void bg_QPainter_drawRect_const_QRect_R(QPainter * _self_, const QRect & rect) {
  _self_->drawRect(rect);
}

extern "C" void bg_QPainter_drawRects_const_QRectF_X_int(QPainter * _self_, const QRectF * rects, int rectCount) {
  _self_->drawRects(rects, rectCount);
}

extern "C" void bg_QPainter_drawRects_const_QVector_QRectF__R(QPainter * _self_, const Container_QVector_QRectF * rectangles) {
  _self_->drawRects(*(rectangles));
}

extern "C" void bg_QPainter_drawRects_const_QRect_X_int(QPainter * _self_, const QRect * rects, int rectCount) {
  _self_->drawRects(rects, rectCount);
}

extern "C" void bg_QPainter_drawRects_const_QVector_QRect__R(QPainter * _self_, const Container_QVector_QRect * rectangles) {
  _self_->drawRects(*(rectangles));
}

extern "C" void bg_QPainter_drawEllipse_const_QRectF_R(QPainter * _self_, const QRectF & r) {
  _self_->drawEllipse(r);
}

extern "C" void bg_QPainter_drawEllipse_const_QRect_R(QPainter * _self_, const QRect & r) {
  _self_->drawEllipse(r);
}

extern "C" void bg_QPainter_drawEllipse_int_int_int_int(QPainter * _self_, int x, int y, int w, int h) {
  _self_->drawEllipse(x, y, w, h);
}

extern "C" void bg_QPainter_drawEllipse_const_QPointF_R_qreal_qreal(QPainter * _self_, const QPointF center, qreal rx, qreal ry) {
  _self_->drawEllipse(center, rx, ry);
}

extern "C" void bg_QPainter_drawEllipse_const_QPoint_R_int_int(QPainter * _self_, const QPoint center, int rx, int ry) {
  _self_->drawEllipse(center, rx, ry);
}

extern "C" void bg_QPainter_drawPolyline_const_QPolygonF_R(QPainter * _self_, const QPolygonF & polyline) {
  _self_->drawPolyline(polyline);
}

extern "C" void bg_QPainter_drawPolyline_const_QPolygon_R(QPainter * _self_, const QPolygon & polygon) {
  _self_->drawPolyline(polygon);
}

extern "C" void bg_QPainter_drawPolygon_const_QPolygonF_R_Qt__FillRule(QPainter * _self_, const QPolygonF & polygon, Qt::FillRule fillRule) {
  _self_->drawPolygon(polygon, fillRule);
}

extern "C" void bg_QPainter_drawPolygon_const_QPolygon_R_Qt__FillRule(QPainter * _self_, const QPolygon & polygon, Qt::FillRule fillRule) {
  _self_->drawPolygon(polygon, fillRule);
}

extern "C" void bg_QPainter_drawConvexPolygon_const_QPolygonF_R(QPainter * _self_, const QPolygonF & polygon) {
  _self_->drawConvexPolygon(polygon);
}

extern "C" void bg_QPainter_drawConvexPolygon_const_QPolygon_R(QPainter * _self_, const QPolygon & polygon) {
  _self_->drawConvexPolygon(polygon);
}

extern "C" void bg_QPainter_drawArc_const_QRectF_R_int_int(QPainter * _self_, const QRectF & rect, int a, int alen) {
  _self_->drawArc(rect, a, alen);
}

extern "C" void bg_QPainter_drawArc_const_QRect_R_int_int(QPainter * _self_, const QRect & unnamed_arg_0, int a, int alen) {
  _self_->drawArc(unnamed_arg_0, a, alen);
}

extern "C" void bg_QPainter_drawArc_int_int_int_int_int_int(QPainter * _self_, int x, int y, int w, int h, int a, int alen) {
  _self_->drawArc(x, y, w, h, a, alen);
}

extern "C" void bg_QPainter_drawPie_const_QRectF_R_int_int(QPainter * _self_, const QRectF & rect, int a, int alen) {
  _self_->drawPie(rect, a, alen);
}

extern "C" void bg_QPainter_drawPie_int_int_int_int_int_int(QPainter * _self_, int x, int y, int w, int h, int a, int alen) {
  _self_->drawPie(x, y, w, h, a, alen);
}

extern "C" void bg_QPainter_drawPie_const_QRect_R_int_int(QPainter * _self_, const QRect & unnamed_arg_0, int a, int alen) {
  _self_->drawPie(unnamed_arg_0, a, alen);
}

extern "C" void bg_QPainter_drawChord_const_QRectF_R_int_int(QPainter * _self_, const QRectF & rect, int a, int alen) {
  _self_->drawChord(rect, a, alen);
}

extern "C" void bg_QPainter_drawChord_int_int_int_int_int_int(QPainter * _self_, int x, int y, int w, int h, int a, int alen) {
  _self_->drawChord(x, y, w, h, a, alen);
}

extern "C" void bg_QPainter_drawChord_const_QRect_R_int_int(QPainter * _self_, const QRect & unnamed_arg_0, int a, int alen) {
  _self_->drawChord(unnamed_arg_0, a, alen);
}

extern "C" void bg_QPainter_drawRoundedRect_const_QRectF_R_qreal_qreal_Qt__SizeMode(QPainter * _self_, const QRectF & rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode) {
  _self_->drawRoundedRect(rect, xRadius, yRadius, mode);
}

extern "C" void bg_QPainter_drawRoundedRect_int_int_int_int_qreal_qreal_Qt__SizeMode(QPainter * _self_, int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode) {
  _self_->drawRoundedRect(x, y, w, h, xRadius, yRadius, mode);
}

extern "C" void bg_QPainter_drawRoundedRect_const_QRect_R_qreal_qreal_Qt__SizeMode(QPainter * _self_, const QRect & rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode) {
  _self_->drawRoundedRect(rect, xRadius, yRadius, mode);
}

extern "C" void bg_QPainter_drawRoundRect_const_QRectF_R_int_int(QPainter * _self_, const QRectF & r, int xround, int yround) {
  _self_->drawRoundRect(r, xround, yround);
}

extern "C" void bg_QPainter_drawRoundRect_int_int_int_int_int_int(QPainter * _self_, int x, int y, int w, int h, int unnamed_arg_4, int unnamed_arg_5) {
  _self_->drawRoundRect(x, y, w, h, unnamed_arg_4, unnamed_arg_5);
}

extern "C" void bg_QPainter_drawRoundRect_const_QRect_R_int_int(QPainter * _self_, const QRect & r, int xround, int yround) {
  _self_->drawRoundRect(r, xround, yround);
}

extern "C" void bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R(QPainter * _self_, const QRectF & rect, const QPixmap & pm) {
  _self_->drawTiledPixmap(rect, pm);
}

extern "C" void bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R_const_QPointF_R(QPainter * _self_, const QRectF & rect, const QPixmap & pm, const QPointF offset) {
  _self_->drawTiledPixmap(rect, pm, offset);
}

extern "C" void bg_QPainter_drawTiledPixmap_int_int_int_int_const_QPixmap_R_int_int(QPainter * _self_, int x, int y, int w, int h, const QPixmap & unnamed_arg_4, int sx, int sy) {
  _self_->drawTiledPixmap(x, y, w, h, unnamed_arg_4, sx, sy);
}

extern "C" void bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R(QPainter * _self_, const QRect & unnamed_arg_0, const QPixmap & unnamed_arg_1) {
  _self_->drawTiledPixmap(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R_const_QPoint_R(QPainter * _self_, const QRect & unnamed_arg_0, const QPixmap & unnamed_arg_1, const QPoint unnamed_arg_2) {
  _self_->drawTiledPixmap(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" void bg_QPainter_drawPicture_const_QPointF_R_const_QPicture_R(QPainter * _self_, const QPointF p, const QPicture & picture) {
  _self_->drawPicture(p, picture);
}

extern "C" void bg_QPainter_drawPicture_int_int_const_QPicture_R(QPainter * _self_, int x, int y, const QPicture & picture) {
  _self_->drawPicture(x, y, picture);
}

extern "C" void bg_QPainter_drawPicture_const_QPoint_R_const_QPicture_R(QPainter * _self_, const QPoint p, const QPicture & picture) {
  _self_->drawPicture(p, picture);
}

extern "C" void bg_QPainter_drawPixmap_const_QRectF_R_const_QPixmap_R_const_QRectF_R(QPainter * _self_, const QRectF & targetRect, const QPixmap & pixmap, const QRectF & sourceRect) {
  _self_->drawPixmap(targetRect, pixmap, sourceRect);
}

extern "C" void bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R_const_QRect_R(QPainter * _self_, const QRect & targetRect, const QPixmap & pixmap, const QRect & sourceRect) {
  _self_->drawPixmap(targetRect, pixmap, sourceRect);
}

extern "C" void bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R_int_int_int_int(QPainter * _self_, int x, int y, int w, int h, const QPixmap & pm, int sx, int sy, int sw, int sh) {
  _self_->drawPixmap(x, y, w, h, pm, sx, sy, sw, sh);
}

extern "C" void bg_QPainter_drawPixmap_int_int_const_QPixmap_R_int_int_int_int(QPainter * _self_, int x, int y, const QPixmap & pm, int sx, int sy, int sw, int sh) {
  _self_->drawPixmap(x, y, pm, sx, sy, sw, sh);
}

extern "C" void bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R_const_QRectF_R(QPainter * _self_, const QPointF p, const QPixmap & pm, const QRectF & sr) {
  _self_->drawPixmap(p, pm, sr);
}

extern "C" void bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R_const_QRect_R(QPainter * _self_, const QPoint p, const QPixmap & pm, const QRect & sr) {
  _self_->drawPixmap(p, pm, sr);
}

extern "C" void bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R(QPainter * _self_, const QPointF p, const QPixmap & pm) {
  _self_->drawPixmap(p, pm);
}

extern "C" void bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R(QPainter * _self_, const QPoint p, const QPixmap & pm) {
  _self_->drawPixmap(p, pm);
}

extern "C" void bg_QPainter_drawPixmap_int_int_const_QPixmap_R(QPainter * _self_, int x, int y, const QPixmap & pm) {
  _self_->drawPixmap(x, y, pm);
}

extern "C" void bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R(QPainter * _self_, const QRect & r, const QPixmap & pm) {
  _self_->drawPixmap(r, pm);
}

extern "C" void bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R(QPainter * _self_, int x, int y, int w, int h, const QPixmap & pm) {
  _self_->drawPixmap(x, y, w, h, pm);
}

extern "C" void bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R(QPainter * _self_, const QRectF & targetRect, const QImage & image, const QRectF & sourceRect) {
  _self_->drawImage(targetRect, image, sourceRect);
}

extern "C" void bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(QPainter * _self_, const QRectF & targetRect, const QImage & image, const QRectF & sourceRect, Qt::ImageConversionFlags flags) {
  _self_->drawImage(targetRect, image, sourceRect, flags);
}

extern "C" void bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R(QPainter * _self_, const QRect & targetRect, const QImage & image, const QRect & sourceRect) {
  _self_->drawImage(targetRect, image, sourceRect);
}

extern "C" void bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(QPainter * _self_, const QRect & targetRect, const QImage & image, const QRect & sourceRect, Qt::ImageConversionFlags flags) {
  _self_->drawImage(targetRect, image, sourceRect, flags);
}

extern "C" void bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R(QPainter * _self_, const QPointF p, const QImage & image, const QRectF & sr) {
  _self_->drawImage(p, image, sr);
}

extern "C" void bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(QPainter * _self_, const QPointF p, const QImage & image, const QRectF & sr, Qt::ImageConversionFlags flags) {
  _self_->drawImage(p, image, sr, flags);
}

extern "C" void bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R(QPainter * _self_, const QPoint p, const QImage & image, const QRect & sr) {
  _self_->drawImage(p, image, sr);
}

extern "C" void bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(QPainter * _self_, const QPoint p, const QImage & image, const QRect & sr, Qt::ImageConversionFlags flags) {
  _self_->drawImage(p, image, sr, flags);
}

extern "C" void bg_QPainter_drawImage_const_QRectF_R_const_QImage_R(QPainter * _self_, const QRectF & r, const QImage & image) {
  _self_->drawImage(r, image);
}

extern "C" void bg_QPainter_drawImage_const_QRect_R_const_QImage_R(QPainter * _self_, const QRect & r, const QImage & image) {
  _self_->drawImage(r, image);
}

extern "C" void bg_QPainter_drawImage_const_QPointF_R_const_QImage_R(QPainter * _self_, const QPointF p, const QImage & image) {
  _self_->drawImage(p, image);
}

extern "C" void bg_QPainter_drawImage_const_QPoint_R_const_QImage_R(QPainter * _self_, const QPoint p, const QImage & image) {
  _self_->drawImage(p, image);
}

extern "C" void bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int(QPainter * _self_, int x, int y, const QImage & image, int sx, int sy, int sw, int sh) {
  _self_->drawImage(x, y, image, sx, sy, sw, sh);
}

extern "C" void bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int_Qt__ImageConversionFlags(QPainter * _self_, int x, int y, const QImage & image, int sx, int sy, int sw, int sh, Qt::ImageConversionFlags flags) {
  _self_->drawImage(x, y, image, sx, sy, sw, sh, flags);
}

extern "C" void bg_QPainter_setLayoutDirection_Qt__LayoutDirection(QPainter * _self_, Qt::LayoutDirection direction) {
  _self_->setLayoutDirection(direction);
}

extern "C" Qt::LayoutDirection bg_QPainter_layoutDirection_(QPainter * _self_) {
  return _self_->layoutDirection();
}

extern "C" void bg_QPainter_drawGlyphRun_const_QPointF_R_const_QGlyphRun_R(QPainter * _self_, const QPointF position, const QGlyphRun & glyphRun) {
  _self_->drawGlyphRun(position, glyphRun);
}

extern "C" void bg_QPainter_drawStaticText_const_QPointF_R_const_QStaticText_R(QPainter * _self_, const QPointF topLeftPosition, const QStaticText & staticText) {
  _self_->drawStaticText(topLeftPosition, staticText);
}

extern "C" void bg_QPainter_drawStaticText_const_QPoint_R_const_QStaticText_R(QPainter * _self_, const QPoint topLeftPosition, const QStaticText & staticText) {
  _self_->drawStaticText(topLeftPosition, staticText);
}

extern "C" void bg_QPainter_drawStaticText_int_int_const_QStaticText_R(QPainter * _self_, int left, int top, const QStaticText & staticText) {
  _self_->drawStaticText(left, top, staticText);
}

extern "C" void bg_QPainter_drawText_const_QPointF_R_const_QString_R(QPainter * _self_, const QPointF p, const CrystalString s) {
  _self_->drawText(p, QString::fromUtf8(s.ptr, s.size));
}

extern "C" void bg_QPainter_drawText_const_QPoint_R_const_QString_R(QPainter * _self_, const QPoint p, const CrystalString s) {
  _self_->drawText(p, QString::fromUtf8(s.ptr, s.size));
}

extern "C" void bg_QPainter_drawText_int_int_const_QString_R(QPainter * _self_, int x, int y, const CrystalString s) {
  _self_->drawText(x, y, QString::fromUtf8(s.ptr, s.size));
}

extern "C" void bg_QPainter_drawText_const_QPointF_R_const_QString_R_int_int(QPainter * _self_, const QPointF p, const CrystalString str, int tf, int justificationPadding) {
  _self_->drawText(p, QString::fromUtf8(str.ptr, str.size), tf, justificationPadding);
}

extern "C" void bg_QPainter_drawText_const_QRectF_R_int_const_QString_R_QRectF_X(QPainter * _self_, const QRectF & r, int flags, const CrystalString text, QRectF * br) {
  _self_->drawText(r, flags, QString::fromUtf8(text.ptr, text.size), br);
}

extern "C" void bg_QPainter_drawText_const_QRect_R_int_const_QString_R_QRect_X(QPainter * _self_, const QRect & r, int flags, const CrystalString text, QRect * br) {
  _self_->drawText(r, flags, QString::fromUtf8(text.ptr, text.size), br);
}

extern "C" void bg_QPainter_drawText_int_int_int_int_int_const_QString_R_QRect_X(QPainter * _self_, int x, int y, int w, int h, int flags, const CrystalString text, QRect * br) {
  _self_->drawText(x, y, w, h, flags, QString::fromUtf8(text.ptr, text.size), br);
}

extern "C" void bg_QPainter_drawText_const_QRectF_R_const_QString_R(QPainter * _self_, const QRectF & r, const CrystalString text) {
  _self_->drawText(r, QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QPainter_drawText_const_QRectF_R_const_QString_R_const_QTextOption_R(QPainter * _self_, const QRectF & r, const CrystalString text, const QTextOption & o) {
  _self_->drawText(r, QString::fromUtf8(text.ptr, text.size), o);
}

extern "C" QRectF * bg_QPainter_boundingRect_const_QRectF_R_int_const_QString_R(QPainter * _self_, const QRectF & rect, int flags, const CrystalString text) {
  return new (UseGC) QRectF (_self_->boundingRect(rect, flags, QString::fromUtf8(text.ptr, text.size)));
}

extern "C" QRect * bg_QPainter_boundingRect_const_QRect_R_int_const_QString_R(QPainter * _self_, const QRect & rect, int flags, const CrystalString text) {
  return new (UseGC) QRect (_self_->boundingRect(rect, flags, QString::fromUtf8(text.ptr, text.size)));
}

extern "C" QRect * bg_QPainter_boundingRect_int_int_int_int_int_const_QString_R(QPainter * _self_, int x, int y, int w, int h, int flags, const CrystalString text) {
  return new (UseGC) QRect (_self_->boundingRect(x, y, w, h, flags, QString::fromUtf8(text.ptr, text.size)));
}

extern "C" QRectF * bg_QPainter_boundingRect_const_QRectF_R_const_QString_R(QPainter * _self_, const QRectF & rect, const CrystalString text) {
  return new (UseGC) QRectF (_self_->boundingRect(rect, QString::fromUtf8(text.ptr, text.size)));
}

extern "C" QRectF * bg_QPainter_boundingRect_const_QRectF_R_const_QString_R_const_QTextOption_R(QPainter * _self_, const QRectF & rect, const CrystalString text, const QTextOption & o) {
  return new (UseGC) QRectF (_self_->boundingRect(rect, QString::fromUtf8(text.ptr, text.size), o));
}

extern "C" void bg_QPainter_drawTextItem_const_QPointF_R_const_QTextItem_R(QPainter * _self_, const QPointF p, const QTextItem & ti) {
  _self_->drawTextItem(p, ti);
}

extern "C" void bg_QPainter_drawTextItem_int_int_const_QTextItem_R(QPainter * _self_, int x, int y, const QTextItem & ti) {
  _self_->drawTextItem(x, y, ti);
}

extern "C" void bg_QPainter_drawTextItem_const_QPoint_R_const_QTextItem_R(QPainter * _self_, const QPoint p, const QTextItem & ti) {
  _self_->drawTextItem(p, ti);
}

extern "C" void bg_QPainter_fillRect_const_QRectF_R_const_QBrush_R(QPainter * _self_, const QRectF & unnamed_arg_0, const QBrush & unnamed_arg_1) {
  _self_->fillRect(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QPainter_fillRect_int_int_int_int_const_QBrush_R(QPainter * _self_, int x, int y, int w, int h, const QBrush & unnamed_arg_4) {
  _self_->fillRect(x, y, w, h, unnamed_arg_4);
}

extern "C" void bg_QPainter_fillRect_const_QRect_R_const_QBrush_R(QPainter * _self_, const QRect & unnamed_arg_0, const QBrush & unnamed_arg_1) {
  _self_->fillRect(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QPainter_fillRect_const_QRectF_R_const_QColor_R(QPainter * _self_, const QRectF & unnamed_arg_0, const QColor & color) {
  _self_->fillRect(unnamed_arg_0, color);
}

extern "C" void bg_QPainter_fillRect_int_int_int_int_const_QColor_R(QPainter * _self_, int x, int y, int w, int h, const QColor & color) {
  _self_->fillRect(x, y, w, h, color);
}

extern "C" void bg_QPainter_fillRect_const_QRect_R_const_QColor_R(QPainter * _self_, const QRect & unnamed_arg_0, const QColor & color) {
  _self_->fillRect(unnamed_arg_0, color);
}

extern "C" void bg_QPainter_fillRect_int_int_int_int_Qt__GlobalColor(QPainter * _self_, int x, int y, int w, int h, Qt::GlobalColor c) {
  _self_->fillRect(x, y, w, h, c);
}

extern "C" void bg_QPainter_fillRect_const_QRect_R_Qt__GlobalColor(QPainter * _self_, const QRect & r, Qt::GlobalColor c) {
  _self_->fillRect(r, c);
}

extern "C" void bg_QPainter_fillRect_const_QRectF_R_Qt__GlobalColor(QPainter * _self_, const QRectF & r, Qt::GlobalColor c) {
  _self_->fillRect(r, c);
}

extern "C" void bg_QPainter_fillRect_int_int_int_int_Qt__BrushStyle(QPainter * _self_, int x, int y, int w, int h, Qt::BrushStyle style) {
  _self_->fillRect(x, y, w, h, style);
}

extern "C" void bg_QPainter_fillRect_const_QRect_R_Qt__BrushStyle(QPainter * _self_, const QRect & r, Qt::BrushStyle style) {
  _self_->fillRect(r, style);
}

extern "C" void bg_QPainter_fillRect_const_QRectF_R_Qt__BrushStyle(QPainter * _self_, const QRectF & r, Qt::BrushStyle style) {
  _self_->fillRect(r, style);
}

extern "C" void bg_QPainter_eraseRect_const_QRectF_R(QPainter * _self_, const QRectF & unnamed_arg_0) {
  _self_->eraseRect(unnamed_arg_0);
}

extern "C" void bg_QPainter_eraseRect_int_int_int_int(QPainter * _self_, int x, int y, int w, int h) {
  _self_->eraseRect(x, y, w, h);
}

extern "C" void bg_QPainter_eraseRect_const_QRect_R(QPainter * _self_, const QRect & unnamed_arg_0) {
  _self_->eraseRect(unnamed_arg_0);
}

extern "C" void bg_QPainter_setRenderHint_QPainter__RenderHint_bool(QPainter * _self_, QPainter::RenderHint hint, bool on) {
  _self_->setRenderHint(hint, on);
}

extern "C" void bg_QPainter_setRenderHints_QPainter__RenderHints_bool(QPainter * _self_, QPainter::RenderHints hints, bool on) {
  _self_->setRenderHints(hints, on);
}

extern "C" QPainter::RenderHints bg_QPainter_renderHints_(QPainter * _self_) {
  return _self_->renderHints();
}

extern "C" bool bg_QPainter_testRenderHint_QPainter__RenderHint(QPainter * _self_, QPainter::RenderHint hint) {
  return _self_->testRenderHint(hint);
}

extern "C" QPaintEngine * bg_QPainter_paintEngine_(QPainter * _self_) {
  return _self_->paintEngine();
}

extern "C" void bg_QPainter_setRedirected_STATIC_const_QPaintDevice_X_QPaintDevice_X(const QPaintDevice * device, QPaintDevice * replacement) {
  QPainter::setRedirected(device, replacement);
}

extern "C" void bg_QPainter_setRedirected_STATIC_const_QPaintDevice_X_QPaintDevice_X_const_QPoint_R(const QPaintDevice * device, QPaintDevice * replacement, const QPoint offset) {
  QPainter::setRedirected(device, replacement, offset);
}

extern "C" void bg_QPainter_restoreRedirected_STATIC_const_QPaintDevice_X(const QPaintDevice * device) {
  QPainter::restoreRedirected(device);
}

extern "C" void bg_QPainter_beginNativePainting_(QPainter * _self_) {
  _self_->beginNativePainting();
}

extern "C" void bg_QPainter_endNativePainting_(QPainter * _self_) {
  _self_->endNativePainting();
}

extern "C" QLine * bg_QLine__CONSTRUCT_() {
  return new (UseGC) QLine();
}

extern "C" QLine * bg_QLine__CONSTRUCT_const_QPoint_R_const_QPoint_R(const QPoint pt1, const QPoint pt2) {
  return new (UseGC) QLine(pt1, pt2);
}

extern "C" QLine * bg_QLine__CONSTRUCT_int_int_int_int(int x1, int y1, int x2, int y2) {
  return new (UseGC) QLine(x1, y1, x2, y2);
}

extern "C" bool bg_QLine_isNull_(QLine * _self_) {
  return _self_->isNull();
}

extern "C" QPoint bg_QLine_p1_(QLine * _self_) {
  return _self_->p1();
}

extern "C" QPoint bg_QLine_p2_(QLine * _self_) {
  return _self_->p2();
}

extern "C" int bg_QLine_x1_(QLine * _self_) {
  return _self_->x1();
}

extern "C" int bg_QLine_y1_(QLine * _self_) {
  return _self_->y1();
}

extern "C" int bg_QLine_x2_(QLine * _self_) {
  return _self_->x2();
}

extern "C" int bg_QLine_y2_(QLine * _self_) {
  return _self_->y2();
}

extern "C" int bg_QLine_dx_(QLine * _self_) {
  return _self_->dx();
}

extern "C" int bg_QLine_dy_(QLine * _self_) {
  return _self_->dy();
}

extern "C" void bg_QLine_translate_const_QPoint_R(QLine * _self_, const QPoint p) {
  _self_->translate(p);
}

extern "C" void bg_QLine_translate_int_int(QLine * _self_, int dx, int dy) {
  _self_->translate(dx, dy);
}

extern "C" QLine * bg_QLine_translated_const_QPoint_R(QLine * _self_, const QPoint p) {
  return new (UseGC) QLine (_self_->translated(p));
}

extern "C" QLine * bg_QLine_translated_int_int(QLine * _self_, int dx, int dy) {
  return new (UseGC) QLine (_self_->translated(dx, dy));
}

extern "C" void bg_QLine_setP1_const_QPoint_R(QLine * _self_, const QPoint p1) {
  _self_->setP1(p1);
}

extern "C" void bg_QLine_setP2_const_QPoint_R(QLine * _self_, const QPoint p2) {
  _self_->setP2(p2);
}

extern "C" void bg_QLine_setPoints_const_QPoint_R_const_QPoint_R(QLine * _self_, const QPoint p1, const QPoint p2) {
  _self_->setPoints(p1, p2);
}

extern "C" void bg_QLine_setLine_int_int_int_int(QLine * _self_, int x1, int y1, int x2, int y2) {
  _self_->setLine(x1, y1, x2, y2);
}

extern "C" QLineF * bg_QLineF__CONSTRUCT_() {
  return new (UseGC) QLineF();
}

extern "C" QLineF * bg_QLineF__CONSTRUCT_const_QPointF_R_const_QPointF_R(const QPointF pt1, const QPointF pt2) {
  return new (UseGC) QLineF(pt1, pt2);
}

extern "C" QLineF * bg_QLineF__CONSTRUCT_qreal_qreal_qreal_qreal(qreal x1, qreal y1, qreal x2, qreal y2) {
  return new (UseGC) QLineF(x1, y1, x2, y2);
}

extern "C" QLineF * bg_QLineF__CONSTRUCT_const_QLine_R(const QLine & line) {
  return new (UseGC) QLineF(line);
}

extern "C" QLineF * bg_QLineF_fromPolar_STATIC_qreal_qreal(qreal length, qreal angle) {
  return new (UseGC) QLineF (QLineF::fromPolar(length, angle));
}

extern "C" bool bg_QLineF_isNull_(QLineF * _self_) {
  return _self_->isNull();
}

extern "C" QPointF bg_QLineF_p1_(QLineF * _self_) {
  return _self_->p1();
}

extern "C" QPointF bg_QLineF_p2_(QLineF * _self_) {
  return _self_->p2();
}

extern "C" qreal bg_QLineF_x1_(QLineF * _self_) {
  return _self_->x1();
}

extern "C" qreal bg_QLineF_y1_(QLineF * _self_) {
  return _self_->y1();
}

extern "C" qreal bg_QLineF_x2_(QLineF * _self_) {
  return _self_->x2();
}

extern "C" qreal bg_QLineF_y2_(QLineF * _self_) {
  return _self_->y2();
}

extern "C" qreal bg_QLineF_dx_(QLineF * _self_) {
  return _self_->dx();
}

extern "C" qreal bg_QLineF_dy_(QLineF * _self_) {
  return _self_->dy();
}

extern "C" qreal bg_QLineF_length_(QLineF * _self_) {
  return _self_->length();
}

extern "C" void bg_QLineF_setLength_qreal(QLineF * _self_, qreal len) {
  _self_->setLength(len);
}

extern "C" qreal bg_QLineF_angle_(QLineF * _self_) {
  return _self_->angle();
}

extern "C" void bg_QLineF_setAngle_qreal(QLineF * _self_, qreal angle) {
  _self_->setAngle(angle);
}

extern "C" qreal bg_QLineF_angleTo_const_QLineF_R(QLineF * _self_, const QLineF & l) {
  return _self_->angleTo(l);
}

extern "C" QLineF * bg_QLineF_unitVector_(QLineF * _self_) {
  return new (UseGC) QLineF (_self_->unitVector());
}

extern "C" QLineF * bg_QLineF_normalVector_(QLineF * _self_) {
  return new (UseGC) QLineF (_self_->normalVector());
}

extern "C" qreal bg_QLineF_angle_const_QLineF_R(QLineF * _self_, const QLineF & l) {
  return _self_->angle(l);
}

extern "C" QPointF bg_QLineF_pointAt_qreal(QLineF * _self_, qreal t) {
  return _self_->pointAt(t);
}

extern "C" void bg_QLineF_translate_const_QPointF_R(QLineF * _self_, const QPointF p) {
  _self_->translate(p);
}

extern "C" void bg_QLineF_translate_qreal_qreal(QLineF * _self_, qreal dx, qreal dy) {
  _self_->translate(dx, dy);
}

extern "C" QLineF * bg_QLineF_translated_const_QPointF_R(QLineF * _self_, const QPointF p) {
  return new (UseGC) QLineF (_self_->translated(p));
}

extern "C" QLineF * bg_QLineF_translated_qreal_qreal(QLineF * _self_, qreal dx, qreal dy) {
  return new (UseGC) QLineF (_self_->translated(dx, dy));
}

extern "C" void bg_QLineF_setP1_const_QPointF_R(QLineF * _self_, const QPointF p1) {
  _self_->setP1(p1);
}

extern "C" void bg_QLineF_setP2_const_QPointF_R(QLineF * _self_, const QPointF p2) {
  _self_->setP2(p2);
}

extern "C" void bg_QLineF_setPoints_const_QPointF_R_const_QPointF_R(QLineF * _self_, const QPointF p1, const QPointF p2) {
  _self_->setPoints(p1, p2);
}

extern "C" void bg_QLineF_setLine_qreal_qreal_qreal_qreal(QLineF * _self_, qreal x1, qreal y1, qreal x2, qreal y2) {
  _self_->setLine(x1, y1, x2, y2);
}

extern "C" QLine * bg_QLineF_toLine_(QLineF * _self_) {
  return new (UseGC) QLine (_self_->toLine());
}

struct BgJumptable_SystemTrayIcon {
  CrystalProc<const QMetaObject *> bg_QSystemTrayIcon_metaObject_;
  CrystalProc<void *, const char *> bg_QSystemTrayIcon_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QSystemTrayIcon_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_SystemTrayIcon : public QSystemTrayIcon {
  using QSystemTrayIcon::QSystemTrayIcon;
  BgJumptable_SystemTrayIcon bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QSystemTrayIcon_metaObject_.isValid()) {
      return _self_->bgJump.bg_QSystemTrayIcon_metaObject_();
    } else {
      return QSystemTrayIcon::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QSystemTrayIcon_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QSystemTrayIcon_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QSystemTrayIcon::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QSystemTrayIcon::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * event) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QSystemTrayIcon_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QSystemTrayIcon_event_QEvent_X(event);
    } else {
      return QSystemTrayIcon::event(event);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QSystemTrayIcon::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QSystemTrayIcon::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QSystemTrayIcon::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QSystemTrayIcon::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QSystemTrayIcon::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_SystemTrayIcon *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QSystemTrayIcon::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QSystemTrayIcon_metaObject_(QSystemTrayIcon * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QSystemTrayIcon_qt_metacast_const_char_X(QSystemTrayIcon * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX(QSystemTrayIcon * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QSystemTrayIcon_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QSystemTrayIcon::tr(s));
}

extern "C" CrystalString bg_QSystemTrayIcon_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QSystemTrayIcon::tr(s, c));
}

extern "C" CrystalString bg_QSystemTrayIcon_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QSystemTrayIcon::tr(s, c, n));
}

extern "C" CrystalString bg_QSystemTrayIcon_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QSystemTrayIcon::trUtf8(s));
}

extern "C" CrystalString bg_QSystemTrayIcon_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QSystemTrayIcon::trUtf8(s, c));
}

extern "C" CrystalString bg_QSystemTrayIcon_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QSystemTrayIcon::trUtf8(s, c, n));
}

extern "C" QSystemTrayIcon * bg_QSystemTrayIcon__CONSTRUCT_QObject_X(QObject * parent) {
  return new (UseGC) BgInherit_SystemTrayIcon(parent);
}

extern "C" QSystemTrayIcon * bg_QSystemTrayIcon__CONSTRUCT_const_QIcon_R_QObject_X(const QIcon & icon, QObject * parent) {
  return new (UseGC) BgInherit_SystemTrayIcon(icon, parent);
}

extern "C" void bg_QSystemTrayIcon_setContextMenu_QMenu_X(QSystemTrayIcon * _self_, QMenu * menu) {
  _self_->setContextMenu(menu);
}

extern "C" QMenu * bg_QSystemTrayIcon_contextMenu_(QSystemTrayIcon * _self_) {
  return _self_->contextMenu();
}

extern "C" QIcon * bg_QSystemTrayIcon_icon_(QSystemTrayIcon * _self_) {
  return new (UseGC) QIcon (_self_->icon());
}

extern "C" void bg_QSystemTrayIcon_setIcon_const_QIcon_R(QSystemTrayIcon * _self_, const QIcon & icon) {
  _self_->setIcon(icon);
}

extern "C" CrystalString bg_QSystemTrayIcon_toolTip_(QSystemTrayIcon * _self_) {
  return qstring_to_crystal(_self_->toolTip());
}

extern "C" void bg_QSystemTrayIcon_setToolTip_const_QString_R(QSystemTrayIcon * _self_, const CrystalString tip) {
  _self_->setToolTip(QString::fromUtf8(tip.ptr, tip.size));
}

extern "C" bool bg_QSystemTrayIcon_isSystemTrayAvailable_STATIC_() {
  return QSystemTrayIcon::isSystemTrayAvailable();
}

extern "C" bool bg_QSystemTrayIcon_supportsMessages_STATIC_() {
  return QSystemTrayIcon::supportsMessages();
}

extern "C" QRect * bg_QSystemTrayIcon_geometry_(QSystemTrayIcon * _self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" bool bg_QSystemTrayIcon_isVisible_(QSystemTrayIcon * _self_) {
  return _self_->isVisible();
}

extern "C" void bg_QSystemTrayIcon_setVisible_bool(QSystemTrayIcon * _self_, bool visible) {
  _self_->setVisible(visible);
}

extern "C" void bg_QSystemTrayIcon_show_(QSystemTrayIcon * _self_) {
  _self_->show();
}

extern "C" void bg_QSystemTrayIcon_hide_(QSystemTrayIcon * _self_) {
  _self_->hide();
}

extern "C" void bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_QSystemTrayIcon__MessageIcon_int(QSystemTrayIcon * _self_, const CrystalString title, const CrystalString msg, QSystemTrayIcon::MessageIcon icon, int msecs) {
  _self_->showMessage(QString::fromUtf8(title.ptr, title.size), QString::fromUtf8(msg.ptr, msg.size), icon, msecs);
}

extern "C" void bg_QSystemTrayIcon_activated_QSystemTrayIcon__ActivationReason(QSystemTrayIcon * _self_, QSystemTrayIcon::ActivationReason reason) {
  _self_->activated(reason);
}

extern "C" void bg_QSystemTrayIcon_messageClicked_(QSystemTrayIcon * _self_) {
  _self_->messageClicked();
}

extern "C" bool bg_QSystemTrayIcon_event_QEvent_X(QSystemTrayIcon * _self_, QEvent * event) {
  return _self_->event(event);
}

extern "C" QMetaObject::Connection * bg_QSystemTrayIcon_CONNECT_activated_CrystalProc_void_QSystemTrayIcon__ActivationReason(QSystemTrayIcon * _self_, CrystalProc<void, QSystemTrayIcon::ActivationReason> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QSystemTrayIcon::*)(QSystemTrayIcon::ActivationReason))&QSystemTrayIcon::activated, [_proc_](QSystemTrayIcon::ActivationReason reason){ _proc_(reason); }));
}

extern "C" QMetaObject::Connection * bg_QSystemTrayIcon_CONNECT_messageClicked_CrystalProc_void(QSystemTrayIcon * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QSystemTrayIcon::*)())&QSystemTrayIcon::messageClicked, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_SystemTrayIcon_JUMPTABLE_BgJumptable_SystemTrayIcon_R(BgInherit_SystemTrayIcon * _self_, const BgJumptable_SystemTrayIcon & table) {
  _self_->bgJump = (table);
}

extern "C" bool bg_QDesktopServices_openUrl_STATIC_const_QUrl_R(const QUrl & url) {
  return QDesktopServices::openUrl(url);
}

extern "C" void bg_QDesktopServices_setUrlHandler_STATIC_const_QString_R_QObject_X_const_char_X(const CrystalString scheme, QObject * receiver, const char * method) {
  QDesktopServices::setUrlHandler(QString::fromUtf8(scheme.ptr, scheme.size), receiver, method);
}

extern "C" void bg_QDesktopServices_unsetUrlHandler_STATIC_const_QString_R(const CrystalString scheme) {
  QDesktopServices::unsetUrlHandler(QString::fromUtf8(scheme.ptr, scheme.size));
}

extern "C" QDesktopServices * bg_QDesktopServices__CONSTRUCT_() {
  return new (UseGC) QDesktopServices();
}

struct BgJumptable_DesktopWidget {
  CrystalProc<const QMetaObject *> bg_QDesktopWidget_metaObject_;
  CrystalProc<void *, const char *> bg_QDesktopWidget_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<void, QResizeEvent *> bg_QDesktopWidget_resizeEvent_QResizeEvent_X;
  CrystalProc<int> bg_QWidget_devType_;
  CrystalProc<void, bool> bg_QWidget_setVisible_bool;
  CrystalProc<QSize &> bg_QWidget_sizeHint_;
  CrystalProc<QSize &> bg_QWidget_minimumSizeHint_;
  CrystalProc<int, int> bg_QWidget_heightForWidth_int;
  CrystalProc<bool> bg_QWidget_hasHeightForWidth_;
  CrystalProc<QPaintEngine *> bg_QWidget_paintEngine_;
  CrystalProc<bool, QEvent *> bg_QWidget_event_QEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWidget_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWidget_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWidget_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWidget_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_enterEvent_QEvent_X;
  CrystalProc<void, QEvent *> bg_QWidget_leaveEvent_QEvent_X;
  CrystalProc<void, QPaintEvent *> bg_QWidget_paintEvent_QPaintEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWidget_moveEvent_QMoveEvent_X;
  CrystalProc<void, QCloseEvent *> bg_QWidget_closeEvent_QCloseEvent_X;
  CrystalProc<void, QContextMenuEvent *> bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWidget_tabletEvent_QTabletEvent_X;
  CrystalProc<void, QActionEvent *> bg_QWidget_actionEvent_QActionEvent_X;
  CrystalProc<void, QDragEnterEvent *> bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
  CrystalProc<void, QDragMoveEvent *> bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
  CrystalProc<void, QDragLeaveEvent *> bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
  CrystalProc<void, QDropEvent *> bg_QWidget_dropEvent_QDropEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWidget_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWidget_hideEvent_QHideEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<void, QEvent *> bg_QWidget_changeEvent_QEvent_X;
  CrystalProc<int, QPaintDevice::PaintDeviceMetric> bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
  CrystalProc<void, QPainter *> bg_QWidget_initPainter_QPainter_X;
  CrystalProc<QPainter *> bg_QWidget_sharedPainter_;
  CrystalProc<void, QInputMethodEvent *> bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
  CrystalProc<CrystalVariant, Qt::InputMethodQuery> bg_QWidget_inputMethodQuery_Qt__InputMethodQuery;
  CrystalProc<bool, bool> bg_QWidget_focusNextPrevChild_bool;
};
struct BgInherit_DesktopWidget : public QDesktopWidget {
  using QDesktopWidget::QDesktopWidget;
  BgJumptable_DesktopWidget bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QDesktopWidget_metaObject_.isValid()) {
      return _self_->bgJump.bg_QDesktopWidget_metaObject_();
    } else {
      return QDesktopWidget::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QDesktopWidget_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QDesktopWidget_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QDesktopWidget::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QDesktopWidget::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  void resizeEvent(QResizeEvent * e) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QDesktopWidget_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QDesktopWidget_resizeEvent_QResizeEvent_X(e);
    } else {
      QDesktopWidget::resizeEvent(e);
    }
  }
  
  int devType() const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_devType_.isValid()) {
      return _self_->bgJump.bg_QWidget_devType_();
    } else {
      return QDesktopWidget::devType();
    }
  }
  
  void setVisible(bool visible) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_setVisible_bool.isValid()) {
      _self_->bgJump.bg_QWidget_setVisible_bool(visible);
    } else {
      QDesktopWidget::setVisible(visible);
    }
  }
  
  QSize sizeHint() const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_sizeHint_();
    } else {
      return QDesktopWidget::sizeHint();
    }
  }
  
  QSize minimumSizeHint() const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_minimumSizeHint_.isValid()) {
      return _self_->bgJump.bg_QWidget_minimumSizeHint_();
    } else {
      return QDesktopWidget::minimumSizeHint();
    }
  }
  
  int heightForWidth(int unnamed_arg_0) const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_heightForWidth_int.isValid()) {
      return _self_->bgJump.bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QDesktopWidget::heightForWidth(unnamed_arg_0);
    }
  }
  
  bool hasHeightForWidth() const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hasHeightForWidth_.isValid()) {
      return _self_->bgJump.bg_QWidget_hasHeightForWidth_();
    } else {
      return QDesktopWidget::hasHeightForWidth();
    }
  }
  
  QPaintEngine * paintEngine() const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEngine_.isValid()) {
      return _self_->bgJump.bg_QWidget_paintEngine_();
    } else {
      return QDesktopWidget::paintEngine();
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QWidget_event_QEvent_X(unnamed_arg_0);
    } else {
      return QDesktopWidget::event(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::wheelEvent(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void enterEvent(QEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_enterEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::enterEvent(unnamed_arg_0);
    }
  }
  
  void leaveEvent(QEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::leaveEvent(unnamed_arg_0);
    }
  }
  
  void paintEvent(QPaintEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::paintEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::moveEvent(unnamed_arg_0);
    }
  }
  
  void closeEvent(QCloseEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::closeEvent(unnamed_arg_0);
    }
  }
  
  void contextMenuEvent(QContextMenuEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::contextMenuEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::tabletEvent(unnamed_arg_0);
    }
  }
  
  void actionEvent(QActionEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::actionEvent(unnamed_arg_0);
    }
  }
  
  void dragEnterEvent(QDragEnterEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::dragEnterEvent(unnamed_arg_0);
    }
  }
  
  void dragMoveEvent(QDragMoveEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::dragMoveEvent(unnamed_arg_0);
    }
  }
  
  void dragLeaveEvent(QDragLeaveEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::dragLeaveEvent(unnamed_arg_0);
    }
  }
  
  void dropEvent(QDropEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::dropEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::hideEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QDesktopWidget::nativeEvent(eventType, message, result);
    }
  }
  
  void changeEvent(QEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_changeEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::changeEvent(unnamed_arg_0);
    }
  }
  
  int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return _self_->bgJump.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QDesktopWidget::metric(unnamed_arg_0);
    }
  }
  
  void initPainter(QPainter * painter) const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_initPainter_QPainter_X.isValid()) {
      _self_->bgJump.bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      QDesktopWidget::initPainter(painter);
    }
  }
  
  QPainter * sharedPainter() const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_sharedPainter_.isValid()) {
      return _self_->bgJump.bg_QWidget_sharedPainter_();
    } else {
      return QDesktopWidget::sharedPainter();
    }
  }
  
  void inputMethodEvent(QInputMethodEvent * unnamed_arg_0) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      _self_->bgJump.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      QDesktopWidget::inputMethodEvent(unnamed_arg_0);
    }
  }
  
  QVariant inputMethodQuery(Qt::InputMethodQuery unnamed_arg_0) const override {
    const BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(unnamed_arg_0));
    } else {
      return QDesktopWidget::inputMethodQuery(unnamed_arg_0);
    }
  }
  
  bool focusNextPrevChild(bool next) override {
    BgInherit_DesktopWidget *_self_ = this;
    if (_self_->bgJump.bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return _self_->bgJump.bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QDesktopWidget::focusNextPrevChild(next);
    }
  }
  
};
extern "C" const QMetaObject * bg_QDesktopWidget_metaObject_(QDesktopWidget * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QDesktopWidget_qt_metacast_const_char_X(QDesktopWidget * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX(QDesktopWidget * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QDesktopWidget_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDesktopWidget::tr(s));
}

extern "C" CrystalString bg_QDesktopWidget_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDesktopWidget::tr(s, c));
}

extern "C" CrystalString bg_QDesktopWidget_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDesktopWidget::tr(s, c, n));
}

extern "C" CrystalString bg_QDesktopWidget_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QDesktopWidget::trUtf8(s));
}

extern "C" CrystalString bg_QDesktopWidget_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QDesktopWidget::trUtf8(s, c));
}

extern "C" CrystalString bg_QDesktopWidget_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QDesktopWidget::trUtf8(s, c, n));
}

extern "C" QDesktopWidget * bg_QDesktopWidget__CONSTRUCT_() {
  return new (UseGC) BgInherit_DesktopWidget();
}

extern "C" bool bg_QDesktopWidget_isVirtualDesktop_(QDesktopWidget * _self_) {
  return _self_->isVirtualDesktop();
}

extern "C" int bg_QDesktopWidget_numScreens_(QDesktopWidget * _self_) {
  return _self_->numScreens();
}

extern "C" int bg_QDesktopWidget_screenCount_(QDesktopWidget * _self_) {
  return _self_->screenCount();
}

extern "C" int bg_QDesktopWidget_primaryScreen_(QDesktopWidget * _self_) {
  return _self_->primaryScreen();
}

extern "C" int bg_QDesktopWidget_screenNumber_const_QWidget_X(QDesktopWidget * _self_, const QWidget * widget) {
  return _self_->screenNumber(widget);
}

extern "C" int bg_QDesktopWidget_screenNumber_const_QPoint_R(QDesktopWidget * _self_, const QPoint unnamed_arg_0) {
  return _self_->screenNumber(unnamed_arg_0);
}

extern "C" QWidget * bg_QDesktopWidget_screen_int(QDesktopWidget * _self_, int screen) {
  return _self_->screen(screen);
}

extern "C" const QRect * bg_QDesktopWidget_screenGeometry_int(QDesktopWidget * _self_, int screen) {
  return new (UseGC) QRect (_self_->screenGeometry(screen));
}

extern "C" const QRect * bg_QDesktopWidget_screenGeometry_const_QWidget_X(QDesktopWidget * _self_, const QWidget * widget) {
  return new (UseGC) QRect (_self_->screenGeometry(widget));
}

extern "C" const QRect * bg_QDesktopWidget_screenGeometry_const_QPoint_R(QDesktopWidget * _self_, const QPoint point) {
  return new (UseGC) QRect (_self_->screenGeometry(point));
}

extern "C" const QRect * bg_QDesktopWidget_availableGeometry_int(QDesktopWidget * _self_, int screen) {
  return new (UseGC) QRect (_self_->availableGeometry(screen));
}

extern "C" const QRect * bg_QDesktopWidget_availableGeometry_const_QWidget_X(QDesktopWidget * _self_, const QWidget * widget) {
  return new (UseGC) QRect (_self_->availableGeometry(widget));
}

extern "C" const QRect * bg_QDesktopWidget_availableGeometry_const_QPoint_R(QDesktopWidget * _self_, const QPoint point) {
  return new (UseGC) QRect (_self_->availableGeometry(point));
}

extern "C" void bg_QDesktopWidget_resized_int(QDesktopWidget * _self_, int unnamed_arg_0) {
  _self_->resized(unnamed_arg_0);
}

extern "C" void bg_QDesktopWidget_workAreaResized_int(QDesktopWidget * _self_, int unnamed_arg_0) {
  _self_->workAreaResized(unnamed_arg_0);
}

extern "C" void bg_QDesktopWidget_screenCountChanged_int(QDesktopWidget * _self_, int unnamed_arg_0) {
  _self_->screenCountChanged(unnamed_arg_0);
}

extern "C" void bg_QDesktopWidget_primaryScreenChanged_(QDesktopWidget * _self_) {
  _self_->primaryScreenChanged();
}

extern "C" void bg_QDesktopWidget_resizeEvent_QResizeEvent_X(QDesktopWidget * _self_, QResizeEvent * e) {
  _self_->resizeEvent(e);
}

extern "C" QMetaObject::Connection * bg_QDesktopWidget_CONNECT_resized_CrystalProc_void_int(QDesktopWidget * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDesktopWidget::*)(int))&QDesktopWidget::resized, [_proc_](int unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QDesktopWidget_CONNECT_workAreaResized_CrystalProc_void_int(QDesktopWidget * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDesktopWidget::*)(int))&QDesktopWidget::workAreaResized, [_proc_](int unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QDesktopWidget_CONNECT_screenCountChanged_CrystalProc_void_int(QDesktopWidget * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDesktopWidget::*)(int))&QDesktopWidget::screenCountChanged, [_proc_](int unnamed_arg_0){ _proc_(unnamed_arg_0); }));
}

extern "C" QMetaObject::Connection * bg_QDesktopWidget_CONNECT_primaryScreenChanged_CrystalProc_void(QDesktopWidget * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDesktopWidget::*)())&QDesktopWidget::primaryScreenChanged, [_proc_](){ _proc_(); }));
}

extern "C" void bg_BgInherit_DesktopWidget_JUMPTABLE_BgJumptable_DesktopWidget_R(BgInherit_DesktopWidget * _self_, const BgJumptable_DesktopWidget & table) {
  _self_->bgJump = (table);
}

extern "C" CrystalString bg_QStandardPaths_writableLocation_STATIC_QStandardPaths__StandardLocation(QStandardPaths::StandardLocation type) {
  return qstring_to_crystal(QStandardPaths::writableLocation(type));
}

extern "C" QStringList * bg_QStandardPaths_standardLocations_STATIC_QStandardPaths__StandardLocation(QStandardPaths::StandardLocation type) {
  return new (UseGC) QStringList (QStandardPaths::standardLocations(type));
}

extern "C" CrystalString bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R(QStandardPaths::StandardLocation type, const CrystalString fileName) {
  return qstring_to_crystal(QStandardPaths::locate(type, QString::fromUtf8(fileName.ptr, fileName.size)));
}

extern "C" CrystalString bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(QStandardPaths::StandardLocation type, const CrystalString fileName, QStandardPaths::LocateOptions options) {
  return qstring_to_crystal(QStandardPaths::locate(type, QString::fromUtf8(fileName.ptr, fileName.size), options));
}

extern "C" QStringList * bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R(QStandardPaths::StandardLocation type, const CrystalString fileName) {
  return new (UseGC) QStringList (QStandardPaths::locateAll(type, QString::fromUtf8(fileName.ptr, fileName.size)));
}

extern "C" QStringList * bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(QStandardPaths::StandardLocation type, const CrystalString fileName, QStandardPaths::LocateOptions options) {
  return new (UseGC) QStringList (QStandardPaths::locateAll(type, QString::fromUtf8(fileName.ptr, fileName.size), options));
}

extern "C" CrystalString bg_QStandardPaths_displayName_STATIC_QStandardPaths__StandardLocation(QStandardPaths::StandardLocation type) {
  return qstring_to_crystal(QStandardPaths::displayName(type));
}

extern "C" CrystalString bg_QStandardPaths_findExecutable_STATIC_const_QString_R(const CrystalString executableName) {
  return qstring_to_crystal(QStandardPaths::findExecutable(QString::fromUtf8(executableName.ptr, executableName.size)));
}

extern "C" CrystalString bg_QStandardPaths_findExecutable_STATIC_const_QString_R_const_QStringList_R(const CrystalString executableName, const QStringList & paths) {
  return qstring_to_crystal(QStandardPaths::findExecutable(QString::fromUtf8(executableName.ptr, executableName.size), paths));
}

extern "C" void bg_QStandardPaths_enableTestMode_STATIC_bool(bool testMode) {
  QStandardPaths::enableTestMode(testMode);
}

extern "C" void bg_QStandardPaths_setTestModeEnabled_STATIC_bool(bool testMode) {
  QStandardPaths::setTestModeEnabled(testMode);
}

extern "C" bool bg_QStandardPaths_isTestModeEnabled_STATIC_() {
  return QStandardPaths::isTestModeEnabled();
}

struct BgJumptable_MimeData {
  CrystalProc<const QMetaObject *> bg_QMimeData_metaObject_;
  CrystalProc<void *, const char *> bg_QMimeData_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, const CrystalString> bg_QMimeData_hasFormat_const_QString_R;
  CrystalProc<QStringList &> bg_QMimeData_formats_;
  CrystalProc<CrystalVariant, const CrystalString, QVariant::Type> bg_QMimeData_retrieveData_const_QString_R_QVariant__Type;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_MimeData : public QMimeData {
  using QMimeData::QMimeData;
  BgJumptable_MimeData bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QMimeData_metaObject_.isValid()) {
      return _self_->bgJump.bg_QMimeData_metaObject_();
    } else {
      return QMimeData::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QMimeData_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QMimeData_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QMimeData::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QMimeData::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool hasFormat(const QString & mimetype) const override {
    const BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QMimeData_hasFormat_const_QString_R.isValid()) {
      return _self_->bgJump.bg_QMimeData_hasFormat_const_QString_R(qstring_to_crystal(mimetype));
    } else {
      return QMimeData::hasFormat(mimetype);
    }
  }
  
  QStringList formats() const override {
    const BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QMimeData_formats_.isValid()) {
      return _self_->bgJump.bg_QMimeData_formats_();
    } else {
      return QMimeData::formats();
    }
  }
  
  QVariant retrieveData(const QString & mimetype, QVariant::Type preferredType) const override {
    const BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QMimeData_retrieveData_const_QString_R_QVariant__Type.isValid()) {
      return crystal_to_qvariant(_self_->bgJump.bg_QMimeData_retrieveData_const_QString_R_QVariant__Type(qstring_to_crystal(mimetype), preferredType));
    } else {
      return QMimeData::retrieveData(mimetype, preferredType);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QMimeData::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QMimeData::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QMimeData::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QMimeData::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QMimeData::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QMimeData::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_MimeData *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QMimeData::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QMimeData_metaObject_(QMimeData * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QMimeData_qt_metacast_const_char_X(QMimeData * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX(QMimeData * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QMimeData_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QMimeData::tr(s));
}

extern "C" CrystalString bg_QMimeData_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QMimeData::tr(s, c));
}

extern "C" CrystalString bg_QMimeData_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QMimeData::tr(s, c, n));
}

extern "C" CrystalString bg_QMimeData_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QMimeData::trUtf8(s));
}

extern "C" CrystalString bg_QMimeData_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QMimeData::trUtf8(s, c));
}

extern "C" CrystalString bg_QMimeData_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QMimeData::trUtf8(s, c, n));
}

extern "C" QMimeData * bg_QMimeData__CONSTRUCT_() {
  return new (UseGC) BgInherit_MimeData();
}

extern "C" Container_QList_QUrl * bg_QMimeData_urls_(QMimeData * _self_) {
  return new (UseGC) Container_QList_QUrl (_self_->urls());
}

extern "C" void bg_QMimeData_setUrls_const_QList_QUrl__R(QMimeData * _self_, const Container_QList_QUrl * urls) {
  _self_->setUrls(*(urls));
}

extern "C" bool bg_QMimeData_hasUrls_(QMimeData * _self_) {
  return _self_->hasUrls();
}

extern "C" CrystalString bg_QMimeData_text_(QMimeData * _self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" void bg_QMimeData_setText_const_QString_R(QMimeData * _self_, const CrystalString text) {
  _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" bool bg_QMimeData_hasText_(QMimeData * _self_) {
  return _self_->hasText();
}

extern "C" CrystalString bg_QMimeData_html_(QMimeData * _self_) {
  return qstring_to_crystal(_self_->html());
}

extern "C" void bg_QMimeData_setHtml_const_QString_R(QMimeData * _self_, const CrystalString html) {
  _self_->setHtml(QString::fromUtf8(html.ptr, html.size));
}

extern "C" bool bg_QMimeData_hasHtml_(QMimeData * _self_) {
  return _self_->hasHtml();
}

extern "C" CrystalVariant bg_QMimeData_imageData_(QMimeData * _self_) {
  return qvariant_to_crystal(_self_->imageData());
}

extern "C" void bg_QMimeData_setImageData_const_QVariant_R(QMimeData * _self_, const CrystalVariant image) {
  _self_->setImageData(crystal_to_qvariant(image));
}

extern "C" bool bg_QMimeData_hasImage_(QMimeData * _self_) {
  return _self_->hasImage();
}

extern "C" CrystalVariant bg_QMimeData_colorData_(QMimeData * _self_) {
  return qvariant_to_crystal(_self_->colorData());
}

extern "C" void bg_QMimeData_setColorData_const_QVariant_R(QMimeData * _self_, const CrystalVariant color) {
  _self_->setColorData(crystal_to_qvariant(color));
}

extern "C" bool bg_QMimeData_hasColor_(QMimeData * _self_) {
  return _self_->hasColor();
}

extern "C" QByteArray * bg_QMimeData_data_const_QString_R(QMimeData * _self_, const CrystalString mimetype) {
  return new (UseGC) QByteArray (_self_->data(QString::fromUtf8(mimetype.ptr, mimetype.size)));
}

extern "C" void bg_QMimeData_setData_const_QString_R_const_QByteArray_R(QMimeData * _self_, const CrystalString mimetype, const QByteArray & data) {
  _self_->setData(QString::fromUtf8(mimetype.ptr, mimetype.size), data);
}

extern "C" void bg_QMimeData_removeFormat_const_QString_R(QMimeData * _self_, const CrystalString mimetype) {
  _self_->removeFormat(QString::fromUtf8(mimetype.ptr, mimetype.size));
}

extern "C" bool bg_QMimeData_hasFormat_const_QString_R(QMimeData * _self_, const CrystalString mimetype) {
  return _self_->hasFormat(QString::fromUtf8(mimetype.ptr, mimetype.size));
}

extern "C" QStringList * bg_QMimeData_formats_(QMimeData * _self_) {
  return new (UseGC) QStringList (_self_->formats());
}

extern "C" void bg_QMimeData_clear_(QMimeData * _self_) {
  _self_->clear();
}

extern "C" CrystalVariant bg_QMimeData_retrieveData_const_QString_R_QVariant__Type(QMimeData * _self_, const CrystalString mimetype, QVariant::Type preferredType) {
  return qvariant_to_crystal(_self_->retrieveData(QString::fromUtf8(mimetype.ptr, mimetype.size), preferredType));
}

extern "C" void bg_BgInherit_MimeData_JUMPTABLE_BgJumptable_MimeData_R(BgInherit_MimeData * _self_, const BgJumptable_MimeData & table) {
  _self_->bgJump = (table);
}

extern "C" QSizePolicy * bg_QSizePolicy__CONSTRUCT_() {
  return new (UseGC) QSizePolicy();
}

extern "C" QSizePolicy * bg_QSizePolicy__CONSTRUCT_QSizePolicy__Policy_QSizePolicy__Policy_QSizePolicy__ControlType(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical, QSizePolicy::ControlType type) {
  return new (UseGC) QSizePolicy(horizontal, vertical, type);
}

extern "C" QSizePolicy::Policy bg_QSizePolicy_horizontalPolicy_(QSizePolicy * _self_) {
  return _self_->horizontalPolicy();
}

extern "C" QSizePolicy::Policy bg_QSizePolicy_verticalPolicy_(QSizePolicy * _self_) {
  return _self_->verticalPolicy();
}

extern "C" QSizePolicy::ControlType bg_QSizePolicy_controlType_(QSizePolicy * _self_) {
  return _self_->controlType();
}

extern "C" void bg_QSizePolicy_setHorizontalPolicy_QSizePolicy__Policy(QSizePolicy * _self_, QSizePolicy::Policy d) {
  _self_->setHorizontalPolicy(d);
}

extern "C" void bg_QSizePolicy_setVerticalPolicy_QSizePolicy__Policy(QSizePolicy * _self_, QSizePolicy::Policy d) {
  _self_->setVerticalPolicy(d);
}

extern "C" void bg_QSizePolicy_setControlType_QSizePolicy__ControlType(QSizePolicy * _self_, QSizePolicy::ControlType type) {
  _self_->setControlType(type);
}

extern "C" Qt::Orientations bg_QSizePolicy_expandingDirections_(QSizePolicy * _self_) {
  return _self_->expandingDirections();
}

extern "C" void bg_QSizePolicy_setHeightForWidth_bool(QSizePolicy * _self_, bool b) {
  _self_->setHeightForWidth(b);
}

extern "C" bool bg_QSizePolicy_hasHeightForWidth_(QSizePolicy * _self_) {
  return _self_->hasHeightForWidth();
}

extern "C" void bg_QSizePolicy_setWidthForHeight_bool(QSizePolicy * _self_, bool b) {
  _self_->setWidthForHeight(b);
}

extern "C" bool bg_QSizePolicy_hasWidthForHeight_(QSizePolicy * _self_) {
  return _self_->hasWidthForHeight();
}

extern "C" int bg_QSizePolicy_horizontalStretch_(QSizePolicy * _self_) {
  return _self_->horizontalStretch();
}

extern "C" int bg_QSizePolicy_verticalStretch_(QSizePolicy * _self_) {
  return _self_->verticalStretch();
}

extern "C" void bg_QSizePolicy_setHorizontalStretch_int(QSizePolicy * _self_, int stretchFactor) {
  _self_->setHorizontalStretch(stretchFactor);
}

extern "C" void bg_QSizePolicy_setVerticalStretch_int(QSizePolicy * _self_, int stretchFactor) {
  _self_->setVerticalStretch(stretchFactor);
}

extern "C" bool bg_QSizePolicy_retainSizeWhenHidden_(QSizePolicy * _self_) {
  return _self_->retainSizeWhenHidden();
}

extern "C" void bg_QSizePolicy_setRetainSizeWhenHidden_bool(QSizePolicy * _self_, bool retainSize) {
  _self_->setRetainSizeWhenHidden(retainSize);
}

extern "C" void bg_QSizePolicy_transpose_(QSizePolicy * _self_) {
  _self_->transpose();
}

extern "C" QUrl * bg_QUrl__CONSTRUCT_() {
  return new (UseGC) QUrl();
}

extern "C" QUrl * bg_QUrl__CONSTRUCT_const_QString_R_QUrl__ParsingMode(const CrystalString url, QUrl::ParsingMode mode) {
  return new (UseGC) QUrl(QString::fromUtf8(url.ptr, url.size), mode);
}

extern "C" void bg_QUrl_swap_QUrl_R(QUrl * _self_, QUrl & other) {
  _self_->swap(other);
}

extern "C" void bg_QUrl_setUrl_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString url, QUrl::ParsingMode mode) {
  _self_->setUrl(QString::fromUtf8(url.ptr, url.size), mode);
}

extern "C" CrystalString bg_QUrl_url_(QUrl * _self_) {
  return qstring_to_crystal(_self_->url());
}

extern "C" CrystalString bg_QUrl_url_QUrl__FormattingOptions(QUrl * _self_, QUrl::FormattingOptions options) {
  return qstring_to_crystal(_self_->url(options));
}

extern "C" CrystalString bg_QUrl_toString_(QUrl * _self_) {
  return qstring_to_crystal(_self_->toString());
}

extern "C" CrystalString bg_QUrl_toString_QUrl__FormattingOptions(QUrl * _self_, QUrl::FormattingOptions options) {
  return qstring_to_crystal(_self_->toString(options));
}

extern "C" CrystalString bg_QUrl_toDisplayString_(QUrl * _self_) {
  return qstring_to_crystal(_self_->toDisplayString());
}

extern "C" CrystalString bg_QUrl_toDisplayString_QUrl__FormattingOptions(QUrl * _self_, QUrl::FormattingOptions options) {
  return qstring_to_crystal(_self_->toDisplayString(options));
}

extern "C" QUrl * bg_QUrl_adjusted_QUrl__FormattingOptions(QUrl * _self_, QUrl::FormattingOptions options) {
  return new (UseGC) QUrl (_self_->adjusted(options));
}

extern "C" QByteArray * bg_QUrl_toEncoded_(QUrl * _self_) {
  return new (UseGC) QByteArray (_self_->toEncoded());
}

extern "C" QByteArray * bg_QUrl_toEncoded_QUrl__FormattingOptions(QUrl * _self_, QUrl::FormattingOptions options) {
  return new (UseGC) QByteArray (_self_->toEncoded(options));
}

extern "C" QUrl * bg_QUrl_fromEncoded_STATIC_const_QByteArray_R_QUrl__ParsingMode(const QByteArray & url, QUrl::ParsingMode mode) {
  return new (UseGC) QUrl (QUrl::fromEncoded(url, mode));
}

extern "C" QUrl * bg_QUrl_fromUserInput_STATIC_const_QString_R(const CrystalString userInput) {
  return new (UseGC) QUrl (QUrl::fromUserInput(QString::fromUtf8(userInput.ptr, userInput.size)));
}

extern "C" QUrl * bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R(const CrystalString userInput, const CrystalString workingDirectory) {
  return new (UseGC) QUrl (QUrl::fromUserInput(QString::fromUtf8(userInput.ptr, userInput.size), QString::fromUtf8(workingDirectory.ptr, workingDirectory.size)));
}

extern "C" QUrl * bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R_QUrl__UserInputResolutionOptions(const CrystalString userInput, const CrystalString workingDirectory, QUrl::UserInputResolutionOptions options) {
  return new (UseGC) QUrl (QUrl::fromUserInput(QString::fromUtf8(userInput.ptr, userInput.size), QString::fromUtf8(workingDirectory.ptr, workingDirectory.size), options));
}

extern "C" bool bg_QUrl_isValid_(QUrl * _self_) {
  return _self_->isValid();
}

extern "C" CrystalString bg_QUrl_errorString_(QUrl * _self_) {
  return qstring_to_crystal(_self_->errorString());
}

extern "C" bool bg_QUrl_isEmpty_(QUrl * _self_) {
  return _self_->isEmpty();
}

extern "C" void bg_QUrl_clear_(QUrl * _self_) {
  _self_->clear();
}

extern "C" void bg_QUrl_setScheme_const_QString_R(QUrl * _self_, const CrystalString scheme) {
  _self_->setScheme(QString::fromUtf8(scheme.ptr, scheme.size));
}

extern "C" CrystalString bg_QUrl_scheme_(QUrl * _self_) {
  return qstring_to_crystal(_self_->scheme());
}

extern "C" void bg_QUrl_setAuthority_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString authority, QUrl::ParsingMode mode) {
  _self_->setAuthority(QString::fromUtf8(authority.ptr, authority.size), mode);
}

extern "C" CrystalString bg_QUrl_authority_(QUrl * _self_) {
  return qstring_to_crystal(_self_->authority());
}

extern "C" CrystalString bg_QUrl_authority_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions options) {
  return qstring_to_crystal(_self_->authority(options));
}

extern "C" void bg_QUrl_setUserInfo_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString userInfo, QUrl::ParsingMode mode) {
  _self_->setUserInfo(QString::fromUtf8(userInfo.ptr, userInfo.size), mode);
}

extern "C" CrystalString bg_QUrl_userInfo_(QUrl * _self_) {
  return qstring_to_crystal(_self_->userInfo());
}

extern "C" CrystalString bg_QUrl_userInfo_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions options) {
  return qstring_to_crystal(_self_->userInfo(options));
}

extern "C" void bg_QUrl_setUserName_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString userName, QUrl::ParsingMode mode) {
  _self_->setUserName(QString::fromUtf8(userName.ptr, userName.size), mode);
}

extern "C" CrystalString bg_QUrl_userName_(QUrl * _self_) {
  return qstring_to_crystal(_self_->userName());
}

extern "C" CrystalString bg_QUrl_userName_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions options) {
  return qstring_to_crystal(_self_->userName(options));
}

extern "C" void bg_QUrl_setPassword_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString password, QUrl::ParsingMode mode) {
  _self_->setPassword(QString::fromUtf8(password.ptr, password.size), mode);
}

extern "C" CrystalString bg_QUrl_password_(QUrl * _self_) {
  return qstring_to_crystal(_self_->password());
}

extern "C" CrystalString bg_QUrl_password_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions unnamed_arg_0) {
  return qstring_to_crystal(_self_->password(unnamed_arg_0));
}

extern "C" void bg_QUrl_setHost_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString host, QUrl::ParsingMode mode) {
  _self_->setHost(QString::fromUtf8(host.ptr, host.size), mode);
}

extern "C" CrystalString bg_QUrl_host_(QUrl * _self_) {
  return qstring_to_crystal(_self_->host());
}

extern "C" CrystalString bg_QUrl_host_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions unnamed_arg_0) {
  return qstring_to_crystal(_self_->host(unnamed_arg_0));
}

extern "C" CrystalString bg_QUrl_topLevelDomain_(QUrl * _self_) {
  return qstring_to_crystal(_self_->topLevelDomain());
}

extern "C" CrystalString bg_QUrl_topLevelDomain_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions options) {
  return qstring_to_crystal(_self_->topLevelDomain(options));
}

extern "C" void bg_QUrl_setPort_int(QUrl * _self_, int port) {
  _self_->setPort(port);
}

extern "C" int bg_QUrl_port_int(QUrl * _self_, int defaultPort) {
  return _self_->port(defaultPort);
}

extern "C" void bg_QUrl_setPath_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString path, QUrl::ParsingMode mode) {
  _self_->setPath(QString::fromUtf8(path.ptr, path.size), mode);
}

extern "C" CrystalString bg_QUrl_path_(QUrl * _self_) {
  return qstring_to_crystal(_self_->path());
}

extern "C" CrystalString bg_QUrl_path_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions options) {
  return qstring_to_crystal(_self_->path(options));
}

extern "C" CrystalString bg_QUrl_fileName_(QUrl * _self_) {
  return qstring_to_crystal(_self_->fileName());
}

extern "C" CrystalString bg_QUrl_fileName_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions options) {
  return qstring_to_crystal(_self_->fileName(options));
}

extern "C" bool bg_QUrl_hasQuery_(QUrl * _self_) {
  return _self_->hasQuery();
}

extern "C" void bg_QUrl_setQuery_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString query, QUrl::ParsingMode mode) {
  _self_->setQuery(QString::fromUtf8(query.ptr, query.size), mode);
}

extern "C" void bg_QUrl_setQuery_const_QUrlQuery_R(QUrl * _self_, const QUrlQuery & query) {
  _self_->setQuery(query);
}

extern "C" CrystalString bg_QUrl_query_(QUrl * _self_) {
  return qstring_to_crystal(_self_->query());
}

extern "C" CrystalString bg_QUrl_query_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions unnamed_arg_0) {
  return qstring_to_crystal(_self_->query(unnamed_arg_0));
}

extern "C" bool bg_QUrl_hasFragment_(QUrl * _self_) {
  return _self_->hasFragment();
}

extern "C" CrystalString bg_QUrl_fragment_(QUrl * _self_) {
  return qstring_to_crystal(_self_->fragment());
}

extern "C" CrystalString bg_QUrl_fragment_QUrl__ComponentFormattingOptions(QUrl * _self_, QUrl::ComponentFormattingOptions options) {
  return qstring_to_crystal(_self_->fragment(options));
}

extern "C" void bg_QUrl_setFragment_const_QString_R_QUrl__ParsingMode(QUrl * _self_, const CrystalString fragment, QUrl::ParsingMode mode) {
  _self_->setFragment(QString::fromUtf8(fragment.ptr, fragment.size), mode);
}

extern "C" QUrl * bg_QUrl_resolved_const_QUrl_R(QUrl * _self_, const QUrl & relative) {
  return new (UseGC) QUrl (_self_->resolved(relative));
}

extern "C" bool bg_QUrl_isRelative_(QUrl * _self_) {
  return _self_->isRelative();
}

extern "C" bool bg_QUrl_isParentOf_const_QUrl_R(QUrl * _self_, const QUrl & url) {
  return _self_->isParentOf(url);
}

extern "C" bool bg_QUrl_isLocalFile_(QUrl * _self_) {
  return _self_->isLocalFile();
}

extern "C" QUrl * bg_QUrl_fromLocalFile_STATIC_const_QString_R(const CrystalString localfile) {
  return new (UseGC) QUrl (QUrl::fromLocalFile(QString::fromUtf8(localfile.ptr, localfile.size)));
}

extern "C" CrystalString bg_QUrl_toLocalFile_(QUrl * _self_) {
  return qstring_to_crystal(_self_->toLocalFile());
}

extern "C" void bg_QUrl_detach_(QUrl * _self_) {
  _self_->detach();
}

extern "C" bool bg_QUrl_isDetached_(QUrl * _self_) {
  return _self_->isDetached();
}

extern "C" bool bg_QUrl_matches_const_QUrl_R_QUrl__FormattingOptions(QUrl * _self_, const QUrl & url, QUrl::FormattingOptions options) {
  return _self_->matches(url, options);
}

extern "C" CrystalString bg_QUrl_fromPercentEncoding_STATIC_const_QByteArray_R(const QByteArray & unnamed_arg_0) {
  return qstring_to_crystal(QUrl::fromPercentEncoding(unnamed_arg_0));
}

extern "C" QByteArray * bg_QUrl_toPercentEncoding_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  return new (UseGC) QByteArray (QUrl::toPercentEncoding(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size)));
}

extern "C" QByteArray * bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R(const CrystalString unnamed_arg_0, const QByteArray & exclude) {
  return new (UseGC) QByteArray (QUrl::toPercentEncoding(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size), exclude));
}

extern "C" QByteArray * bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R_const_QByteArray_R(const CrystalString unnamed_arg_0, const QByteArray & exclude, const QByteArray & include) {
  return new (UseGC) QByteArray (QUrl::toPercentEncoding(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size), exclude, include));
}

extern "C" CrystalString bg_QUrl_fromAce_STATIC_const_QByteArray_R(const QByteArray & unnamed_arg_0) {
  return qstring_to_crystal(QUrl::fromAce(unnamed_arg_0));
}

extern "C" QByteArray * bg_QUrl_toAce_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  return new (UseGC) QByteArray (QUrl::toAce(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size)));
}

extern "C" QStringList * bg_QUrl_idnWhitelist_STATIC_() {
  return new (UseGC) QStringList (QUrl::idnWhitelist());
}

extern "C" QStringList * bg_QUrl_toStringList_STATIC_const_QList_QUrl__R(const Container_QList_QUrl * uris) {
  return new (UseGC) QStringList (QUrl::toStringList(*(uris)));
}

extern "C" QStringList * bg_QUrl_toStringList_STATIC_const_QList_QUrl__R_QUrl__FormattingOptions(const Container_QList_QUrl * uris, QUrl::FormattingOptions options) {
  return new (UseGC) QStringList (QUrl::toStringList(*(uris), options));
}

extern "C" Container_QList_QUrl * bg_QUrl_fromStringList_STATIC_const_QStringList_R_QUrl__ParsingMode(const QStringList & uris, QUrl::ParsingMode mode) {
  return new (UseGC) Container_QList_QUrl (QUrl::fromStringList(uris, mode));
}

extern "C" void bg_QUrl_setIdnWhitelist_STATIC_const_QStringList_R(const QStringList & unnamed_arg_0) {
  QUrl::setIdnWhitelist(unnamed_arg_0);
}

struct BgJumptable_Screen {
  CrystalProc<const QMetaObject *> bg_QScreen_metaObject_;
  CrystalProc<void *, const char *> bg_QScreen_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<bool, QEvent *> bg_QObject_event_QEvent_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_Screen : public QScreen {
  using QScreen::QScreen;
  BgJumptable_Screen bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QScreen_metaObject_.isValid()) {
      return _self_->bgJump.bg_QScreen_metaObject_();
    } else {
      return QScreen::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QScreen_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QScreen_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QScreen::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QScreen::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QObject_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_event_QEvent_X(unnamed_arg_0);
    } else {
      return QScreen::event(unnamed_arg_0);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QScreen::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QScreen::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QScreen::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QScreen::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QScreen::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Screen *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QScreen::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QScreen_metaObject_(QScreen * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QScreen_qt_metacast_const_char_X(QScreen * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX(QScreen * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QScreen_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QScreen::tr(s));
}

extern "C" CrystalString bg_QScreen_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QScreen::tr(s, c));
}

extern "C" CrystalString bg_QScreen_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QScreen::tr(s, c, n));
}

extern "C" CrystalString bg_QScreen_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QScreen::trUtf8(s));
}

extern "C" CrystalString bg_QScreen_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QScreen::trUtf8(s, c));
}

extern "C" CrystalString bg_QScreen_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QScreen::trUtf8(s, c, n));
}

extern "C" QPlatformScreen * bg_QScreen_handle_(QScreen * _self_) {
  return _self_->handle();
}

extern "C" CrystalString bg_QScreen_name_(QScreen * _self_) {
  return qstring_to_crystal(_self_->name());
}

extern "C" int bg_QScreen_depth_(QScreen * _self_) {
  return _self_->depth();
}

extern "C" QSize * bg_QScreen_size_(QScreen * _self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" QRect * bg_QScreen_geometry_(QScreen * _self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" QSizeF * bg_QScreen_physicalSize_(QScreen * _self_) {
  return new (UseGC) QSizeF (_self_->physicalSize());
}

extern "C" qreal bg_QScreen_physicalDotsPerInchX_(QScreen * _self_) {
  return _self_->physicalDotsPerInchX();
}

extern "C" qreal bg_QScreen_physicalDotsPerInchY_(QScreen * _self_) {
  return _self_->physicalDotsPerInchY();
}

extern "C" qreal bg_QScreen_physicalDotsPerInch_(QScreen * _self_) {
  return _self_->physicalDotsPerInch();
}

extern "C" qreal bg_QScreen_logicalDotsPerInchX_(QScreen * _self_) {
  return _self_->logicalDotsPerInchX();
}

extern "C" qreal bg_QScreen_logicalDotsPerInchY_(QScreen * _self_) {
  return _self_->logicalDotsPerInchY();
}

extern "C" qreal bg_QScreen_logicalDotsPerInch_(QScreen * _self_) {
  return _self_->logicalDotsPerInch();
}

extern "C" qreal bg_QScreen_devicePixelRatio_(QScreen * _self_) {
  return _self_->devicePixelRatio();
}

extern "C" QSize * bg_QScreen_availableSize_(QScreen * _self_) {
  return new (UseGC) QSize (_self_->availableSize());
}

extern "C" QRect * bg_QScreen_availableGeometry_(QScreen * _self_) {
  return new (UseGC) QRect (_self_->availableGeometry());
}

extern "C" Container_QList_QScreen_X * bg_QScreen_virtualSiblings_(QScreen * _self_) {
  return new (UseGC) Container_QList_QScreen_X (_self_->virtualSiblings());
}

extern "C" QSize * bg_QScreen_virtualSize_(QScreen * _self_) {
  return new (UseGC) QSize (_self_->virtualSize());
}

extern "C" QRect * bg_QScreen_virtualGeometry_(QScreen * _self_) {
  return new (UseGC) QRect (_self_->virtualGeometry());
}

extern "C" QSize * bg_QScreen_availableVirtualSize_(QScreen * _self_) {
  return new (UseGC) QSize (_self_->availableVirtualSize());
}

extern "C" QRect * bg_QScreen_availableVirtualGeometry_(QScreen * _self_) {
  return new (UseGC) QRect (_self_->availableVirtualGeometry());
}

extern "C" Qt::ScreenOrientation bg_QScreen_primaryOrientation_(QScreen * _self_) {
  return _self_->primaryOrientation();
}

extern "C" Qt::ScreenOrientation bg_QScreen_orientation_(QScreen * _self_) {
  return _self_->orientation();
}

extern "C" Qt::ScreenOrientation bg_QScreen_nativeOrientation_(QScreen * _self_) {
  return _self_->nativeOrientation();
}

extern "C" Qt::ScreenOrientations bg_QScreen_orientationUpdateMask_(QScreen * _self_) {
  return _self_->orientationUpdateMask();
}

extern "C" void bg_QScreen_setOrientationUpdateMask_Qt__ScreenOrientations(QScreen * _self_, Qt::ScreenOrientations mask) {
  _self_->setOrientationUpdateMask(mask);
}

extern "C" int bg_QScreen_angleBetween_Qt__ScreenOrientation_Qt__ScreenOrientation(QScreen * _self_, Qt::ScreenOrientation a, Qt::ScreenOrientation b) {
  return _self_->angleBetween(a, b);
}

extern "C" QTransform * bg_QScreen_transformBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(QScreen * _self_, Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect & target) {
  return new (UseGC) QTransform (_self_->transformBetween(a, b, target));
}

extern "C" QRect * bg_QScreen_mapBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(QScreen * _self_, Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect & rect) {
  return new (UseGC) QRect (_self_->mapBetween(a, b, rect));
}

extern "C" bool bg_QScreen_isPortrait_Qt__ScreenOrientation(QScreen * _self_, Qt::ScreenOrientation orientation) {
  return _self_->isPortrait(orientation);
}

extern "C" bool bg_QScreen_isLandscape_Qt__ScreenOrientation(QScreen * _self_, Qt::ScreenOrientation orientation) {
  return _self_->isLandscape(orientation);
}

extern "C" QPixmap * bg_QScreen_grabWindow_WId_int_int_int_int(QScreen * _self_, WId window, int x, int y, int w, int h) {
  return new (UseGC) QPixmap (_self_->grabWindow(window, x, y, w, h));
}

extern "C" qreal bg_QScreen_refreshRate_(QScreen * _self_) {
  return _self_->refreshRate();
}

extern "C" void bg_QScreen_geometryChanged_const_QRect_R(QScreen * _self_, const QRect & geometry) {
  _self_->geometryChanged(geometry);
}

extern "C" void bg_QScreen_availableGeometryChanged_const_QRect_R(QScreen * _self_, const QRect & geometry) {
  _self_->availableGeometryChanged(geometry);
}

extern "C" void bg_QScreen_physicalSizeChanged_const_QSizeF_R(QScreen * _self_, const QSizeF & size) {
  _self_->physicalSizeChanged(size);
}

extern "C" void bg_QScreen_physicalDotsPerInchChanged_qreal(QScreen * _self_, qreal dpi) {
  _self_->physicalDotsPerInchChanged(dpi);
}

extern "C" void bg_QScreen_logicalDotsPerInchChanged_qreal(QScreen * _self_, qreal dpi) {
  _self_->logicalDotsPerInchChanged(dpi);
}

extern "C" void bg_QScreen_virtualGeometryChanged_const_QRect_R(QScreen * _self_, const QRect & rect) {
  _self_->virtualGeometryChanged(rect);
}

extern "C" void bg_QScreen_primaryOrientationChanged_Qt__ScreenOrientation(QScreen * _self_, Qt::ScreenOrientation orientation) {
  _self_->primaryOrientationChanged(orientation);
}

extern "C" void bg_QScreen_orientationChanged_Qt__ScreenOrientation(QScreen * _self_, Qt::ScreenOrientation orientation) {
  _self_->orientationChanged(orientation);
}

extern "C" void bg_QScreen_refreshRateChanged_qreal(QScreen * _self_, qreal refreshRate) {
  _self_->refreshRateChanged(refreshRate);
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_geometryChanged_CrystalProc_void_const_QRect_R(QScreen * _self_, CrystalProc<void, const QRect *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(const QRect &))&QScreen::geometryChanged, [_proc_](const QRect & geometry){ _proc_(&(geometry)); }));
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_availableGeometryChanged_CrystalProc_void_const_QRect_R(QScreen * _self_, CrystalProc<void, const QRect *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(const QRect &))&QScreen::availableGeometryChanged, [_proc_](const QRect & geometry){ _proc_(&(geometry)); }));
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_physicalSizeChanged_CrystalProc_void_const_QSizeF_R(QScreen * _self_, CrystalProc<void, const QSizeF *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(const QSizeF &))&QScreen::physicalSizeChanged, [_proc_](const QSizeF & size){ _proc_(&(size)); }));
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_physicalDotsPerInchChanged_CrystalProc_void_qreal(QScreen * _self_, CrystalProc<void, qreal> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(qreal))&QScreen::physicalDotsPerInchChanged, [_proc_](qreal dpi){ _proc_(dpi); }));
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_logicalDotsPerInchChanged_CrystalProc_void_qreal(QScreen * _self_, CrystalProc<void, qreal> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(qreal))&QScreen::logicalDotsPerInchChanged, [_proc_](qreal dpi){ _proc_(dpi); }));
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_virtualGeometryChanged_CrystalProc_void_const_QRect_R(QScreen * _self_, CrystalProc<void, const QRect *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(const QRect &))&QScreen::virtualGeometryChanged, [_proc_](const QRect & rect){ _proc_(&(rect)); }));
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_primaryOrientationChanged_CrystalProc_void_Qt__ScreenOrientation(QScreen * _self_, CrystalProc<void, Qt::ScreenOrientation> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(Qt::ScreenOrientation))&QScreen::primaryOrientationChanged, [_proc_](Qt::ScreenOrientation orientation){ _proc_(orientation); }));
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_orientationChanged_CrystalProc_void_Qt__ScreenOrientation(QScreen * _self_, CrystalProc<void, Qt::ScreenOrientation> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(Qt::ScreenOrientation))&QScreen::orientationChanged, [_proc_](Qt::ScreenOrientation orientation){ _proc_(orientation); }));
}

extern "C" QMetaObject::Connection * bg_QScreen_CONNECT_refreshRateChanged_CrystalProc_void_qreal(QScreen * _self_, CrystalProc<void, qreal> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QScreen::*)(qreal))&QScreen::refreshRateChanged, [_proc_](qreal refreshRate){ _proc_(refreshRate); }));
}

extern "C" void bg_BgInherit_Screen_JUMPTABLE_BgJumptable_Screen_R(BgInherit_Screen * _self_, const BgJumptable_Screen & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Surface {
  CrystalProc<QSurfaceFormat &> bg_QSurface_format_;
  CrystalProc<QPlatformSurface *> bg_QSurface_surfaceHandle_;
  CrystalProc<QSurface::SurfaceType> bg_QSurface_surfaceType_;
  CrystalProc<QSize &> bg_QSurface_size_;
};
struct BgInherit_Surface : public QSurface {
  using QSurface::QSurface;
  BgJumptable_Surface bgJump;
  QSurfaceFormat format() const override {
    const BgInherit_Surface *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QSurface_format_.isValid())) {
      return _self_->bgJump.bg_QSurface_format_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QSurface::format");
    }
  }
  
  QPlatformSurface * surfaceHandle() const override {
    const BgInherit_Surface *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QSurface_surfaceHandle_.isValid())) {
      return _self_->bgJump.bg_QSurface_surfaceHandle_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QSurface::surfaceHandle");
    }
  }
  
  QSurface::SurfaceType surfaceType() const override {
    const BgInherit_Surface *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QSurface_surfaceType_.isValid())) {
      return _self_->bgJump.bg_QSurface_surfaceType_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QSurface::surfaceType");
    }
  }
  
  QSize size() const override {
    const BgInherit_Surface *_self_ = this;
    if (bindgen_likely(_self_->bgJump.bg_QSurface_size_.isValid())) {
      return _self_->bgJump.bg_QSurface_size_();
    } else {
      bindgen_fatal_panic("No implementation for pure method QSurface::size");
    }
  }
  
};
extern "C" QSurface::SurfaceClass bg_QSurface_surfaceClass_(QSurface * _self_) {
  return _self_->surfaceClass();
}

extern "C" QSurfaceFormat * bg_QSurface_format_(QSurface * _self_) {
  return new (UseGC) QSurfaceFormat (_self_->format());
}

extern "C" QPlatformSurface * bg_QSurface_surfaceHandle_(QSurface * _self_) {
  return _self_->surfaceHandle();
}

extern "C" QSurface::SurfaceType bg_QSurface_surfaceType_(QSurface * _self_) {
  return _self_->surfaceType();
}

extern "C" bool bg_QSurface_supportsOpenGL_(QSurface * _self_) {
  return _self_->supportsOpenGL();
}

extern "C" QSize * bg_QSurface_size_(QSurface * _self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" QSurface * bg_QSurface__CONSTRUCT_QSurface__SurfaceClass(QSurface::SurfaceClass type) {
  return new (UseGC) BgInherit_Surface(type);
}

extern "C" void bg_BgInherit_Surface_JUMPTABLE_BgJumptable_Surface_R(BgInherit_Surface * _self_, const BgJumptable_Surface & table) {
  _self_->bgJump = (table);
}

struct BgJumptable_Window {
  CrystalProc<const QMetaObject *> bg_QWindow_metaObject_;
  CrystalProc<void *, const char *> bg_QWindow_qt_metacast_const_char_X;
  CrystalProc<int, QMetaObject::Call, int, void **> bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX;
  CrystalProc<QSurface::SurfaceType> bg_QWindow_surfaceType_;
  CrystalProc<QSurfaceFormat &> bg_QWindow_format_;
  CrystalProc<QSize &> bg_QWindow_size_;
  CrystalProc<QAccessibleInterface *> bg_QWindow_accessibleRoot_;
  CrystalProc<QObject *> bg_QWindow_focusObject_;
  CrystalProc<void, QExposeEvent *> bg_QWindow_exposeEvent_QExposeEvent_X;
  CrystalProc<void, QResizeEvent *> bg_QWindow_resizeEvent_QResizeEvent_X;
  CrystalProc<void, QMoveEvent *> bg_QWindow_moveEvent_QMoveEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWindow_focusInEvent_QFocusEvent_X;
  CrystalProc<void, QFocusEvent *> bg_QWindow_focusOutEvent_QFocusEvent_X;
  CrystalProc<void, QShowEvent *> bg_QWindow_showEvent_QShowEvent_X;
  CrystalProc<void, QHideEvent *> bg_QWindow_hideEvent_QHideEvent_X;
  CrystalProc<bool, QEvent *> bg_QWindow_event_QEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWindow_keyPressEvent_QKeyEvent_X;
  CrystalProc<void, QKeyEvent *> bg_QWindow_keyReleaseEvent_QKeyEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWindow_mousePressEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWindow_mouseReleaseEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X;
  CrystalProc<void, QMouseEvent *> bg_QWindow_mouseMoveEvent_QMouseEvent_X;
  CrystalProc<void, QWheelEvent *> bg_QWindow_wheelEvent_QWheelEvent_X;
  CrystalProc<void, QTouchEvent *> bg_QWindow_touchEvent_QTouchEvent_X;
  CrystalProc<void, QTabletEvent *> bg_QWindow_tabletEvent_QTabletEvent_X;
  CrystalProc<bool, const QByteArray *, void *, long *> bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X;
  CrystalProc<bool, QObject *, QEvent *> bg_QObject_eventFilter_QObject_X_QEvent_X;
  CrystalProc<void, QTimerEvent *> bg_QObject_timerEvent_QTimerEvent_X;
  CrystalProc<void, QChildEvent *> bg_QObject_childEvent_QChildEvent_X;
  CrystalProc<void, QEvent *> bg_QObject_customEvent_QEvent_X;
  CrystalProc<void, const QMetaMethod *> bg_QObject_connectNotify_const_QMetaMethod_R;
  CrystalProc<void, const QMetaMethod *> bg_QObject_disconnectNotify_const_QMetaMethod_R;
  CrystalProc<QPlatformSurface *> bg_QSurface_surfaceHandle_;
};
struct BgInherit_Window : public QWindow {
  using QWindow::QWindow;
  BgJumptable_Window bgJump;
  const QMetaObject * metaObject() const override {
    const BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_metaObject_.isValid()) {
      return _self_->bgJump.bg_QWindow_metaObject_();
    } else {
      return QWindow::metaObject();
    }
  }
  
  void * qt_metacast(const char * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_qt_metacast_const_char_X.isValid()) {
      return _self_->bgJump.bg_QWindow_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QWindow::qt_metacast(unnamed_arg_0);
    }
  }
  
  int qt_metacall(QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX.isValid()) {
      return _self_->bgJump.bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    } else {
      return QWindow::qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
    }
  }
  
  QSurface::SurfaceType surfaceType() const override {
    const BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_surfaceType_.isValid()) {
      return _self_->bgJump.bg_QWindow_surfaceType_();
    } else {
      return QWindow::surfaceType();
    }
  }
  
  QSurfaceFormat format() const override {
    const BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_format_.isValid()) {
      return _self_->bgJump.bg_QWindow_format_();
    } else {
      return QWindow::format();
    }
  }
  
  QSize size() const override {
    const BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_size_.isValid()) {
      return _self_->bgJump.bg_QWindow_size_();
    } else {
      return QWindow::size();
    }
  }
  
  QAccessibleInterface * accessibleRoot() const override {
    const BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_accessibleRoot_.isValid()) {
      return _self_->bgJump.bg_QWindow_accessibleRoot_();
    } else {
      return QWindow::accessibleRoot();
    }
  }
  
  QObject * focusObject() const override {
    const BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_focusObject_.isValid()) {
      return _self_->bgJump.bg_QWindow_focusObject_();
    } else {
      return QWindow::focusObject();
    }
  }
  
  void exposeEvent(QExposeEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_exposeEvent_QExposeEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_exposeEvent_QExposeEvent_X(unnamed_arg_0);
    } else {
      QWindow::exposeEvent(unnamed_arg_0);
    }
  }
  
  void resizeEvent(QResizeEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_resizeEvent_QResizeEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      QWindow::resizeEvent(unnamed_arg_0);
    }
  }
  
  void moveEvent(QMoveEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_moveEvent_QMoveEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_moveEvent_QMoveEvent_X(unnamed_arg_0);
    } else {
      QWindow::moveEvent(unnamed_arg_0);
    }
  }
  
  void focusInEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_focusInEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QWindow::focusInEvent(unnamed_arg_0);
    }
  }
  
  void focusOutEvent(QFocusEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_focusOutEvent_QFocusEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      QWindow::focusOutEvent(unnamed_arg_0);
    }
  }
  
  void showEvent(QShowEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_showEvent_QShowEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      QWindow::showEvent(unnamed_arg_0);
    }
  }
  
  void hideEvent(QHideEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_hideEvent_QHideEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      QWindow::hideEvent(unnamed_arg_0);
    }
  }
  
  bool event(QEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_event_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QWindow_event_QEvent_X(unnamed_arg_0);
    } else {
      return QWindow::event(unnamed_arg_0);
    }
  }
  
  void keyPressEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_keyPressEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QWindow::keyPressEvent(unnamed_arg_0);
    }
  }
  
  void keyReleaseEvent(QKeyEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_keyReleaseEvent_QKeyEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_keyReleaseEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      QWindow::keyReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mousePressEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_mousePressEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QWindow::mousePressEvent(unnamed_arg_0);
    }
  }
  
  void mouseReleaseEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QWindow::mouseReleaseEvent(unnamed_arg_0);
    }
  }
  
  void mouseDoubleClickEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QWindow::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }
  
  void mouseMoveEvent(QMouseEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_mouseMoveEvent_QMouseEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      QWindow::mouseMoveEvent(unnamed_arg_0);
    }
  }
  
  void wheelEvent(QWheelEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_wheelEvent_QWheelEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      QWindow::wheelEvent(unnamed_arg_0);
    }
  }
  
  void touchEvent(QTouchEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_touchEvent_QTouchEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_touchEvent_QTouchEvent_X(unnamed_arg_0);
    } else {
      QWindow::touchEvent(unnamed_arg_0);
    }
  }
  
  void tabletEvent(QTabletEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_tabletEvent_QTabletEvent_X.isValid()) {
      _self_->bgJump.bg_QWindow_tabletEvent_QTabletEvent_X(unnamed_arg_0);
    } else {
      QWindow::tabletEvent(unnamed_arg_0);
    }
  }
  
  bool nativeEvent(const QByteArray & eventType, void * message, long * result) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return _self_->bgJump.bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X(&(eventType), message, result);
    } else {
      return QWindow::nativeEvent(eventType, message, result);
    }
  }
  
  bool eventFilter(QObject * unnamed_arg_0, QEvent * unnamed_arg_1) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return _self_->bgJump.bg_QObject_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QWindow::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }
  
  void timerEvent(QTimerEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      QWindow::timerEvent(unnamed_arg_0);
    }
  }
  
  void childEvent(QChildEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QObject_childEvent_QChildEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_childEvent_QChildEvent_X(unnamed_arg_0);
    } else {
      QWindow::childEvent(unnamed_arg_0);
    }
  }
  
  void customEvent(QEvent * unnamed_arg_0) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QObject_customEvent_QEvent_X.isValid()) {
      _self_->bgJump.bg_QObject_customEvent_QEvent_X(unnamed_arg_0);
    } else {
      QWindow::customEvent(unnamed_arg_0);
    }
  }
  
  void connectNotify(const QMetaMethod & signal) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_connectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QWindow::connectNotify(signal);
    }
  }
  
  void disconnectNotify(const QMetaMethod & signal) override {
    BgInherit_Window *_self_ = this;
    if (_self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      _self_->bgJump.bg_QObject_disconnectNotify_const_QMetaMethod_R(&(signal));
    } else {
      QWindow::disconnectNotify(signal);
    }
  }
  
};
extern "C" const QMetaObject * bg_QWindow_metaObject_(QWindow * _self_) {
  return _self_->metaObject();
}

extern "C" void * bg_QWindow_qt_metacast_const_char_X(QWindow * _self_, const char * unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" int bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX(QWindow * _self_, QMetaObject::Call unnamed_arg_0, int unnamed_arg_1, void ** unnamed_arg_2) {
  return _self_->qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2);
}

extern "C" CrystalString bg_QWindow_tr_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QWindow::tr(s));
}

extern "C" CrystalString bg_QWindow_tr_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QWindow::tr(s, c));
}

extern "C" CrystalString bg_QWindow_tr_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QWindow::tr(s, c, n));
}

extern "C" CrystalString bg_QWindow_trUtf8_STATIC_const_char_X(const char * s) {
  return qstring_to_crystal(QWindow::trUtf8(s));
}

extern "C" CrystalString bg_QWindow_trUtf8_STATIC_const_char_X_const_char_X(const char * s, const char * c) {
  return qstring_to_crystal(QWindow::trUtf8(s, c));
}

extern "C" CrystalString bg_QWindow_trUtf8_STATIC_const_char_X_const_char_X_int(const char * s, const char * c, int n) {
  return qstring_to_crystal(QWindow::trUtf8(s, c, n));
}

extern "C" QWindow * bg_QWindow__CONSTRUCT_QScreen_X(QScreen * screen) {
  return new (UseGC) BgInherit_Window(screen);
}

extern "C" QWindow * bg_QWindow__CONSTRUCT_QWindow_X(QWindow * parent) {
  return new (UseGC) BgInherit_Window(parent);
}

extern "C" void bg_QWindow_setSurfaceType_QSurface__SurfaceType(QWindow * _self_, QSurface::SurfaceType surfaceType) {
  _self_->setSurfaceType(surfaceType);
}

extern "C" QSurface::SurfaceType bg_QWindow_surfaceType_(QWindow * _self_) {
  return _self_->surfaceType();
}

extern "C" bool bg_QWindow_isVisible_(QWindow * _self_) {
  return _self_->isVisible();
}

extern "C" QWindow::Visibility bg_QWindow_visibility_(QWindow * _self_) {
  return _self_->visibility();
}

extern "C" void bg_QWindow_setVisibility_QWindow__Visibility(QWindow * _self_, QWindow::Visibility v) {
  _self_->setVisibility(v);
}

extern "C" void bg_QWindow_create_(QWindow * _self_) {
  _self_->create();
}

extern "C" WId bg_QWindow_winId_(QWindow * _self_) {
  return _self_->winId();
}

extern "C" QWindow * bg_QWindow_parent_(QWindow * _self_) {
  return _self_->parent();
}

extern "C" void bg_QWindow_setParent_QWindow_X(QWindow * _self_, QWindow * parent) {
  _self_->setParent(parent);
}

extern "C" bool bg_QWindow_isTopLevel_(QWindow * _self_) {
  return _self_->isTopLevel();
}

extern "C" bool bg_QWindow_isModal_(QWindow * _self_) {
  return _self_->isModal();
}

extern "C" Qt::WindowModality bg_QWindow_modality_(QWindow * _self_) {
  return _self_->modality();
}

extern "C" void bg_QWindow_setModality_Qt__WindowModality(QWindow * _self_, Qt::WindowModality modality) {
  _self_->setModality(modality);
}

extern "C" void bg_QWindow_setFormat_const_QSurfaceFormat_R(QWindow * _self_, const QSurfaceFormat & format) {
  _self_->setFormat(format);
}

extern "C" QSurfaceFormat * bg_QWindow_format_(QWindow * _self_) {
  return new (UseGC) QSurfaceFormat (_self_->format());
}

extern "C" QSurfaceFormat * bg_QWindow_requestedFormat_(QWindow * _self_) {
  return new (UseGC) QSurfaceFormat (_self_->requestedFormat());
}

extern "C" void bg_QWindow_setFlags_Qt__WindowFlags(QWindow * _self_, Qt::WindowFlags flags) {
  _self_->setFlags(flags);
}

extern "C" Qt::WindowFlags bg_QWindow_flags_(QWindow * _self_) {
  return _self_->flags();
}

extern "C" Qt::WindowType bg_QWindow_type_(QWindow * _self_) {
  return _self_->type();
}

extern "C" CrystalString bg_QWindow_title_(QWindow * _self_) {
  return qstring_to_crystal(_self_->title());
}

extern "C" void bg_QWindow_setOpacity_qreal(QWindow * _self_, qreal level) {
  _self_->setOpacity(level);
}

extern "C" qreal bg_QWindow_opacity_(QWindow * _self_) {
  return _self_->opacity();
}

extern "C" void bg_QWindow_setMask_const_QRegion_R(QWindow * _self_, const QRegion & region) {
  _self_->setMask(region);
}

extern "C" QRegion * bg_QWindow_mask_(QWindow * _self_) {
  return new (UseGC) QRegion (_self_->mask());
}

extern "C" bool bg_QWindow_isActive_(QWindow * _self_) {
  return _self_->isActive();
}

extern "C" void bg_QWindow_reportContentOrientationChange_Qt__ScreenOrientation(QWindow * _self_, Qt::ScreenOrientation orientation) {
  _self_->reportContentOrientationChange(orientation);
}

extern "C" Qt::ScreenOrientation bg_QWindow_contentOrientation_(QWindow * _self_) {
  return _self_->contentOrientation();
}

extern "C" qreal bg_QWindow_devicePixelRatio_(QWindow * _self_) {
  return _self_->devicePixelRatio();
}

extern "C" Qt::WindowState bg_QWindow_windowState_(QWindow * _self_) {
  return _self_->windowState();
}

extern "C" void bg_QWindow_setWindowState_Qt__WindowState(QWindow * _self_, Qt::WindowState state) {
  _self_->setWindowState(state);
}

extern "C" void bg_QWindow_setTransientParent_QWindow_X(QWindow * _self_, QWindow * parent) {
  _self_->setTransientParent(parent);
}

extern "C" QWindow * bg_QWindow_transientParent_(QWindow * _self_) {
  return _self_->transientParent();
}

extern "C" bool bg_QWindow_isAncestorOf_const_QWindow_X_QWindow__AncestorMode(QWindow * _self_, const QWindow * child, QWindow::AncestorMode mode) {
  return _self_->isAncestorOf(child, mode);
}

extern "C" bool bg_QWindow_isExposed_(QWindow * _self_) {
  return _self_->isExposed();
}

extern "C" int bg_QWindow_minimumWidth_(QWindow * _self_) {
  return _self_->minimumWidth();
}

extern "C" int bg_QWindow_minimumHeight_(QWindow * _self_) {
  return _self_->minimumHeight();
}

extern "C" int bg_QWindow_maximumWidth_(QWindow * _self_) {
  return _self_->maximumWidth();
}

extern "C" int bg_QWindow_maximumHeight_(QWindow * _self_) {
  return _self_->maximumHeight();
}

extern "C" QSize * bg_QWindow_minimumSize_(QWindow * _self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize * bg_QWindow_maximumSize_(QWindow * _self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" QSize * bg_QWindow_baseSize_(QWindow * _self_) {
  return new (UseGC) QSize (_self_->baseSize());
}

extern "C" QSize * bg_QWindow_sizeIncrement_(QWindow * _self_) {
  return new (UseGC) QSize (_self_->sizeIncrement());
}

extern "C" void bg_QWindow_setMinimumSize_const_QSize_R(QWindow * _self_, const QSize & size) {
  _self_->setMinimumSize(size);
}

extern "C" void bg_QWindow_setMaximumSize_const_QSize_R(QWindow * _self_, const QSize & size) {
  _self_->setMaximumSize(size);
}

extern "C" void bg_QWindow_setBaseSize_const_QSize_R(QWindow * _self_, const QSize & size) {
  _self_->setBaseSize(size);
}

extern "C" void bg_QWindow_setSizeIncrement_const_QSize_R(QWindow * _self_, const QSize & size) {
  _self_->setSizeIncrement(size);
}

extern "C" void bg_QWindow_setGeometry_int_int_int_int(QWindow * _self_, int posx, int posy, int w, int h) {
  _self_->setGeometry(posx, posy, w, h);
}

extern "C" void bg_QWindow_setGeometry_const_QRect_R(QWindow * _self_, const QRect & rect) {
  _self_->setGeometry(rect);
}

extern "C" QRect * bg_QWindow_geometry_(QWindow * _self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" QMargins * bg_QWindow_frameMargins_(QWindow * _self_) {
  return new (UseGC) QMargins (_self_->frameMargins());
}

extern "C" QRect * bg_QWindow_frameGeometry_(QWindow * _self_) {
  return new (UseGC) QRect (_self_->frameGeometry());
}

extern "C" QPoint bg_QWindow_framePosition_(QWindow * _self_) {
  return _self_->framePosition();
}

extern "C" void bg_QWindow_setFramePosition_const_QPoint_R(QWindow * _self_, const QPoint point) {
  _self_->setFramePosition(point);
}

extern "C" int bg_QWindow_width_(QWindow * _self_) {
  return _self_->width();
}

extern "C" int bg_QWindow_height_(QWindow * _self_) {
  return _self_->height();
}

extern "C" int bg_QWindow_x_(QWindow * _self_) {
  return _self_->x();
}

extern "C" int bg_QWindow_y_(QWindow * _self_) {
  return _self_->y();
}

extern "C" QSize * bg_QWindow_size_(QWindow * _self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" QPoint bg_QWindow_position_(QWindow * _self_) {
  return _self_->position();
}

extern "C" void bg_QWindow_setPosition_const_QPoint_R(QWindow * _self_, const QPoint pt) {
  _self_->setPosition(pt);
}

extern "C" void bg_QWindow_setPosition_int_int(QWindow * _self_, int posx, int posy) {
  _self_->setPosition(posx, posy);
}

extern "C" void bg_QWindow_resize_const_QSize_R(QWindow * _self_, const QSize & newSize) {
  _self_->resize(newSize);
}

extern "C" void bg_QWindow_resize_int_int(QWindow * _self_, int w, int h) {
  _self_->resize(w, h);
}

extern "C" void bg_QWindow_setFilePath_const_QString_R(QWindow * _self_, const CrystalString filePath) {
  _self_->setFilePath(QString::fromUtf8(filePath.ptr, filePath.size));
}

extern "C" CrystalString bg_QWindow_filePath_(QWindow * _self_) {
  return qstring_to_crystal(_self_->filePath());
}

extern "C" void bg_QWindow_setIcon_const_QIcon_R(QWindow * _self_, const QIcon & icon) {
  _self_->setIcon(icon);
}

extern "C" QIcon * bg_QWindow_icon_(QWindow * _self_) {
  return new (UseGC) QIcon (_self_->icon());
}

extern "C" void bg_QWindow_destroy_(QWindow * _self_) {
  _self_->destroy();
}

extern "C" QPlatformWindow * bg_QWindow_handle_(QWindow * _self_) {
  return _self_->handle();
}

extern "C" bool bg_QWindow_setKeyboardGrabEnabled_bool(QWindow * _self_, bool grab) {
  return _self_->setKeyboardGrabEnabled(grab);
}

extern "C" bool bg_QWindow_setMouseGrabEnabled_bool(QWindow * _self_, bool grab) {
  return _self_->setMouseGrabEnabled(grab);
}

extern "C" QScreen * bg_QWindow_screen_(QWindow * _self_) {
  return _self_->screen();
}

extern "C" void bg_QWindow_setScreen_QScreen_X(QWindow * _self_, QScreen * screen) {
  _self_->setScreen(screen);
}

extern "C" QAccessibleInterface * bg_QWindow_accessibleRoot_(QWindow * _self_) {
  return _self_->accessibleRoot();
}

extern "C" QObject * bg_QWindow_focusObject_(QWindow * _self_) {
  return _self_->focusObject();
}

extern "C" QPoint bg_QWindow_mapToGlobal_const_QPoint_R(QWindow * _self_, const QPoint pos) {
  return _self_->mapToGlobal(pos);
}

extern "C" QPoint bg_QWindow_mapFromGlobal_const_QPoint_R(QWindow * _self_, const QPoint pos) {
  return _self_->mapFromGlobal(pos);
}

extern "C" QCursor * bg_QWindow_cursor_(QWindow * _self_) {
  return new (UseGC) QCursor (_self_->cursor());
}

extern "C" void bg_QWindow_setCursor_const_QCursor_R(QWindow * _self_, const QCursor & unnamed_arg_0) {
  _self_->setCursor(unnamed_arg_0);
}

extern "C" void bg_QWindow_unsetCursor_(QWindow * _self_) {
  _self_->unsetCursor();
}

extern "C" QWindow * bg_QWindow_fromWinId_STATIC_WId(WId id) {
  return QWindow::fromWinId(id);
}

extern "C" void bg_QWindow_requestActivate_(QWindow * _self_) {
  _self_->requestActivate();
}

extern "C" void bg_QWindow_setVisible_bool(QWindow * _self_, bool visible) {
  _self_->setVisible(visible);
}

extern "C" void bg_QWindow_show_(QWindow * _self_) {
  _self_->show();
}

extern "C" void bg_QWindow_hide_(QWindow * _self_) {
  _self_->hide();
}

extern "C" void bg_QWindow_showMinimized_(QWindow * _self_) {
  _self_->showMinimized();
}

extern "C" void bg_QWindow_showMaximized_(QWindow * _self_) {
  _self_->showMaximized();
}

extern "C" void bg_QWindow_showFullScreen_(QWindow * _self_) {
  _self_->showFullScreen();
}

extern "C" void bg_QWindow_showNormal_(QWindow * _self_) {
  _self_->showNormal();
}

extern "C" bool bg_QWindow_close_(QWindow * _self_) {
  return _self_->close();
}

extern "C" void bg_QWindow_raise_(QWindow * _self_) {
  _self_->raise();
}

extern "C" void bg_QWindow_lower_(QWindow * _self_) {
  _self_->lower();
}

extern "C" void bg_QWindow_setTitle_const_QString_R(QWindow * _self_, const CrystalString unnamed_arg_0) {
  _self_->setTitle(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QWindow_setX_int(QWindow * _self_, int arg) {
  _self_->setX(arg);
}

extern "C" void bg_QWindow_setY_int(QWindow * _self_, int arg) {
  _self_->setY(arg);
}

extern "C" void bg_QWindow_setWidth_int(QWindow * _self_, int arg) {
  _self_->setWidth(arg);
}

extern "C" void bg_QWindow_setHeight_int(QWindow * _self_, int arg) {
  _self_->setHeight(arg);
}

extern "C" void bg_QWindow_setMinimumWidth_int(QWindow * _self_, int w) {
  _self_->setMinimumWidth(w);
}

extern "C" void bg_QWindow_setMinimumHeight_int(QWindow * _self_, int h) {
  _self_->setMinimumHeight(h);
}

extern "C" void bg_QWindow_setMaximumWidth_int(QWindow * _self_, int w) {
  _self_->setMaximumWidth(w);
}

extern "C" void bg_QWindow_setMaximumHeight_int(QWindow * _self_, int h) {
  _self_->setMaximumHeight(h);
}

extern "C" void bg_QWindow_alert_int(QWindow * _self_, int msec) {
  _self_->alert(msec);
}

extern "C" void bg_QWindow_requestUpdate_(QWindow * _self_) {
  _self_->requestUpdate();
}

extern "C" void bg_QWindow_screenChanged_QScreen_X(QWindow * _self_, QScreen * screen) {
  _self_->screenChanged(screen);
}

extern "C" void bg_QWindow_modalityChanged_Qt__WindowModality(QWindow * _self_, Qt::WindowModality modality) {
  _self_->modalityChanged(modality);
}

extern "C" void bg_QWindow_windowStateChanged_Qt__WindowState(QWindow * _self_, Qt::WindowState windowState) {
  _self_->windowStateChanged(windowState);
}

extern "C" void bg_QWindow_windowTitleChanged_const_QString_R(QWindow * _self_, const CrystalString title) {
  _self_->windowTitleChanged(QString::fromUtf8(title.ptr, title.size));
}

extern "C" void bg_QWindow_xChanged_int(QWindow * _self_, int arg) {
  _self_->xChanged(arg);
}

extern "C" void bg_QWindow_yChanged_int(QWindow * _self_, int arg) {
  _self_->yChanged(arg);
}

extern "C" void bg_QWindow_widthChanged_int(QWindow * _self_, int arg) {
  _self_->widthChanged(arg);
}

extern "C" void bg_QWindow_heightChanged_int(QWindow * _self_, int arg) {
  _self_->heightChanged(arg);
}

extern "C" void bg_QWindow_minimumWidthChanged_int(QWindow * _self_, int arg) {
  _self_->minimumWidthChanged(arg);
}

extern "C" void bg_QWindow_minimumHeightChanged_int(QWindow * _self_, int arg) {
  _self_->minimumHeightChanged(arg);
}

extern "C" void bg_QWindow_maximumWidthChanged_int(QWindow * _self_, int arg) {
  _self_->maximumWidthChanged(arg);
}

extern "C" void bg_QWindow_maximumHeightChanged_int(QWindow * _self_, int arg) {
  _self_->maximumHeightChanged(arg);
}

extern "C" void bg_QWindow_visibleChanged_bool(QWindow * _self_, bool arg) {
  _self_->visibleChanged(arg);
}

extern "C" void bg_QWindow_visibilityChanged_QWindow__Visibility(QWindow * _self_, QWindow::Visibility visibility) {
  _self_->visibilityChanged(visibility);
}

extern "C" void bg_QWindow_activeChanged_(QWindow * _self_) {
  _self_->activeChanged();
}

extern "C" void bg_QWindow_contentOrientationChanged_Qt__ScreenOrientation(QWindow * _self_, Qt::ScreenOrientation orientation) {
  _self_->contentOrientationChanged(orientation);
}

extern "C" void bg_QWindow_focusObjectChanged_QObject_X(QWindow * _self_, QObject * object) {
  _self_->focusObjectChanged(object);
}

extern "C" void bg_QWindow_opacityChanged_qreal(QWindow * _self_, qreal opacity) {
  _self_->opacityChanged(opacity);
}

extern "C" void bg_QWindow_exposeEvent_QExposeEvent_X(QWindow * _self_, QExposeEvent * unnamed_arg_0) {
  _self_->exposeEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_resizeEvent_QResizeEvent_X(QWindow * _self_, QResizeEvent * unnamed_arg_0) {
  _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_moveEvent_QMoveEvent_X(QWindow * _self_, QMoveEvent * unnamed_arg_0) {
  _self_->moveEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_focusInEvent_QFocusEvent_X(QWindow * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusInEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_focusOutEvent_QFocusEvent_X(QWindow * _self_, QFocusEvent * unnamed_arg_0) {
  _self_->focusOutEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_showEvent_QShowEvent_X(QWindow * _self_, QShowEvent * unnamed_arg_0) {
  _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_hideEvent_QHideEvent_X(QWindow * _self_, QHideEvent * unnamed_arg_0) {
  _self_->hideEvent(unnamed_arg_0);
}

extern "C" bool bg_QWindow_event_QEvent_X(QWindow * _self_, QEvent * unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" void bg_QWindow_keyPressEvent_QKeyEvent_X(QWindow * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_keyReleaseEvent_QKeyEvent_X(QWindow * _self_, QKeyEvent * unnamed_arg_0) {
  _self_->keyReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_mousePressEvent_QMouseEvent_X(QWindow * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_mouseReleaseEvent_QMouseEvent_X(QWindow * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X(QWindow * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseDoubleClickEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_mouseMoveEvent_QMouseEvent_X(QWindow * _self_, QMouseEvent * unnamed_arg_0) {
  _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_wheelEvent_QWheelEvent_X(QWindow * _self_, QWheelEvent * unnamed_arg_0) {
  _self_->wheelEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_touchEvent_QTouchEvent_X(QWindow * _self_, QTouchEvent * unnamed_arg_0) {
  _self_->touchEvent(unnamed_arg_0);
}

extern "C" void bg_QWindow_tabletEvent_QTabletEvent_X(QWindow * _self_, QTabletEvent * unnamed_arg_0) {
  _self_->tabletEvent(unnamed_arg_0);
}

extern "C" bool bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X(QWindow * _self_, const QByteArray & eventType, void * message, long * result) {
  return _self_->nativeEvent(eventType, message, result);
}

extern "C" QWindow * bg_QWindow__CONSTRUCT_QWindowPrivate_R_QWindow_X(QWindowPrivate & dd, QWindow * parent) {
  return new (UseGC) BgInherit_Window(dd, parent);
}

extern "C" QSurface * bg_QWindow_AS_Surface_(QWindow * _self_) {
  return static_cast<QSurface *>(_self_);
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_screenChanged_CrystalProc_void_QScreen_X(QWindow * _self_, CrystalProc<void, QScreen *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(QScreen *))&QWindow::screenChanged, [_proc_](QScreen * screen){ _proc_(screen); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_modalityChanged_CrystalProc_void_Qt__WindowModality(QWindow * _self_, CrystalProc<void, Qt::WindowModality> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(Qt::WindowModality))&QWindow::modalityChanged, [_proc_](Qt::WindowModality modality){ _proc_(modality); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_windowStateChanged_CrystalProc_void_Qt__WindowState(QWindow * _self_, CrystalProc<void, Qt::WindowState> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(Qt::WindowState))&QWindow::windowStateChanged, [_proc_](Qt::WindowState windowState){ _proc_(windowState); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_windowTitleChanged_CrystalProc_void_const_QString_R(QWindow * _self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(const QString &))&QWindow::windowTitleChanged, [_proc_](const QString & title){ _proc_(qstring_to_crystal(title)); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_xChanged_CrystalProc_void_int(QWindow * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(int))&QWindow::xChanged, [_proc_](int arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_yChanged_CrystalProc_void_int(QWindow * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(int))&QWindow::yChanged, [_proc_](int arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_widthChanged_CrystalProc_void_int(QWindow * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(int))&QWindow::widthChanged, [_proc_](int arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_heightChanged_CrystalProc_void_int(QWindow * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(int))&QWindow::heightChanged, [_proc_](int arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_minimumWidthChanged_CrystalProc_void_int(QWindow * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(int))&QWindow::minimumWidthChanged, [_proc_](int arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_minimumHeightChanged_CrystalProc_void_int(QWindow * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(int))&QWindow::minimumHeightChanged, [_proc_](int arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_maximumWidthChanged_CrystalProc_void_int(QWindow * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(int))&QWindow::maximumWidthChanged, [_proc_](int arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_maximumHeightChanged_CrystalProc_void_int(QWindow * _self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(int))&QWindow::maximumHeightChanged, [_proc_](int arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_visibleChanged_CrystalProc_void_bool(QWindow * _self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(bool))&QWindow::visibleChanged, [_proc_](bool arg){ _proc_(arg); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_visibilityChanged_CrystalProc_void_QWindow__Visibility(QWindow * _self_, CrystalProc<void, QWindow::Visibility> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(QWindow::Visibility))&QWindow::visibilityChanged, [_proc_](QWindow::Visibility visibility){ _proc_(visibility); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_activeChanged_CrystalProc_void(QWindow * _self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)())&QWindow::activeChanged, [_proc_](){ _proc_(); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_contentOrientationChanged_CrystalProc_void_Qt__ScreenOrientation(QWindow * _self_, CrystalProc<void, Qt::ScreenOrientation> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(Qt::ScreenOrientation))&QWindow::contentOrientationChanged, [_proc_](Qt::ScreenOrientation orientation){ _proc_(orientation); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_focusObjectChanged_CrystalProc_void_QObject_X(QWindow * _self_, CrystalProc<void, QObject *> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(QObject *))&QWindow::focusObjectChanged, [_proc_](QObject * object){ _proc_(object); }));
}

extern "C" QMetaObject::Connection * bg_QWindow_CONNECT_opacityChanged_CrystalProc_void_qreal(QWindow * _self_, CrystalProc<void, qreal> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWindow::*)(qreal))&QWindow::opacityChanged, [_proc_](qreal opacity){ _proc_(opacity); }));
}

extern "C" void bg_BgInherit_Window_JUMPTABLE_BgJumptable_Window_R(BgInherit_Window * _self_, const BgJumptable_Window & table) {
  _self_->bgJump = (table);
}

extern "C" QPixelFormat * bg_QPixelFormat__CONSTRUCT_() {
  return new (UseGC) QPixelFormat();
}

extern "C" QPixelFormat * bg_QPixelFormat__CONSTRUCT_QPixelFormat__ColorModel_uchar_uchar_uchar_uchar_uchar_uchar_QPixelFormat__AlphaUsage_QPixelFormat__AlphaPosition_QPixelFormat__AlphaPremultiplied_QPixelFormat__TypeInterpretation_QPixelFormat__ByteOrder_uchar(QPixelFormat::ColorModel colorModel, uchar firstSize, uchar secondSize, uchar thirdSize, uchar fourthSize, uchar fifthSize, uchar alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation, QPixelFormat::ByteOrder byteOrder, uchar subEnum) {
  return new (UseGC) QPixelFormat(colorModel, firstSize, secondSize, thirdSize, fourthSize, fifthSize, alphaSize, alphaUsage, alphaPosition, premultiplied, typeInterpretation, byteOrder, subEnum);
}

extern "C" QPixelFormat::ColorModel bg_QPixelFormat_colorModel_(QPixelFormat * _self_) {
  return _self_->colorModel();
}

extern "C" uchar bg_QPixelFormat_channelCount_(QPixelFormat * _self_) {
  return _self_->channelCount();
}

extern "C" uchar bg_QPixelFormat_redSize_(QPixelFormat * _self_) {
  return _self_->redSize();
}

extern "C" uchar bg_QPixelFormat_greenSize_(QPixelFormat * _self_) {
  return _self_->greenSize();
}

extern "C" uchar bg_QPixelFormat_blueSize_(QPixelFormat * _self_) {
  return _self_->blueSize();
}

extern "C" uchar bg_QPixelFormat_cyanSize_(QPixelFormat * _self_) {
  return _self_->cyanSize();
}

extern "C" uchar bg_QPixelFormat_magentaSize_(QPixelFormat * _self_) {
  return _self_->magentaSize();
}

extern "C" uchar bg_QPixelFormat_yellowSize_(QPixelFormat * _self_) {
  return _self_->yellowSize();
}

extern "C" uchar bg_QPixelFormat_blackSize_(QPixelFormat * _self_) {
  return _self_->blackSize();
}

extern "C" uchar bg_QPixelFormat_hueSize_(QPixelFormat * _self_) {
  return _self_->hueSize();
}

extern "C" uchar bg_QPixelFormat_saturationSize_(QPixelFormat * _self_) {
  return _self_->saturationSize();
}

extern "C" uchar bg_QPixelFormat_lightnessSize_(QPixelFormat * _self_) {
  return _self_->lightnessSize();
}

extern "C" uchar bg_QPixelFormat_brightnessSize_(QPixelFormat * _self_) {
  return _self_->brightnessSize();
}

extern "C" uchar bg_QPixelFormat_alphaSize_(QPixelFormat * _self_) {
  return _self_->alphaSize();
}

extern "C" uchar bg_QPixelFormat_bitsPerPixel_(QPixelFormat * _self_) {
  return _self_->bitsPerPixel();
}

extern "C" QPixelFormat::AlphaUsage bg_QPixelFormat_alphaUsage_(QPixelFormat * _self_) {
  return _self_->alphaUsage();
}

extern "C" QPixelFormat::AlphaPosition bg_QPixelFormat_alphaPosition_(QPixelFormat * _self_) {
  return _self_->alphaPosition();
}

extern "C" QPixelFormat::AlphaPremultiplied bg_QPixelFormat_premultiplied_(QPixelFormat * _self_) {
  return _self_->premultiplied();
}

extern "C" QPixelFormat::TypeInterpretation bg_QPixelFormat_typeInterpretation_(QPixelFormat * _self_) {
  return _self_->typeInterpretation();
}

extern "C" QPixelFormat::ByteOrder bg_QPixelFormat_byteOrder_(QPixelFormat * _self_) {
  return _self_->byteOrder();
}

extern "C" QPixelFormat::YUVLayout bg_QPixelFormat_yuvLayout_(QPixelFormat * _self_) {
  return _self_->yuvLayout();
}

extern "C" uchar bg_QPixelFormat_subEnum_(QPixelFormat * _self_) {
  return _self_->subEnum();
}

extern "C" QTextFormat * bg_QTextFormat__CONSTRUCT_() {
  return new (UseGC) QTextFormat();
}

extern "C" QTextFormat * bg_QTextFormat__CONSTRUCT_int(int type) {
  return new (UseGC) QTextFormat(type);
}

extern "C" void bg_QTextFormat_swap_QTextFormat_R(QTextFormat * _self_, QTextFormat & other) {
  _self_->swap(other);
}

extern "C" void bg_QTextFormat_merge_const_QTextFormat_R(QTextFormat * _self_, const QTextFormat & other) {
  _self_->merge(other);
}

extern "C" bool bg_QTextFormat_isValid_(QTextFormat * _self_) {
  return _self_->isValid();
}

extern "C" bool bg_QTextFormat_isEmpty_(QTextFormat * _self_) {
  return _self_->isEmpty();
}

extern "C" int bg_QTextFormat_type_(QTextFormat * _self_) {
  return _self_->type();
}

extern "C" int bg_QTextFormat_objectIndex_(QTextFormat * _self_) {
  return _self_->objectIndex();
}

extern "C" void bg_QTextFormat_setObjectIndex_int(QTextFormat * _self_, int object) {
  _self_->setObjectIndex(object);
}

extern "C" CrystalVariant bg_QTextFormat_property_int(QTextFormat * _self_, int propertyId) {
  return qvariant_to_crystal(_self_->property(propertyId));
}

extern "C" void bg_QTextFormat_setProperty_int_const_QVariant_R(QTextFormat * _self_, int propertyId, const CrystalVariant value) {
  _self_->setProperty(propertyId, crystal_to_qvariant(value));
}

extern "C" void bg_QTextFormat_clearProperty_int(QTextFormat * _self_, int propertyId) {
  _self_->clearProperty(propertyId);
}

extern "C" bool bg_QTextFormat_hasProperty_int(QTextFormat * _self_, int propertyId) {
  return _self_->hasProperty(propertyId);
}

extern "C" bool bg_QTextFormat_boolProperty_int(QTextFormat * _self_, int propertyId) {
  return _self_->boolProperty(propertyId);
}

extern "C" int bg_QTextFormat_intProperty_int(QTextFormat * _self_, int propertyId) {
  return _self_->intProperty(propertyId);
}

extern "C" qreal bg_QTextFormat_doubleProperty_int(QTextFormat * _self_, int propertyId) {
  return _self_->doubleProperty(propertyId);
}

extern "C" CrystalString bg_QTextFormat_stringProperty_int(QTextFormat * _self_, int propertyId) {
  return qstring_to_crystal(_self_->stringProperty(propertyId));
}

extern "C" QColor * bg_QTextFormat_colorProperty_int(QTextFormat * _self_, int propertyId) {
  return new (UseGC) QColor (_self_->colorProperty(propertyId));
}

extern "C" QPen * bg_QTextFormat_penProperty_int(QTextFormat * _self_, int propertyId) {
  return new (UseGC) QPen (_self_->penProperty(propertyId));
}

extern "C" QBrush * bg_QTextFormat_brushProperty_int(QTextFormat * _self_, int propertyId) {
  return new (UseGC) QBrush (_self_->brushProperty(propertyId));
}

extern "C" QTextLength * bg_QTextFormat_lengthProperty_int(QTextFormat * _self_, int propertyId) {
  return new (UseGC) QTextLength (_self_->lengthProperty(propertyId));
}

extern "C" Container_QVector_QTextLength * bg_QTextFormat_lengthVectorProperty_int(QTextFormat * _self_, int propertyId) {
  return new (UseGC) Container_QVector_QTextLength (_self_->lengthVectorProperty(propertyId));
}

extern "C" void bg_QTextFormat_setProperty_int_const_QVector_QTextLength__R(QTextFormat * _self_, int propertyId, const Container_QVector_QTextLength * lengths) {
  _self_->setProperty(propertyId, *(lengths));
}

extern "C" int bg_QTextFormat_propertyCount_(QTextFormat * _self_) {
  return _self_->propertyCount();
}

extern "C" void bg_QTextFormat_setObjectType_int(QTextFormat * _self_, int type) {
  _self_->setObjectType(type);
}

extern "C" int bg_QTextFormat_objectType_(QTextFormat * _self_) {
  return _self_->objectType();
}

extern "C" bool bg_QTextFormat_isCharFormat_(QTextFormat * _self_) {
  return _self_->isCharFormat();
}

extern "C" bool bg_QTextFormat_isBlockFormat_(QTextFormat * _self_) {
  return _self_->isBlockFormat();
}

extern "C" bool bg_QTextFormat_isListFormat_(QTextFormat * _self_) {
  return _self_->isListFormat();
}

extern "C" bool bg_QTextFormat_isFrameFormat_(QTextFormat * _self_) {
  return _self_->isFrameFormat();
}

extern "C" bool bg_QTextFormat_isImageFormat_(QTextFormat * _self_) {
  return _self_->isImageFormat();
}

extern "C" bool bg_QTextFormat_isTableFormat_(QTextFormat * _self_) {
  return _self_->isTableFormat();
}

extern "C" bool bg_QTextFormat_isTableCellFormat_(QTextFormat * _self_) {
  return _self_->isTableCellFormat();
}

extern "C" QTextBlockFormat * bg_QTextFormat_toBlockFormat_(QTextFormat * _self_) {
  return new (UseGC) QTextBlockFormat (_self_->toBlockFormat());
}

extern "C" QTextCharFormat * bg_QTextFormat_toCharFormat_(QTextFormat * _self_) {
  return new (UseGC) QTextCharFormat (_self_->toCharFormat());
}

extern "C" QTextListFormat * bg_QTextFormat_toListFormat_(QTextFormat * _self_) {
  return new (UseGC) QTextListFormat (_self_->toListFormat());
}

extern "C" QTextTableFormat * bg_QTextFormat_toTableFormat_(QTextFormat * _self_) {
  return new (UseGC) QTextTableFormat (_self_->toTableFormat());
}

extern "C" QTextFrameFormat * bg_QTextFormat_toFrameFormat_(QTextFormat * _self_) {
  return new (UseGC) QTextFrameFormat (_self_->toFrameFormat());
}

extern "C" QTextImageFormat * bg_QTextFormat_toImageFormat_(QTextFormat * _self_) {
  return new (UseGC) QTextImageFormat (_self_->toImageFormat());
}

extern "C" QTextTableCellFormat * bg_QTextFormat_toTableCellFormat_(QTextFormat * _self_) {
  return new (UseGC) QTextTableCellFormat (_self_->toTableCellFormat());
}

extern "C" void bg_QTextFormat_setLayoutDirection_Qt__LayoutDirection(QTextFormat * _self_, Qt::LayoutDirection direction) {
  _self_->setLayoutDirection(direction);
}

extern "C" Qt::LayoutDirection bg_QTextFormat_layoutDirection_(QTextFormat * _self_) {
  return _self_->layoutDirection();
}

extern "C" void bg_QTextFormat_setBackground_const_QBrush_R(QTextFormat * _self_, const QBrush & brush) {
  _self_->setBackground(brush);
}

extern "C" QBrush * bg_QTextFormat_background_(QTextFormat * _self_) {
  return new (UseGC) QBrush (_self_->background());
}

extern "C" void bg_QTextFormat_clearBackground_(QTextFormat * _self_) {
  _self_->clearBackground();
}

extern "C" void bg_QTextFormat_setForeground_const_QBrush_R(QTextFormat * _self_, const QBrush & brush) {
  _self_->setForeground(brush);
}

extern "C" QBrush * bg_QTextFormat_foreground_(QTextFormat * _self_) {
  return new (UseGC) QBrush (_self_->foreground());
}

extern "C" void bg_QTextFormat_clearForeground_(QTextFormat * _self_) {
  _self_->clearForeground();
}

extern "C" QTextBlockFormat * bg_QTextBlockFormat__CONSTRUCT_() {
  return new (UseGC) QTextBlockFormat();
}

extern "C" bool bg_QTextBlockFormat_isValid_(QTextBlockFormat * _self_) {
  return _self_->isValid();
}

extern "C" void bg_QTextBlockFormat_setAlignment_Qt__Alignment(QTextBlockFormat * _self_, Qt::Alignment alignment) {
  _self_->setAlignment(alignment);
}

extern "C" Qt::Alignment bg_QTextBlockFormat_alignment_(QTextBlockFormat * _self_) {
  return _self_->alignment();
}

extern "C" void bg_QTextBlockFormat_setTopMargin_qreal(QTextBlockFormat * _self_, qreal margin) {
  _self_->setTopMargin(margin);
}

extern "C" qreal bg_QTextBlockFormat_topMargin_(QTextBlockFormat * _self_) {
  return _self_->topMargin();
}

extern "C" void bg_QTextBlockFormat_setBottomMargin_qreal(QTextBlockFormat * _self_, qreal margin) {
  _self_->setBottomMargin(margin);
}

extern "C" qreal bg_QTextBlockFormat_bottomMargin_(QTextBlockFormat * _self_) {
  return _self_->bottomMargin();
}

extern "C" void bg_QTextBlockFormat_setLeftMargin_qreal(QTextBlockFormat * _self_, qreal margin) {
  _self_->setLeftMargin(margin);
}

extern "C" qreal bg_QTextBlockFormat_leftMargin_(QTextBlockFormat * _self_) {
  return _self_->leftMargin();
}

extern "C" void bg_QTextBlockFormat_setRightMargin_qreal(QTextBlockFormat * _self_, qreal margin) {
  _self_->setRightMargin(margin);
}

extern "C" qreal bg_QTextBlockFormat_rightMargin_(QTextBlockFormat * _self_) {
  return _self_->rightMargin();
}

extern "C" void bg_QTextBlockFormat_setTextIndent_qreal(QTextBlockFormat * _self_, qreal aindent) {
  _self_->setTextIndent(aindent);
}

extern "C" qreal bg_QTextBlockFormat_textIndent_(QTextBlockFormat * _self_) {
  return _self_->textIndent();
}

extern "C" void bg_QTextBlockFormat_setIndent_int(QTextBlockFormat * _self_, int indent) {
  _self_->setIndent(indent);
}

extern "C" int bg_QTextBlockFormat_indent_(QTextBlockFormat * _self_) {
  return _self_->indent();
}

extern "C" void bg_QTextBlockFormat_setLineHeight_qreal_int(QTextBlockFormat * _self_, qreal height, int heightType) {
  _self_->setLineHeight(height, heightType);
}

extern "C" qreal bg_QTextBlockFormat_lineHeight_qreal_qreal(QTextBlockFormat * _self_, qreal scriptLineHeight, qreal scaling) {
  return _self_->lineHeight(scriptLineHeight, scaling);
}

extern "C" qreal bg_QTextBlockFormat_lineHeight_(QTextBlockFormat * _self_) {
  return _self_->lineHeight();
}

extern "C" int bg_QTextBlockFormat_lineHeightType_(QTextBlockFormat * _self_) {
  return _self_->lineHeightType();
}

extern "C" void bg_QTextBlockFormat_setNonBreakableLines_bool(QTextBlockFormat * _self_, bool b) {
  _self_->setNonBreakableLines(b);
}

extern "C" bool bg_QTextBlockFormat_nonBreakableLines_(QTextBlockFormat * _self_) {
  return _self_->nonBreakableLines();
}

extern "C" void bg_QTextBlockFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(QTextBlockFormat * _self_, QTextFormat::PageBreakFlags flags) {
  _self_->setPageBreakPolicy(flags);
}

extern "C" QTextFormat::PageBreakFlags bg_QTextBlockFormat_pageBreakPolicy_(QTextBlockFormat * _self_) {
  return _self_->pageBreakPolicy();
}

extern "C" QTextBlockFormat * bg_QTextBlockFormat__CONSTRUCT_const_QTextFormat_R(const QTextFormat & fmt) {
  return new (UseGC) QTextBlockFormat(fmt);
}

extern "C" QTextCharFormat * bg_QTextCharFormat__CONSTRUCT_() {
  return new (UseGC) QTextCharFormat();
}

extern "C" bool bg_QTextCharFormat_isValid_(QTextCharFormat * _self_) {
  return _self_->isValid();
}

extern "C" void bg_QTextCharFormat_setFont_const_QFont_R_QTextCharFormat__FontPropertiesInheritanceBehavior(QTextCharFormat * _self_, const QFont & font, QTextCharFormat::FontPropertiesInheritanceBehavior behavior) {
  _self_->setFont(font, behavior);
}

extern "C" void bg_QTextCharFormat_setFont_const_QFont_R(QTextCharFormat * _self_, const QFont & font) {
  _self_->setFont(font);
}

extern "C" QFont * bg_QTextCharFormat_font_(QTextCharFormat * _self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QTextCharFormat_setFontFamily_const_QString_R(QTextCharFormat * _self_, const CrystalString family) {
  _self_->setFontFamily(QString::fromUtf8(family.ptr, family.size));
}

extern "C" CrystalString bg_QTextCharFormat_fontFamily_(QTextCharFormat * _self_) {
  return qstring_to_crystal(_self_->fontFamily());
}

extern "C" void bg_QTextCharFormat_setFontPointSize_qreal(QTextCharFormat * _self_, qreal size) {
  _self_->setFontPointSize(size);
}

extern "C" qreal bg_QTextCharFormat_fontPointSize_(QTextCharFormat * _self_) {
  return _self_->fontPointSize();
}

extern "C" void bg_QTextCharFormat_setFontWeight_int(QTextCharFormat * _self_, int weight) {
  _self_->setFontWeight(weight);
}

extern "C" int bg_QTextCharFormat_fontWeight_(QTextCharFormat * _self_) {
  return _self_->fontWeight();
}

extern "C" void bg_QTextCharFormat_setFontItalic_bool(QTextCharFormat * _self_, bool italic) {
  _self_->setFontItalic(italic);
}

extern "C" bool bg_QTextCharFormat_fontItalic_(QTextCharFormat * _self_) {
  return _self_->fontItalic();
}

extern "C" void bg_QTextCharFormat_setFontCapitalization_QFont__Capitalization(QTextCharFormat * _self_, QFont::Capitalization capitalization) {
  _self_->setFontCapitalization(capitalization);
}

extern "C" QFont::Capitalization bg_QTextCharFormat_fontCapitalization_(QTextCharFormat * _self_) {
  return _self_->fontCapitalization();
}

extern "C" void bg_QTextCharFormat_setFontLetterSpacingType_QFont__SpacingType(QTextCharFormat * _self_, QFont::SpacingType letterSpacingType) {
  _self_->setFontLetterSpacingType(letterSpacingType);
}

extern "C" QFont::SpacingType bg_QTextCharFormat_fontLetterSpacingType_(QTextCharFormat * _self_) {
  return _self_->fontLetterSpacingType();
}

extern "C" void bg_QTextCharFormat_setFontLetterSpacing_qreal(QTextCharFormat * _self_, qreal spacing) {
  _self_->setFontLetterSpacing(spacing);
}

extern "C" qreal bg_QTextCharFormat_fontLetterSpacing_(QTextCharFormat * _self_) {
  return _self_->fontLetterSpacing();
}

extern "C" void bg_QTextCharFormat_setFontWordSpacing_qreal(QTextCharFormat * _self_, qreal spacing) {
  _self_->setFontWordSpacing(spacing);
}

extern "C" qreal bg_QTextCharFormat_fontWordSpacing_(QTextCharFormat * _self_) {
  return _self_->fontWordSpacing();
}

extern "C" void bg_QTextCharFormat_setFontUnderline_bool(QTextCharFormat * _self_, bool underline) {
  _self_->setFontUnderline(underline);
}

extern "C" bool bg_QTextCharFormat_fontUnderline_(QTextCharFormat * _self_) {
  return _self_->fontUnderline();
}

extern "C" void bg_QTextCharFormat_setFontOverline_bool(QTextCharFormat * _self_, bool overline) {
  _self_->setFontOverline(overline);
}

extern "C" bool bg_QTextCharFormat_fontOverline_(QTextCharFormat * _self_) {
  return _self_->fontOverline();
}

extern "C" void bg_QTextCharFormat_setFontStrikeOut_bool(QTextCharFormat * _self_, bool strikeOut) {
  _self_->setFontStrikeOut(strikeOut);
}

extern "C" bool bg_QTextCharFormat_fontStrikeOut_(QTextCharFormat * _self_) {
  return _self_->fontStrikeOut();
}

extern "C" void bg_QTextCharFormat_setUnderlineColor_const_QColor_R(QTextCharFormat * _self_, const QColor & color) {
  _self_->setUnderlineColor(color);
}

extern "C" QColor * bg_QTextCharFormat_underlineColor_(QTextCharFormat * _self_) {
  return new (UseGC) QColor (_self_->underlineColor());
}

extern "C" void bg_QTextCharFormat_setFontFixedPitch_bool(QTextCharFormat * _self_, bool fixedPitch) {
  _self_->setFontFixedPitch(fixedPitch);
}

extern "C" bool bg_QTextCharFormat_fontFixedPitch_(QTextCharFormat * _self_) {
  return _self_->fontFixedPitch();
}

extern "C" void bg_QTextCharFormat_setFontStretch_int(QTextCharFormat * _self_, int factor) {
  _self_->setFontStretch(factor);
}

extern "C" int bg_QTextCharFormat_fontStretch_(QTextCharFormat * _self_) {
  return _self_->fontStretch();
}

extern "C" void bg_QTextCharFormat_setFontStyleHint_QFont__StyleHint_QFont__StyleStrategy(QTextCharFormat * _self_, QFont::StyleHint hint, QFont::StyleStrategy strategy) {
  _self_->setFontStyleHint(hint, strategy);
}

extern "C" void bg_QTextCharFormat_setFontStyleStrategy_QFont__StyleStrategy(QTextCharFormat * _self_, QFont::StyleStrategy strategy) {
  _self_->setFontStyleStrategy(strategy);
}

extern "C" QFont::StyleHint bg_QTextCharFormat_fontStyleHint_(QTextCharFormat * _self_) {
  return _self_->fontStyleHint();
}

extern "C" QFont::StyleStrategy bg_QTextCharFormat_fontStyleStrategy_(QTextCharFormat * _self_) {
  return _self_->fontStyleStrategy();
}

extern "C" void bg_QTextCharFormat_setFontHintingPreference_QFont__HintingPreference(QTextCharFormat * _self_, QFont::HintingPreference hintingPreference) {
  _self_->setFontHintingPreference(hintingPreference);
}

extern "C" QFont::HintingPreference bg_QTextCharFormat_fontHintingPreference_(QTextCharFormat * _self_) {
  return _self_->fontHintingPreference();
}

extern "C" void bg_QTextCharFormat_setFontKerning_bool(QTextCharFormat * _self_, bool enable) {
  _self_->setFontKerning(enable);
}

extern "C" bool bg_QTextCharFormat_fontKerning_(QTextCharFormat * _self_) {
  return _self_->fontKerning();
}

extern "C" void bg_QTextCharFormat_setUnderlineStyle_QTextCharFormat__UnderlineStyle(QTextCharFormat * _self_, QTextCharFormat::UnderlineStyle style) {
  _self_->setUnderlineStyle(style);
}

extern "C" QTextCharFormat::UnderlineStyle bg_QTextCharFormat_underlineStyle_(QTextCharFormat * _self_) {
  return _self_->underlineStyle();
}

extern "C" void bg_QTextCharFormat_setVerticalAlignment_QTextCharFormat__VerticalAlignment(QTextCharFormat * _self_, QTextCharFormat::VerticalAlignment alignment) {
  _self_->setVerticalAlignment(alignment);
}

extern "C" QTextCharFormat::VerticalAlignment bg_QTextCharFormat_verticalAlignment_(QTextCharFormat * _self_) {
  return _self_->verticalAlignment();
}

extern "C" void bg_QTextCharFormat_setTextOutline_const_QPen_R(QTextCharFormat * _self_, const QPen & pen) {
  _self_->setTextOutline(pen);
}

extern "C" QPen * bg_QTextCharFormat_textOutline_(QTextCharFormat * _self_) {
  return new (UseGC) QPen (_self_->textOutline());
}

extern "C" void bg_QTextCharFormat_setToolTip_const_QString_R(QTextCharFormat * _self_, const CrystalString tip) {
  _self_->setToolTip(QString::fromUtf8(tip.ptr, tip.size));
}

extern "C" CrystalString bg_QTextCharFormat_toolTip_(QTextCharFormat * _self_) {
  return qstring_to_crystal(_self_->toolTip());
}

extern "C" void bg_QTextCharFormat_setAnchor_bool(QTextCharFormat * _self_, bool anchor) {
  _self_->setAnchor(anchor);
}

extern "C" bool bg_QTextCharFormat_isAnchor_(QTextCharFormat * _self_) {
  return _self_->isAnchor();
}

extern "C" void bg_QTextCharFormat_setAnchorHref_const_QString_R(QTextCharFormat * _self_, const CrystalString value) {
  _self_->setAnchorHref(QString::fromUtf8(value.ptr, value.size));
}

extern "C" CrystalString bg_QTextCharFormat_anchorHref_(QTextCharFormat * _self_) {
  return qstring_to_crystal(_self_->anchorHref());
}

extern "C" void bg_QTextCharFormat_setAnchorName_const_QString_R(QTextCharFormat * _self_, const CrystalString name) {
  _self_->setAnchorName(QString::fromUtf8(name.ptr, name.size));
}

extern "C" CrystalString bg_QTextCharFormat_anchorName_(QTextCharFormat * _self_) {
  return qstring_to_crystal(_self_->anchorName());
}

extern "C" void bg_QTextCharFormat_setAnchorNames_const_QStringList_R(QTextCharFormat * _self_, const QStringList & names) {
  _self_->setAnchorNames(names);
}

extern "C" QStringList * bg_QTextCharFormat_anchorNames_(QTextCharFormat * _self_) {
  return new (UseGC) QStringList (_self_->anchorNames());
}

extern "C" void bg_QTextCharFormat_setTableCellRowSpan_int(QTextCharFormat * _self_, int tableCellRowSpan) {
  _self_->setTableCellRowSpan(tableCellRowSpan);
}

extern "C" int bg_QTextCharFormat_tableCellRowSpan_(QTextCharFormat * _self_) {
  return _self_->tableCellRowSpan();
}

extern "C" void bg_QTextCharFormat_setTableCellColumnSpan_int(QTextCharFormat * _self_, int tableCellColumnSpan) {
  _self_->setTableCellColumnSpan(tableCellColumnSpan);
}

extern "C" int bg_QTextCharFormat_tableCellColumnSpan_(QTextCharFormat * _self_) {
  return _self_->tableCellColumnSpan();
}

extern "C" QTextCharFormat * bg_QTextCharFormat__CONSTRUCT_const_QTextFormat_R(const QTextFormat & fmt) {
  return new (UseGC) QTextCharFormat(fmt);
}

extern "C" QTextFrameFormat * bg_QTextFrameFormat__CONSTRUCT_() {
  return new (UseGC) QTextFrameFormat();
}

extern "C" bool bg_QTextFrameFormat_isValid_(QTextFrameFormat * _self_) {
  return _self_->isValid();
}

extern "C" void bg_QTextFrameFormat_setPosition_QTextFrameFormat__Position(QTextFrameFormat * _self_, QTextFrameFormat::Position f) {
  _self_->setPosition(f);
}

extern "C" QTextFrameFormat::Position bg_QTextFrameFormat_position_(QTextFrameFormat * _self_) {
  return _self_->position();
}

extern "C" void bg_QTextFrameFormat_setBorder_qreal(QTextFrameFormat * _self_, qreal border) {
  _self_->setBorder(border);
}

extern "C" qreal bg_QTextFrameFormat_border_(QTextFrameFormat * _self_) {
  return _self_->border();
}

extern "C" void bg_QTextFrameFormat_setBorderBrush_const_QBrush_R(QTextFrameFormat * _self_, const QBrush & brush) {
  _self_->setBorderBrush(brush);
}

extern "C" QBrush * bg_QTextFrameFormat_borderBrush_(QTextFrameFormat * _self_) {
  return new (UseGC) QBrush (_self_->borderBrush());
}

extern "C" void bg_QTextFrameFormat_setBorderStyle_QTextFrameFormat__BorderStyle(QTextFrameFormat * _self_, QTextFrameFormat::BorderStyle style) {
  _self_->setBorderStyle(style);
}

extern "C" QTextFrameFormat::BorderStyle bg_QTextFrameFormat_borderStyle_(QTextFrameFormat * _self_) {
  return _self_->borderStyle();
}

extern "C" void bg_QTextFrameFormat_setMargin_qreal(QTextFrameFormat * _self_, qreal margin) {
  _self_->setMargin(margin);
}

extern "C" qreal bg_QTextFrameFormat_margin_(QTextFrameFormat * _self_) {
  return _self_->margin();
}

extern "C" void bg_QTextFrameFormat_setTopMargin_qreal(QTextFrameFormat * _self_, qreal margin) {
  _self_->setTopMargin(margin);
}

extern "C" qreal bg_QTextFrameFormat_topMargin_(QTextFrameFormat * _self_) {
  return _self_->topMargin();
}

extern "C" void bg_QTextFrameFormat_setBottomMargin_qreal(QTextFrameFormat * _self_, qreal margin) {
  _self_->setBottomMargin(margin);
}

extern "C" qreal bg_QTextFrameFormat_bottomMargin_(QTextFrameFormat * _self_) {
  return _self_->bottomMargin();
}

extern "C" void bg_QTextFrameFormat_setLeftMargin_qreal(QTextFrameFormat * _self_, qreal margin) {
  _self_->setLeftMargin(margin);
}

extern "C" qreal bg_QTextFrameFormat_leftMargin_(QTextFrameFormat * _self_) {
  return _self_->leftMargin();
}

extern "C" void bg_QTextFrameFormat_setRightMargin_qreal(QTextFrameFormat * _self_, qreal margin) {
  _self_->setRightMargin(margin);
}

extern "C" qreal bg_QTextFrameFormat_rightMargin_(QTextFrameFormat * _self_) {
  return _self_->rightMargin();
}

extern "C" void bg_QTextFrameFormat_setPadding_qreal(QTextFrameFormat * _self_, qreal padding) {
  _self_->setPadding(padding);
}

extern "C" qreal bg_QTextFrameFormat_padding_(QTextFrameFormat * _self_) {
  return _self_->padding();
}

extern "C" void bg_QTextFrameFormat_setWidth_qreal(QTextFrameFormat * _self_, qreal width) {
  _self_->setWidth(width);
}

extern "C" void bg_QTextFrameFormat_setWidth_const_QTextLength_R(QTextFrameFormat * _self_, const QTextLength & length) {
  _self_->setWidth(length);
}

extern "C" QTextLength * bg_QTextFrameFormat_width_(QTextFrameFormat * _self_) {
  return new (UseGC) QTextLength (_self_->width());
}

extern "C" void bg_QTextFrameFormat_setHeight_qreal(QTextFrameFormat * _self_, qreal height) {
  _self_->setHeight(height);
}

extern "C" void bg_QTextFrameFormat_setHeight_const_QTextLength_R(QTextFrameFormat * _self_, const QTextLength & height) {
  _self_->setHeight(height);
}

extern "C" QTextLength * bg_QTextFrameFormat_height_(QTextFrameFormat * _self_) {
  return new (UseGC) QTextLength (_self_->height());
}

extern "C" void bg_QTextFrameFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(QTextFrameFormat * _self_, QTextFormat::PageBreakFlags flags) {
  _self_->setPageBreakPolicy(flags);
}

extern "C" QTextFormat::PageBreakFlags bg_QTextFrameFormat_pageBreakPolicy_(QTextFrameFormat * _self_) {
  return _self_->pageBreakPolicy();
}

extern "C" QTextFrameFormat * bg_QTextFrameFormat__CONSTRUCT_const_QTextFormat_R(const QTextFormat & fmt) {
  return new (UseGC) QTextFrameFormat(fmt);
}

extern "C" QTextListFormat * bg_QTextListFormat__CONSTRUCT_() {
  return new (UseGC) QTextListFormat();
}

extern "C" bool bg_QTextListFormat_isValid_(QTextListFormat * _self_) {
  return _self_->isValid();
}

extern "C" void bg_QTextListFormat_setStyle_QTextListFormat__Style(QTextListFormat * _self_, QTextListFormat::Style style) {
  _self_->setStyle(style);
}

extern "C" QTextListFormat::Style bg_QTextListFormat_style_(QTextListFormat * _self_) {
  return _self_->style();
}

extern "C" void bg_QTextListFormat_setIndent_int(QTextListFormat * _self_, int indent) {
  _self_->setIndent(indent);
}

extern "C" int bg_QTextListFormat_indent_(QTextListFormat * _self_) {
  return _self_->indent();
}

extern "C" void bg_QTextListFormat_setNumberPrefix_const_QString_R(QTextListFormat * _self_, const CrystalString numberPrefix) {
  _self_->setNumberPrefix(QString::fromUtf8(numberPrefix.ptr, numberPrefix.size));
}

extern "C" CrystalString bg_QTextListFormat_numberPrefix_(QTextListFormat * _self_) {
  return qstring_to_crystal(_self_->numberPrefix());
}

extern "C" void bg_QTextListFormat_setNumberSuffix_const_QString_R(QTextListFormat * _self_, const CrystalString numberSuffix) {
  _self_->setNumberSuffix(QString::fromUtf8(numberSuffix.ptr, numberSuffix.size));
}

extern "C" CrystalString bg_QTextListFormat_numberSuffix_(QTextListFormat * _self_) {
  return qstring_to_crystal(_self_->numberSuffix());
}

extern "C" QTextListFormat * bg_QTextListFormat__CONSTRUCT_const_QTextFormat_R(const QTextFormat & fmt) {
  return new (UseGC) QTextListFormat(fmt);
}

extern "C" QTextLength * bg_QTextLength__CONSTRUCT_() {
  return new (UseGC) QTextLength();
}

extern "C" QTextLength * bg_QTextLength__CONSTRUCT_QTextLength__Type_qreal(QTextLength::Type type, qreal value) {
  return new (UseGC) QTextLength(type, value);
}

extern "C" QTextLength::Type bg_QTextLength_type_(QTextLength * _self_) {
  return _self_->type();
}

extern "C" qreal bg_QTextLength_value_qreal(QTextLength * _self_, qreal maximumLength) {
  return _self_->value(maximumLength);
}

extern "C" qreal bg_QTextLength_rawValue_(QTextLength * _self_) {
  return _self_->rawValue();
}

extern "C" QFont * bg_QFont__CONSTRUCT_() {
  return new (UseGC) QFont();
}

extern "C" QFont * bg_QFont__CONSTRUCT_const_QString_R_int_int_bool(const CrystalString family, int pointSize, int weight, bool italic) {
  return new (UseGC) QFont(QString::fromUtf8(family.ptr, family.size), pointSize, weight, italic);
}

extern "C" QFont * bg_QFont__CONSTRUCT_const_QFont_R_QPaintDevice_X(const QFont & unnamed_arg_0, QPaintDevice * pd) {
  return new (UseGC) QFont(unnamed_arg_0, pd);
}

extern "C" void bg_QFont_swap_QFont_R(QFont * _self_, QFont & other) {
  _self_->swap(other);
}

extern "C" CrystalString bg_QFont_family_(QFont * _self_) {
  return qstring_to_crystal(_self_->family());
}

extern "C" void bg_QFont_setFamily_const_QString_R(QFont * _self_, const CrystalString unnamed_arg_0) {
  _self_->setFamily(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QFont_styleName_(QFont * _self_) {
  return qstring_to_crystal(_self_->styleName());
}

extern "C" void bg_QFont_setStyleName_const_QString_R(QFont * _self_, const CrystalString unnamed_arg_0) {
  _self_->setStyleName(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" int bg_QFont_pointSize_(QFont * _self_) {
  return _self_->pointSize();
}

extern "C" void bg_QFont_setPointSize_int(QFont * _self_, int unnamed_arg_0) {
  _self_->setPointSize(unnamed_arg_0);
}

extern "C" qreal bg_QFont_pointSizeF_(QFont * _self_) {
  return _self_->pointSizeF();
}

extern "C" void bg_QFont_setPointSizeF_qreal(QFont * _self_, qreal unnamed_arg_0) {
  _self_->setPointSizeF(unnamed_arg_0);
}

extern "C" int bg_QFont_pixelSize_(QFont * _self_) {
  return _self_->pixelSize();
}

extern "C" void bg_QFont_setPixelSize_int(QFont * _self_, int unnamed_arg_0) {
  _self_->setPixelSize(unnamed_arg_0);
}

extern "C" int bg_QFont_weight_(QFont * _self_) {
  return _self_->weight();
}

extern "C" void bg_QFont_setWeight_int(QFont * _self_, int unnamed_arg_0) {
  _self_->setWeight(unnamed_arg_0);
}

extern "C" bool bg_QFont_bold_(QFont * _self_) {
  return _self_->bold();
}

extern "C" void bg_QFont_setBold_bool(QFont * _self_, bool unnamed_arg_0) {
  _self_->setBold(unnamed_arg_0);
}

extern "C" void bg_QFont_setStyle_QFont__Style(QFont * _self_, QFont::Style style) {
  _self_->setStyle(style);
}

extern "C" QFont::Style bg_QFont_style_(QFont * _self_) {
  return _self_->style();
}

extern "C" bool bg_QFont_italic_(QFont * _self_) {
  return _self_->italic();
}

extern "C" void bg_QFont_setItalic_bool(QFont * _self_, bool b) {
  _self_->setItalic(b);
}

extern "C" bool bg_QFont_underline_(QFont * _self_) {
  return _self_->underline();
}

extern "C" void bg_QFont_setUnderline_bool(QFont * _self_, bool unnamed_arg_0) {
  _self_->setUnderline(unnamed_arg_0);
}

extern "C" bool bg_QFont_overline_(QFont * _self_) {
  return _self_->overline();
}

extern "C" void bg_QFont_setOverline_bool(QFont * _self_, bool unnamed_arg_0) {
  _self_->setOverline(unnamed_arg_0);
}

extern "C" bool bg_QFont_strikeOut_(QFont * _self_) {
  return _self_->strikeOut();
}

extern "C" void bg_QFont_setStrikeOut_bool(QFont * _self_, bool unnamed_arg_0) {
  _self_->setStrikeOut(unnamed_arg_0);
}

extern "C" bool bg_QFont_fixedPitch_(QFont * _self_) {
  return _self_->fixedPitch();
}

extern "C" void bg_QFont_setFixedPitch_bool(QFont * _self_, bool unnamed_arg_0) {
  _self_->setFixedPitch(unnamed_arg_0);
}

extern "C" bool bg_QFont_kerning_(QFont * _self_) {
  return _self_->kerning();
}

extern "C" void bg_QFont_setKerning_bool(QFont * _self_, bool unnamed_arg_0) {
  _self_->setKerning(unnamed_arg_0);
}

extern "C" QFont::StyleHint bg_QFont_styleHint_(QFont * _self_) {
  return _self_->styleHint();
}

extern "C" QFont::StyleStrategy bg_QFont_styleStrategy_(QFont * _self_) {
  return _self_->styleStrategy();
}

extern "C" void bg_QFont_setStyleHint_QFont__StyleHint_QFont__StyleStrategy(QFont * _self_, QFont::StyleHint unnamed_arg_0, QFont::StyleStrategy unnamed_arg_1) {
  _self_->setStyleHint(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QFont_setStyleStrategy_QFont__StyleStrategy(QFont * _self_, QFont::StyleStrategy s) {
  _self_->setStyleStrategy(s);
}

extern "C" int bg_QFont_stretch_(QFont * _self_) {
  return _self_->stretch();
}

extern "C" void bg_QFont_setStretch_int(QFont * _self_, int unnamed_arg_0) {
  _self_->setStretch(unnamed_arg_0);
}

extern "C" qreal bg_QFont_letterSpacing_(QFont * _self_) {
  return _self_->letterSpacing();
}

extern "C" QFont::SpacingType bg_QFont_letterSpacingType_(QFont * _self_) {
  return _self_->letterSpacingType();
}

extern "C" void bg_QFont_setLetterSpacing_QFont__SpacingType_qreal(QFont * _self_, QFont::SpacingType type, qreal spacing) {
  _self_->setLetterSpacing(type, spacing);
}

extern "C" qreal bg_QFont_wordSpacing_(QFont * _self_) {
  return _self_->wordSpacing();
}

extern "C" void bg_QFont_setWordSpacing_qreal(QFont * _self_, qreal spacing) {
  _self_->setWordSpacing(spacing);
}

extern "C" void bg_QFont_setCapitalization_QFont__Capitalization(QFont * _self_, QFont::Capitalization unnamed_arg_0) {
  _self_->setCapitalization(unnamed_arg_0);
}

extern "C" QFont::Capitalization bg_QFont_capitalization_(QFont * _self_) {
  return _self_->capitalization();
}

extern "C" void bg_QFont_setHintingPreference_QFont__HintingPreference(QFont * _self_, QFont::HintingPreference hintingPreference) {
  _self_->setHintingPreference(hintingPreference);
}

extern "C" QFont::HintingPreference bg_QFont_hintingPreference_(QFont * _self_) {
  return _self_->hintingPreference();
}

extern "C" bool bg_QFont_rawMode_(QFont * _self_) {
  return _self_->rawMode();
}

extern "C" void bg_QFont_setRawMode_bool(QFont * _self_, bool unnamed_arg_0) {
  _self_->setRawMode(unnamed_arg_0);
}

extern "C" bool bg_QFont_exactMatch_(QFont * _self_) {
  return _self_->exactMatch();
}

extern "C" bool bg_QFont_isCopyOf_const_QFont_R(QFont * _self_, const QFont & unnamed_arg_0) {
  return _self_->isCopyOf(unnamed_arg_0);
}

extern "C" void bg_QFont_setRawName_const_QString_R(QFont * _self_, const CrystalString unnamed_arg_0) {
  _self_->setRawName(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QFont_rawName_(QFont * _self_) {
  return qstring_to_crystal(_self_->rawName());
}

extern "C" CrystalString bg_QFont_key_(QFont * _self_) {
  return qstring_to_crystal(_self_->key());
}

extern "C" CrystalString bg_QFont_toString_(QFont * _self_) {
  return qstring_to_crystal(_self_->toString());
}

extern "C" bool bg_QFont_fromString_const_QString_R(QFont * _self_, const CrystalString unnamed_arg_0) {
  return _self_->fromString(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QFont_substitute_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  return qstring_to_crystal(QFont::substitute(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size)));
}

extern "C" QStringList * bg_QFont_substitutes_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  return new (UseGC) QStringList (QFont::substitutes(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size)));
}

extern "C" QStringList * bg_QFont_substitutions_STATIC_() {
  return new (UseGC) QStringList (QFont::substitutions());
}

extern "C" void bg_QFont_insertSubstitution_STATIC_const_QString_R_const_QString_R(const CrystalString unnamed_arg_0, const CrystalString unnamed_arg_1) {
  QFont::insertSubstitution(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size), QString::fromUtf8(unnamed_arg_1.ptr, unnamed_arg_1.size));
}

extern "C" void bg_QFont_insertSubstitutions_STATIC_const_QString_R_const_QStringList_R(const CrystalString unnamed_arg_0, const QStringList & unnamed_arg_1) {
  QFont::insertSubstitutions(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size), unnamed_arg_1);
}

extern "C" void bg_QFont_removeSubstitutions_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  QFont::removeSubstitutions(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QFont_initialize_STATIC_() {
  QFont::initialize();
}

extern "C" void bg_QFont_cleanup_STATIC_() {
  QFont::cleanup();
}

extern "C" void bg_QFont_cacheStatistics_STATIC_() {
  QFont::cacheStatistics();
}

extern "C" CrystalString bg_QFont_defaultFamily_(QFont * _self_) {
  return qstring_to_crystal(_self_->defaultFamily());
}

extern "C" CrystalString bg_QFont_lastResortFamily_(QFont * _self_) {
  return qstring_to_crystal(_self_->lastResortFamily());
}

extern "C" CrystalString bg_QFont_lastResortFont_(QFont * _self_) {
  return qstring_to_crystal(_self_->lastResortFont());
}

extern "C" QFont * bg_QFont_resolve_const_QFont_R(QFont * _self_, const QFont & unnamed_arg_0) {
  return new (UseGC) QFont (_self_->resolve(unnamed_arg_0));
}

extern "C" uint bg_QFont_resolve_(QFont * _self_) {
  return _self_->resolve();
}

extern "C" void bg_QFont_resolve_uint(QFont * _self_, uint mask) {
  _self_->resolve(mask);
}

extern "C" const char * bg____qVersion_STATIC_() {
  return ::qVersion();
}

extern "C" Container_QList_qreal * bg_Container_QList_qreal__CONSTRUCT_() {
  return new (UseGC) Container_QList_qreal (Container_QList_qreal());
}

extern "C" qreal bg_Container_QList_qreal_at_int(Container_QList_qreal * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_qreal_push_back_qreal(Container_QList_qreal * _self_, qreal value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_qreal_size_(Container_QList_qreal * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QObject_X * bg_Container_QList_QObject_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QObject_X (Container_QList_QObject_X());
}

extern "C" QObject * bg_Container_QList_QObject_X_at_int(Container_QList_QObject_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QObject_X_push_back_QObject_X(Container_QList_QObject_X * _self_, QObject * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QObject_X_size_(Container_QList_QObject_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QAbstractEventDispatcher__TimerInfo * bg_Container_QList_QAbstractEventDispatcher__TimerInfo__CONSTRUCT_() {
  return new (UseGC) Container_QList_QAbstractEventDispatcher__TimerInfo (Container_QList_QAbstractEventDispatcher__TimerInfo());
}

extern "C" QAbstractEventDispatcher::TimerInfo bg_Container_QList_QAbstractEventDispatcher__TimerInfo_at_int(Container_QList_QAbstractEventDispatcher__TimerInfo * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QAbstractEventDispatcher__TimerInfo_push_back_QAbstractEventDispatcher__TimerInfo(Container_QList_QAbstractEventDispatcher__TimerInfo * _self_, QAbstractEventDispatcher::TimerInfo value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QAbstractEventDispatcher__TimerInfo_size_(Container_QList_QAbstractEventDispatcher__TimerInfo * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QAction_X * bg_Container_QList_QAction_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QAction_X (Container_QList_QAction_X());
}

extern "C" QAction * bg_Container_QList_QAction_X_at_int(Container_QList_QAction_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QAction_X_push_back_QAction_X(Container_QList_QAction_X * _self_, QAction * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QAction_X_size_(Container_QList_QAction_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QWidget_X * bg_Container_QList_QWidget_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QWidget_X (Container_QList_QWidget_X());
}

extern "C" QWidget * bg_Container_QList_QWidget_X_at_int(Container_QList_QWidget_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QWidget_X_push_back_QWidget_X(Container_QList_QWidget_X * _self_, QWidget * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QWidget_X_size_(Container_QList_QWidget_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QKeySequence * bg_Container_QList_QKeySequence__CONSTRUCT_() {
  return new (UseGC) Container_QList_QKeySequence (Container_QList_QKeySequence());
}

extern "C" QKeySequence * bg_Container_QList_QKeySequence_at_int(Container_QList_QKeySequence * _self_, int index) {
  return new (UseGC) QKeySequence (_self_->at(index));
}

extern "C" void bg_Container_QList_QKeySequence_push_back_QKeySequence(Container_QList_QKeySequence * _self_, QKeySequence & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QKeySequence_size_(Container_QList_QKeySequence * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QGraphicsWidget_X * bg_Container_QList_QGraphicsWidget_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QGraphicsWidget_X (Container_QList_QGraphicsWidget_X());
}

extern "C" QGraphicsWidget * bg_Container_QList_QGraphicsWidget_X_at_int(Container_QList_QGraphicsWidget_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QGraphicsWidget_X_push_back_QGraphicsWidget_X(Container_QList_QGraphicsWidget_X * _self_, QGraphicsWidget * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QGraphicsWidget_X_size_(Container_QList_QGraphicsWidget_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QDockWidget_X * bg_Container_QList_QDockWidget_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QDockWidget_X (Container_QList_QDockWidget_X());
}

extern "C" QDockWidget * bg_Container_QList_QDockWidget_X_at_int(Container_QList_QDockWidget_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QDockWidget_X_push_back_QDockWidget_X(Container_QList_QDockWidget_X * _self_, QDockWidget * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QDockWidget_X_size_(Container_QList_QDockWidget_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_int * bg_Container_QList_int__CONSTRUCT_() {
  return new (UseGC) Container_QList_int (Container_QList_int());
}

extern "C" int bg_Container_QList_int_at_int(Container_QList_int * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_int_push_back_int(Container_QList_int * _self_, int value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_int_size_(Container_QList_int * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QAbstractButton_X * bg_Container_QList_QAbstractButton_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QAbstractButton_X (Container_QList_QAbstractButton_X());
}

extern "C" QAbstractButton * bg_Container_QList_QAbstractButton_X_at_int(Container_QList_QAbstractButton_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QAbstractButton_X_push_back_QAbstractButton_X(Container_QList_QAbstractButton_X * _self_, QAbstractButton * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QAbstractButton_X_size_(Container_QList_QAbstractButton_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QWindow_X * bg_Container_QList_QWindow_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QWindow_X (Container_QList_QWindow_X());
}

extern "C" QWindow * bg_Container_QList_QWindow_X_at_int(Container_QList_QWindow_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QWindow_X_push_back_QWindow_X(Container_QList_QWindow_X * _self_, QWindow * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QWindow_X_size_(Container_QList_QWindow_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QScreen_X * bg_Container_QList_QScreen_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QScreen_X (Container_QList_QScreen_X());
}

extern "C" QScreen * bg_Container_QList_QScreen_X_at_int(Container_QList_QScreen_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QScreen_X_push_back_QScreen_X(Container_QList_QScreen_X * _self_, QScreen * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QScreen_X_size_(Container_QList_QScreen_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QVariant * bg_Container_QList_QVariant__CONSTRUCT_() {
  return new (UseGC) Container_QList_QVariant (Container_QList_QVariant());
}

extern "C" CrystalVariant bg_Container_QList_QVariant_at_int(Container_QList_QVariant * _self_, int index) {
  return qvariant_to_crystal(_self_->at(index));
}

extern "C" void bg_Container_QList_QVariant_push_back_QVariant(Container_QList_QVariant * _self_, CrystalVariant value) {
  _self_->push_back(crystal_to_qvariant(value));
}

extern "C" int bg_Container_QList_QVariant_size_(Container_QList_QVariant * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QSize * bg_Container_QList_QSize__CONSTRUCT_() {
  return new (UseGC) Container_QList_QSize (Container_QList_QSize());
}

extern "C" QSize * bg_Container_QList_QSize_at_int(Container_QList_QSize * _self_, int index) {
  return new (UseGC) QSize (_self_->at(index));
}

extern "C" void bg_Container_QList_QSize_push_back_QSize(Container_QList_QSize * _self_, QSize & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QSize_size_(Container_QList_QSize * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QUrl * bg_Container_QList_QUrl__CONSTRUCT_() {
  return new (UseGC) Container_QList_QUrl (Container_QList_QUrl());
}

extern "C" QUrl * bg_Container_QList_QUrl_at_int(Container_QList_QUrl * _self_, int index) {
  return new (UseGC) QUrl (_self_->at(index));
}

extern "C" void bg_Container_QList_QUrl_push_back_QUrl(Container_QList_QUrl * _self_, QUrl & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QUrl_size_(Container_QList_QUrl * _self_) {
  return _self_->size();
}

extern "C" Container_QList_double * bg_Container_QList_double__CONSTRUCT_() {
  return new (UseGC) Container_QList_double (Container_QList_double());
}

extern "C" double bg_Container_QList_double_at_int(Container_QList_double * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_double_push_back_double(Container_QList_double * _self_, double value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_double_size_(Container_QList_double * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QFileInfo * bg_Container_QList_QFileInfo__CONSTRUCT_() {
  return new (UseGC) Container_QList_QFileInfo (Container_QList_QFileInfo());
}

extern "C" QFileInfo * bg_Container_QList_QFileInfo_at_int(Container_QList_QFileInfo * _self_, int index) {
  return new (UseGC) QFileInfo (_self_->at(index));
}

extern "C" void bg_Container_QList_QFileInfo_push_back_QFileInfo(Container_QList_QFileInfo * _self_, QFileInfo & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QFileInfo_size_(Container_QList_QFileInfo * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QGraphicsItem_X * bg_Container_QList_QGraphicsItem_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QGraphicsItem_X (Container_QList_QGraphicsItem_X());
}

extern "C" QGraphicsItem * bg_Container_QList_QGraphicsItem_X_at_int(Container_QList_QGraphicsItem_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QGraphicsItem_X_push_back_QGraphicsItem_X(Container_QList_QGraphicsItem_X * _self_, QGraphicsItem * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QGraphicsItem_X_size_(Container_QList_QGraphicsItem_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QGraphicsTransform_X * bg_Container_QList_QGraphicsTransform_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QGraphicsTransform_X (Container_QList_QGraphicsTransform_X());
}

extern "C" QGraphicsTransform * bg_Container_QList_QGraphicsTransform_X_at_int(Container_QList_QGraphicsTransform_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QGraphicsTransform_X_push_back_QGraphicsTransform_X(Container_QList_QGraphicsTransform_X * _self_, QGraphicsTransform * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QGraphicsTransform_X_size_(Container_QList_QGraphicsTransform_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QGraphicsView_X * bg_Container_QList_QGraphicsView_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QGraphicsView_X (Container_QList_QGraphicsView_X());
}

extern "C" QGraphicsView * bg_Container_QList_QGraphicsView_X_at_int(Container_QList_QGraphicsView_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QGraphicsView_X_push_back_QGraphicsView_X(Container_QList_QGraphicsView_X * _self_, QGraphicsView * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QGraphicsView_X_size_(Container_QList_QGraphicsView_X * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QRectF * bg_Container_QList_QRectF__CONSTRUCT_() {
  return new (UseGC) Container_QList_QRectF (Container_QList_QRectF());
}

extern "C" QRectF * bg_Container_QList_QRectF_at_int(Container_QList_QRectF * _self_, int index) {
  return new (UseGC) QRectF (_self_->at(index));
}

extern "C" void bg_Container_QList_QRectF_push_back_QRectF(Container_QList_QRectF * _self_, QRectF & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QRectF_size_(Container_QList_QRectF * _self_) {
  return _self_->size();
}

extern "C" Container_QList_QGesture_X * bg_Container_QList_QGesture_X__CONSTRUCT_() {
  return new (UseGC) Container_QList_QGesture_X (Container_QList_QGesture_X());
}

extern "C" QGesture * bg_Container_QList_QGesture_X_at_int(Container_QList_QGesture_X * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QList_QGesture_X_push_back_QGesture_X(Container_QList_QGesture_X * _self_, QGesture * value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QList_QGesture_X_size_(Container_QList_QGesture_X * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QRgb * bg_Container_QVector_QRgb__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QRgb (Container_QVector_QRgb());
}

extern "C" QRgb bg_Container_QVector_QRgb_at_int(Container_QVector_QRgb * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QVector_QRgb_push_back_QRgb(Container_QVector_QRgb * _self_, QRgb value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QRgb_size_(Container_QVector_QRgb * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_unsigned_int * bg_Container_QVector_unsigned_int__CONSTRUCT_() {
  return new (UseGC) Container_QVector_unsigned_int (Container_QVector_unsigned_int());
}

extern "C" unsigned int bg_Container_QVector_unsigned_int_at_int(Container_QVector_unsigned_int * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QVector_unsigned_int_push_back_unsigned_int(Container_QVector_unsigned_int * _self_, unsigned int value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_unsigned_int_size_(Container_QVector_unsigned_int * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QTextFormat * bg_Container_QVector_QTextFormat__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QTextFormat (Container_QVector_QTextFormat());
}

extern "C" QTextFormat * bg_Container_QVector_QTextFormat_at_int(Container_QVector_QTextFormat * _self_, int index) {
  return new (UseGC) QTextFormat (_self_->at(index));
}

extern "C" void bg_Container_QVector_QTextFormat_push_back_QTextFormat(Container_QVector_QTextFormat * _self_, QTextFormat & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QTextFormat_size_(Container_QVector_QTextFormat * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QLineF * bg_Container_QVector_QLineF__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QLineF (Container_QVector_QLineF());
}

extern "C" QLineF * bg_Container_QVector_QLineF_at_int(Container_QVector_QLineF * _self_, int index) {
  return new (UseGC) QLineF (_self_->at(index));
}

extern "C" void bg_Container_QVector_QLineF_push_back_QLineF(Container_QVector_QLineF * _self_, QLineF & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QLineF_size_(Container_QVector_QLineF * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QPointF * bg_Container_QVector_QPointF__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QPointF (Container_QVector_QPointF());
}

extern "C" QPointF bg_Container_QVector_QPointF_at_int(Container_QVector_QPointF * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QVector_QPointF_push_back_QPointF(Container_QVector_QPointF * _self_, QPointF value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QPointF_size_(Container_QVector_QPointF * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QLine * bg_Container_QVector_QLine__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QLine (Container_QVector_QLine());
}

extern "C" QLine * bg_Container_QVector_QLine_at_int(Container_QVector_QLine * _self_, int index) {
  return new (UseGC) QLine (_self_->at(index));
}

extern "C" void bg_Container_QVector_QLine_push_back_QLine(Container_QVector_QLine * _self_, QLine & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QLine_size_(Container_QVector_QLine * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QPoint * bg_Container_QVector_QPoint__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QPoint (Container_QVector_QPoint());
}

extern "C" QPoint bg_Container_QVector_QPoint_at_int(Container_QVector_QPoint * _self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_Container_QVector_QPoint_push_back_QPoint(Container_QVector_QPoint * _self_, QPoint value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QPoint_size_(Container_QVector_QPoint * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QRectF * bg_Container_QVector_QRectF__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QRectF (Container_QVector_QRectF());
}

extern "C" QRectF * bg_Container_QVector_QRectF_at_int(Container_QVector_QRectF * _self_, int index) {
  return new (UseGC) QRectF (_self_->at(index));
}

extern "C" void bg_Container_QVector_QRectF_push_back_QRectF(Container_QVector_QRectF * _self_, QRectF & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QRectF_size_(Container_QVector_QRectF * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QRect * bg_Container_QVector_QRect__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QRect (Container_QVector_QRect());
}

extern "C" QRect * bg_Container_QVector_QRect_at_int(Container_QVector_QRect * _self_, int index) {
  return new (UseGC) QRect (_self_->at(index));
}

extern "C" void bg_Container_QVector_QRect_push_back_QRect(Container_QVector_QRect * _self_, QRect & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QRect_size_(Container_QVector_QRect * _self_) {
  return _self_->size();
}

extern "C" Container_QVector_QTextLength * bg_Container_QVector_QTextLength__CONSTRUCT_() {
  return new (UseGC) Container_QVector_QTextLength (Container_QVector_QTextLength());
}

extern "C" QTextLength * bg_Container_QVector_QTextLength_at_int(Container_QVector_QTextLength * _self_, int index) {
  return new (UseGC) QTextLength (_self_->at(index));
}

extern "C" void bg_Container_QVector_QTextLength_push_back_QTextLength(Container_QVector_QTextLength * _self_, QTextLength & value) {
  _self_->push_back(value);
}

extern "C" int bg_Container_QVector_QTextLength_size_(Container_QVector_QTextLength * _self_) {
  return _self_->size();
}

